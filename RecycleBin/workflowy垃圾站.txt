垃圾站

- TEMP
  - 网页快照 2020年7月20日
    "淘宝绘画课程
    http://v.xue.taobao.com/learn.htm?itemId=556007124136
    http://v.xue.taobao.com/learn.htm?itemId=556007124136
    
    圣母在上
    https://www.bilibili.com/video/BV1ix411T7bT?p=2
    
    欲望经济史
    https://www.bilibili.com/video/BV1Vb411G7jf/?spm_id_from=333.788.videocard.0
    
    钢琴
    https://www.bilibili.com/video/BV124411E7Ut?p=9
    
    
    画画B站
    https://www.bilibili.com/video/BV1oE411A7xj/?spm_id_from=333.788.videocard.12
    https://www.bilibili.com/video/BV1i541147XD/?spm_id_from=333.788.videocard.3
    https://www.bilibili.com/video/BV18s411t7fA?p=6
    https://www.bilibili.com/video/BV13W411c7Fe?p=2
    "
  - 0831
    - https://www.zhihu.com/search?type=content&q=%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%20XA
    - https://zhuanlan.zhihu.com/p/93459200
    - https://zhuanlan.zhihu.com/p/79833740
    - https://zhuanlan.zhihu.com/p/72884221
    - https://zhuanlan.zhihu.com/p/96767221
    - https://zhuanlan.zhihu.com/p/142136446
    - https://www.wondercv.com/cvs/WOX4X7R5/editor
- EverNote整理
  - 注释和评价
    "【workflowy注2019年4月21日：对无法导入的图片的说明】
    【workflowy评2019年4月21日：当前感想】"
  - 2018整理
    - 20181201-167991字
      - 2018年12月1日--【MB】知乎兄妹天枢真人&天璇真人
      - 2018年12月1日--【MB】瑜伽（大二上体育课）
      - 2018年12月1日pass--【】2015 妹妹大姨妈
      - 2018年12月1日pass--【】妹妹蓝颜
      - 2018年12月1日pass--【MB】猫咪虚拟恋人名单
        "&【總結】和妹妹是女朋友的時候，有一次吵架，她不高興了，就在貼吧去開了一個虛擬戀人的服務。大概內容就是讓貼吧的好友下單，然後他就會指定人和他當三十分鐘的虛擬戀人。這個活動當时在貼吧，有很多人都在弄，然後我實在是覺得很討厭。但是為了和妹妹和好吧，我就覺得我應該幫他，所以就弄了這樣一個虛擬戀人的名單。想想就覺得當時是，腦子抽了。"
      - 2018年12月1日pass--华科上机密码
      - 2018年12月1日pass--英语四级
        "544/710 聽力185 閲讀199 寫作160"
      - 2018年12月1日--【MB】20150525给妹妹的检讨
      - 2018年12月1日pass--card
      - 2018年12月1日--【MB】中華禮儀與風俗笔记（大一下公选课）
      - 2018年12月1日--网络愚人（文言）
      - 2018年12月1日--爱情心理学笔记（大一下公选课）
      - 2018年12月1日--201503 第一次去昆明
      - 2018年12月1日pass--乱兄妹
      - 2018年12月1日--20150208 恋童癖保证书
      - 2018年12月1日pass--2015 安眠曲（歌词）
    - 20181202-173334字
      - 2018年12月2日pass--妹妹100问
      - 2018年12月2日pass--ct pw
      - 2018年12月2日--一个妹控真实的想法
      - 2018年12月2日pass--纸条
        "和曹宇瓊傳的紙條"
      - 2018年12月2日pass--甜甜小时候
      - 2018年12月2日pass--「见笑」「见谅」中的「见」是什么意思？「让您见笑了」是误用吗？
      - 2018年12月2日--知乎，發現更大的世界
      - 2018年12月2日pass--普通的兄妹
      - 2018年12月2日--无用也是有用 汤玥
      - 2018年12月2日pass--有一种泪水叫做坚强
        "許亦冉作文，下6篇同"
      - 2018年12月2日pass--打造自信的我
      - 2018年12月2日pass--那一次，我真的笑了
      - 2018年12月2日pass--让自己沸腾
      - 2018年12月2日pass--父亲是一本书
      - 2018年12月2日pass--读你
      - 2018年12月2日pass--我们一起走过
        "神文"
      - 2018年12月2日--乔布斯传
      - 2018年12月2日--冷门成语
      - 2018年12月2日pass--大二上止加权排名
    - 20181204
      - 2018年12月4日pass-熊孩子萝莉
        "5.6MB大的三張圖，恐怖啊恐怖"
      - 2018年12月4日--美說
      - 2018年12月4日pass--兄妹 知乎 温馨
      - 2018年12月4日pass--书单
      - 2018年12月4日pass--天朝的崩溃 知乎网友评价
      - 2018年12月4日pass--土地革命是失败的？
      - 2018年12月4日pass--深圳逃跑。逃港。需要了解一下
      - 2018年12月4日pass--文渊阁四库全书|文渊阁四库全书电子版下载 - 121下载站
      - 2018年12月4日pass--谥法表
      - 2018年12月4日pass--蔡元培为什么做了那么久？
      - 2018年12月4日pass--正音书馆 百度百科
      - 2018年12月4日--真学者 某老师推荐
        "李慎之 杨奎松 贺卫方 高华 蓝英年 秦晖 雷颐 徐友渔  "
      - 2018年12月4日pass--台湾日据时期前后 社会心理研究
      - 2018年12月4日--上德不为
      - 2018年12月4日pass--杨度。冯道
      - 2018年12月4日pass--《伶人往事》 《往事并不如烟》章怡和
      - 2018年12月4日pass--百度行为
      - 2018年12月4日pass--印度的人口年龄分布为何每五年出现一个高峰？修改
      - 2018年12月4日pass--乌合之众 百度
      - 2018年12月4日pass--谨防魏则西背后的“高盛”手段！别再傻傻的起哄了！
      - 2018年12月4日pass--憧憬
    - 20181208
      - 2018年12月8日pass--中国城镇面积 4万平方公里，用面积的千分之四
      - 2018年12月8日pass--尊重差异，热爱和平。
        "文章要点：极少部分穆斯林的暴行让世界反穆斯林的力量越来越强大，民意基础也越来越深厚。欧洲许多国家的反穆斯林团体，他们有着极端的目的，却越来越受到民众的支持。或许最后，欧洲不再有同情，也不会有战争，只有屠杀。  "
      - 2018年12月8日pass--体验就是当GPA过4之后，任何课程没考到95以上你都会觉得“焚蛋，劳资这门课没考好，GPA要掉！“。可以享受各种学校政策优惠，对，学校那边啥好事都是你优先。大四
      - 2018年12月8日pass--电话卡
      - 2018年12月8日pass--書單
      - 2018年12月8日pass--黒澤ルビィ　挨拶
      - 2018年12月8日pass--甜0118
      - 2018年12月8日pass--怡0917
      - 2018年12月8日pass--涵1024
      - 2018年12月8日pass--验血 抽血 体检 性激素20161024
      - 2018年12月8日pass--验血 抽血 体检 性激素20161114
      - 2018年12月8日pass--HRT注意事项 变化 副作用
      - 2018年12月8日pass--1116班花名册 毕业去向
      - 2018年12月8日pass--初中被玩 今做手术
      - 2018年12月8日pass--SUKI遵从内心 不要被刻板印象束缚
      - 2018年12月8日pass--SUKI的陪伴
      - 2018年12月8日pass--SUKI的名字 陈艺航 陈意涵
      - 2018年12月8日pass--SUKI两个m
      - 2018年12月8日pass--二爷 确定要吃药吗？
      - 2018年12月8日pass--二爷 怂，就在网上厉害
      - 2018年12月8日pass--体育 体测 成绩
      - 2018年12月8日pass--二爷 也想被干…
      - 2018年12月8日pass--mmpi测试作弊
      - 2018年12月8日pass--二爷 吧主是扶她？
    - 20181211
      - 2018年12月11日pass--萤惑 母上的理解和爱
        "萤惑出櫃"
      - 2018年12月11日pass--甜甜 我也有责任
        "告訴妹妹吃糖"
      - 2018年12月11日pass--跨性别避难所 众筹
      - 2018年12月11日pass--二爷 女装钓鱼成功
      - 2018年12月11日pass--二爷 喜欢被叫做便池
      - 2018年12月11日--「天然ウルオー」紹介
      - 2018年12月11日pass--荧惑-药娘为什么不开心
      - 2018年12月11日--20160606 分手
      - 2018年12月11日--20160630 大二下考试总结
      - 2018年12月11日--20160701 大二下暑假计划
      - 2018年12月11日--20160704 考试的梦
      - 2018年12月11日--雅虎日本账号
        "账号lovelivemadoka@yahoo.co.jp密码 长  "
      - 2018年12月11日--谷歌账号
        "账号lovelivemadokast@gmail.com
        密码 中
        
        至win10 pin 0118"
      - 2018年12月11日pass--日亚 亚马逊日本账号 Kindle
      - 2018年12月11日pass--Anki账号
      - 2018年12月11日pass--多看账号 小米账号
      - 2018年12月11日pass--武汉手机卡180
      - 2018年12月11日pass--华科上机
      - 2018年12月11日pass--中华经典古籍库
      - 2018年12月11日pass--辞源 第三版 网络版
      - 2018年12月11日pass--微软账号
      - 2018年12月11日pass--智慧华中大 统一身份验证 华科
    - 20181212
      - 2018年12月12日--20161001 国庆回家大堵车
      - 2018年12月12日--20161002 国亲假 私は一体何？
      - 2018年12月12日--20161007 SUKIちゃんと出会った
      - 2018年12月12日--20161008 キャンディーを買った
      - 2018年12月12日--20161017 ホを食べ始めた
      - 2018年12月12日--20161020 胸が騒ぎ始まった
      - 2018年12月12日--20161024 血液検査を受けた。ショクを買った
      - 2018年12月12日--20161026 ショク届いた、食べた。最後の献血
      - 2018年12月12日--20161111【勘定】十月一日～双１１、女の子になるためにのみ
      - 2018年12月12日--长时间高烈度的战争中，普通人的生活是一番怎样的景象
        "叙利亚内战至今已经进行了五年多了。我有... 显示问题详情
        匿名用户
        胡远东、 天泷叔燏 等 410 人赞同
        有一些不是电影上的战争时期往事，说出来可能有人不太相信，但这是上一辈人经历过的，比较真实
        
        父辈中有人经历过那八年及解放战争，当年身高就不及一枝步枪就参加了八路军，作过通信员，传过情报，后来分散带过武工队，活动范围也是家乡一带，经常半夜摸进家，十几号人倒院子里就睡，天亮前就走，也带队杀过汉奸
        
        当年汉奸这种事，并不象电影上那么分明，主要的判断依靠各个村镇当地人的消息，一般证实后，先是半夜上门警告，聪明的就不再跟日本人合作，继续合作并且后果严重的就会锄奸。普通老百姓基本上还得种地生产，一般只要没人通风报信，日本人就不大理会，但是交粮这种事做不到，就会有麻烦，北方农村宗族观念重，大部分时候，不会有人告诉日本人谁家有人参加了武工队，但是，有一次，一个地痞报私仇，跑去给日本人通风，告发了一个人，日本人的炮楼离村子几公里远，很快就上门抓人，人没抓到，就把家给砸了，然后加征
        
        这个过程，电影当中也很少表现过，据我父亲讲，日本人要么不进村，要来一定不会善罢甘休，所以很多家都会到处挖一些藏身的地窖，带头的骑马，当兵的跑步，一过来整个村子就赶紧跑，来不及跑，就一定要藏好，我父亲当年就是被爷爷一把推到西瓜地下的暗窖，但是也不能全躲起来，一个村当中必定会有几个人负责应付，应付不好就遭殃，平时得多跑跑炮楼送点吃喝，听说到后期以后，日本人基本是不敢出炮楼的，吃的也很惨，饿了也不大敢出来
        
        日本人花样也多，有些时候小孩子没法跑也没法藏，怕哭闹暴露，就只能狠着心扔在院子里，几岁的小孩子什么也不懂，就光屁股跟着日本兵到处看，反正语言不通也没出过事，经常会给糖吃，这是真的
        
        我父亲那一辈参加八路军的比较多，老大没了，老二活到了解放，后来南下（不久后组织安排去了新疆，谢提醒，更正），普通干部退休，子女也是普通工作，不是红二代。普通人在那个时期，基本上是提心吊胆活着，睡觉耳朵都支着，有好几年都是和衣而睡，随时准备跑，这是我爷爷亲口说的，后来解放战争支前，我们那一带也算是群众基础特别好，很踊跃
        
        一分为二地说，当年那个年代的共产党部队，的确非常群众化，也得人心，相反，对国民党部队的印象，要远远坏过日本人，具体没问
        
        还有一个，在南方武汉地区，有一种很怪的现象，当地人中有一部分当兵不离家乡，那个时候招兵买马的事很多，有人就特别有意思，今天国民党部队来招人，就去报名，有钱给家属的，然后就跟着在本省附近跟共产党军队打，打败了要撤的时候，就当逃兵，又回家报名参加共产党军队，再去跟国民党打，要开拔了，就再当逃兵
        
        有一件事我是亲耳听到，但没法证实的，不同武装之间有时候会互通消息，明天我要打你了，后天我要怎么了，然后就会遇到特别怪的打法，听到乒乒乓乓枪响，过一阵就换一支部队扎营了，兵油子二边都有家乡人，二边窜谁都知道，也都需要带个口信，说白了，自已人没必要往死里干
        
        这应该是真实的
        
        这是亲历过战争的长辈说的一些故事，但高烈度谈不上，半夜搞破坏这种事，也是真实的，去挖铁轨是真的，交粮的时候做手脚也是真的，日本人当中也有些是普通的农民，懂农活，有时候你想忽悠他，他也知道，有时候也不出声，不是不想出声，而是你今天要找麻烦，过几天他就更麻烦，我伯父曾参加过一次破袭，就是因为炮楼里带队的“坏了规矩”，这么说政治不正确，但当时的确存在一种不说的默契，也叫心知肚明吧，这个炮楼抓人修路打坏了一个农民，加上周围村子都被欺负过头，就半夜摸过去，一顿手榴弹猛塞弄死了几个
        
        然后就借各个村的领事的放风，其它几个炮楼的基本也知道什么个意思，平时也就不敢太过火，但这是后期的事情，那个时候已经到了天亮日本人说了算，天暗八路说了算这种地步了，在炮楼里能保证有三餐吃都算是运气了
        
        所以战争，真的是一件很白痴的事情
        
        现在日本人大白菜狂魔，这个还是当农民的日本兵，从山东半岛带回的种子培育出来的，本来不动刀枪也可以友好交流，非要滴血
        
        政治家是人类最丑陋的一个种群，发动战争的人，往往不会是那个带头淌血的，而牺牲的，只有普通人，然而，政治的基础，还是愚昧的人民，战争，真的是自残的蠢事
        
        ---------------------------------------有些敏感的内容，想想还是补充上来
        
        长辈聊天东扯西拉，没什么条理的内容比较多，我们那附近有一个稍有规模的小镇，历史上那一片地方就是鱼龙混杂，据长辈所说，在应对日本人这事上，农村人的确要比城镇人心齐，加入各种抗日队伍的，也是乡民为多数
        
        可能有别的原因吧，在炮楼下，一个没成家的青壮年是没法在日本人眼皮底下长期生存的，我爷爷当年算是跑过买卖见过点世面，在刀口上打过滚见过生死的人，所以有很长一段时间，他就负责端着，端着的意思就是万一日本人来找事，得出面，要是死了，全村人帮养老小
        
        关于慰安妇的问题，我们那一带，实话说真没遇到强拉这种事，可能跟那个镇子有关，在日本人来之前，当地就有很多土媢暗妓，日本人也没有到村子里抓花姑娘，一方面它基本上不可能见得到花姑娘，只要日本人进村，女人一定是最先被安排跑或者藏的，另一方面，村里成年的女人基本上都打扮成了男性，粗看是注意不到的
        
        还有，以前那一带的农村，也不全都是老实巴交的农民，各乡各村里总会有一批为数不少的浪荡子，日本人来了以后，他们很快就成了抗日的骨干，很敬佩这些人，那是真的把命都不要了，我二伯父参加八路，就是有一晚搞地下护送的队伍到村里怕走漏了风声，有一个亲戚带着队伍摸上家门要了点吃的，后半夜，我二伯父就跟着他们走了
        
        他们中间也死了不少人，有一个不成文的规矩，这种死法是很了不起的，以后家事就是村事，这也是那一带乡村中真汉奸非常非常少的原因，前面说的那个告密的地痞，后来就是被半夜捅死了，然后一直到现在，他的后人在村里还背着臭名声
        
        真汉奸比较多的在镇上，我二伯父后来分散到武工队以后，主要有三个任务，一个是地下护送，一个是摸底，再一个就是锄奸，他讲过一回镇上锄奸的事，听着象玩一样，他带了几个人挑点东西去叫卖，本来就是当地人，完全不显眼，知道的人也绝对不会揭穿身份，还会打掩护，大白天摸到人家里面，先装着问要不要买东西，然后就有点象电影里说的，留二个人把门，其余人进去动手，不过，有一点跟电影说的不一样，是特意当着他家里人的面动手，当面杀，用刀
        
        杀完以后会跟家人说清楚，干了什么什么事，得死，然后要求家里人按照病死马上办丧事，如果通风给日本人，回头就杀全家
        
        基本上家属不敢不办，也不敢声张，这一招作用很大，保了很多人的安全
        
        还有一个就是白天他们活动的时候是不带枪的，刚搞武工队的时候没经验遇到一次搜查，有一个人被抓到炮楼里，后来往上送，就没一点消息了，后来去查也没找到人，肯定是死，那一带从来没出过叛变的，我二伯父年纪大了以后说起这些，完全没一点伤心的，他本来身材就高大，又不喜欢笑，我爷爷说这是武曲星下凡，煞气太重，总之我看到他也不太敢说话
        
        没死的那些后来一部分人跟着大部队走了，少数几个留在了地方，解放以后政府安排了一些学习班，后来回到地方当了小干部
        
        其实，有可能，真正面临国恨家仇的时候，能挺身而出的不一定只有饱读诗书的秀才，很多的目不识丁没什么见识的人，反而更有骨气，我二伯父到老了都有一个偏见，特别不喜欢夸夸其谈爱国的人，比如我这种，只要在他面前说几句中日关系，世界形势，他就说你连杀人都没见过，怎么这么多屁话？真打起来，说不定你就是个汉奸的料子
        
        他护送的八路军干部中，也有过被俘叛国的，对这种事，他的认识是只有刀架在你脖子上的时候，你才知道自己是不是真的有骨气，是不是真的爱国，老爱放屁扯爱国的人，搞不好最先就做了汉奸
        
        其实据他说大多数人在那个时候，都只是想活着，顺着日本人的意思办不杀头就好，少数一部分是心甘情愿给日本人卖命，还有少数一部分，就是死也不做亡国奴参加各种抵抗组织。他比较佩服的是那些城市过来的学生干部，虽然没见过世面，但是尤其有骨气
        
        所以后来我不敢乱说话，毕竟他是死人堆里爬出来的
        
        另外，炮楼的日本人也有福利，一个卡车很偶尔会送一些女的进去，我一直想问明白是什么人，只告诉我这些女人不是中国的，具体哪来的，他也不说，这种福利很少很少，后来，日本人也去镇上嫖娼，给不给钱不知道，这个镇子上的土娼生意，一直没断过，当然，也没拿她们当汉奸，因为当地人普遍认为这些女人，就是千人骑万人操的破货，没人关心她们的结局
        
        我听的这些故事，有些可能不太合理，不过这就是我能打听到的比较真实的说法，也不知道有没有人知道类似事情的，看看是不是真的
        
        另外，漏一个不太好的底，武工队的人，也会嫖，这是明确说给我听的，他们还从日本兵那里买过子弹
        
        好了，就扯这些吧，我没经历过，完全是从聊天中大概整理的，如果有政治不正确的地方请原谅"
      - 2018年12月12日--20161211 印象笔记升级
      - 2018年12月12日--20161210 二专日语考试
      - 2018年12月12日pass--荧惑的觉醒
      - 2018年12月12日--跨性别避难所
      - 2018年12月12日--20161212【勘定】双１１〜双１２
      - 2018年12月12日pass--ショク説明書
      - 2018年12月12日--20161213
    - 20181213
      - 2018年12月13日pass--荧惑姐姐 第一次说话
        "最开始和姐姐说话时关于物院的
        关注姐姐好久以后，姐姐终于关注我了
        
        于是乎～看到姐姐发了一篇文章，那就开始吧"
      - 2018年12月13日pass--荧惑姐姐 第二次说话
        "姐姐给抱了，好开心，结果也导致太兴奋
        一起睡觉觉终于摸到了，我好坏"
      - 2018年12月13日pass--荧惑姐姐 第三次说话
        "朗道十卷…仰视高端玩家
        吐舌头欺负我…哭
        我是鬼灵精…那我要姐姐带我飞
        B52丢下你…你敢丢我就敢炸
        写论文，ddl"
      - 2018年12月13日--20161214 瞒一辈子？&姐姐坏室友
      - 2018年12月13日pass--雌二醇 睾酮 含量图
      - 2018年12月13日pass--20161214手机备份
      - 2018年12月13日--20161215
      - 2018年12月13日pass--180手机189邮箱
      - 2018年12月13日--20161216 もう一人になる
      - 2018年12月13日pass--百度账号
      - 2018年12月13日pass--HRT对绝经后妇女冠心病患者血浆前列环素和血栓素水平的影响
      - 2018年12月13日pass--乙炔雌二醇贴剂有可能增加血栓形成的风险
      - 2018年12月13日pass--雌激素补充治疗心血管疾病的研究进展
      - 2018年12月13日--20161217 我有走下去的勇气
      - 2018年12月13日--20161218 买火车票 日语考试
      - 2018年12月13日pass--小狼三国杀
      - 2018年12月13日--20161219 室友&むね？ドキドキ
      - 2018年12月13日--20161220 北京雾霾下的姐姐
      - 2018年12月13日--孔夫子旧书网 付款密码
      - [COMPLETE] 2018年12月13日pass--
    - 20181215
      - 2018年12月15日--20161221 姐姐QQget
      - 2018年12月15日--笔记应用的一些思考？
      - 2018年12月15日pass--华中科技大学全科医生签约服务书
      - 2018年12月15日pass--有哪些我们习以为常，其实似是而非的历史观？
      - 2018年12月15日pass--荧惑 回答感情题
      - 2018年12月15日pass--大部分外国人是不是不吃内脏？为什么？
      - 2018年12月15日pass--いじめられる子
      - 2018年12月15日pass--図々しい人
      - 2018年12月15日--20121222 荧惑是话痨
      - 2018年12月15日pass--2014-2016大学的体育课
        "大一上 行政班级大课
        课堂上交了太极拳，可是我旷过课，而且太极拳动作飘渺，我没有学会。哭
        
        大一下 跆拳道
        本来选了健美，听说是在健身房各种器械健身，但是因为选的人太少了，课没有开，所以最后和跆拳道的和班了。接着就是买服装，买鞋子。
        印象最深的就是
        没什么想法，在课上学到了很多动作，不过现在全忘了。最后考试，考完后还晕倒了。
        
        大二上 瑜伽
        为了和妹妹一样
        
        大二下 啦啦操
        大三后 没有体育课了"
      - 2018年12月15日pass--荧惑姐姐 性激素报告20161216
      - 2018年12月15日--20161223 姐姐干活~妹妹闲聊
      - 2018年12月15日pass--性别焦虑是什么样的体验？ 荧惑
      - 2018年12月15日pass--荧惑 性激素 化验单20160920前
      - 2018年12月15日pass--男性认为自己是女同性恋是怎么样的心理？ 荧惑
    - 20181221
      - 2018年12月21日--20161224 小笨墩是什么？
      - 2018年12月21日pass--扇贝英语 账号
      - 2018年12月21日--20161225 数电考试 独立 孕开始
      - 2018年12月21日pass--新qq
      - 2018年12月21日--20161226
      - 2018年12月21日--20161227 检查
      - 2018年12月21日--抽血 化验 体检 激素 20161227
      - 2018年12月21日--20161228
      - 2018年12月21日pass--做女性的好处
      - 2018年12月21日pass--女性的优势
      - 2018年12月21日--20161229
      - 2018年12月21日--20161230
      - 2018年12月21日--20161231
      - 2018年12月21日--20170101 新的一年 未知中的坚定
      - 2018年12月21日--20170102
      - 2018年12月21日pass--雌雄双低问题
        "睾酮含量迅速下降，性功能下降。心理上，容易出现自我形象紊乱，自备，抑郁，焦虑，恐惧等心理障碍。钙质流失导致骨质疏松。预防方法，运动，补钙和维生素D。肝损伤。服用Androcur200-300mg/d，3到12个月的前列腺癌患者出现了肝毒性报告。血脂代谢异常。具体表现在甘油三酯、总胆固醇、低密度脂蛋白上升，容易导致肥胖，心脑血管疾病。血糖代谢异常，出现胰岛素抵抗，容易引发2型糖尿病。凝血异常。血液呈现高凝态，容易引发血栓、动脉粥样硬化。此外还有，血管内皮受损，血管舒张功能异常。同样可能引发心脑血管疾病。心机细胞异常、肿胀变大、细胞核明显增大，心机纤维排列紊乱、断裂、溶解、收缩成波浪状。下丘脑一氧化氮合酶神经元数目密度下降，停药可逆。(一氧化氮参与下丘脑有关生殖与性行为功能的调控)"
      - 2018年12月21日pass--sf SF轻小说网站
      - 2018年12月21日pass--译作两本 翻译
      - 2018年12月21日--20170103
      - 2018年12月21日--20170104
      - 2018年12月21日pass--E2导致FSH LH低下原因
  - 201904整理
    - 20190401
      - 2019年4月1日--http://hasunoha.jp/
      - 2019年4月1日--20170105
      - 2019年4月1日--20170106 考试的梦
      - 2019年4月1日--弟弟女性化
        "弟弟今年10岁，读小四。
        很喜欢女孩子玩的东西，例如芭比娃娃、彩虹小马、hello Kitty这些。看动画片也是看公主系列的动画片，从来不喜欢变形金刚这一类的热血动画。
        去郊游他带回来的是粉红色的扇子和芭比的镜子，学校活动要cosplay 他cos的是女巫，在学校和女孩子在一起玩，被男孩子欺负了女孩子帮他，组织篮球比赛他更愿意和女孩子一起挥彩带做啦啦队。
        
        去商场要买芭比娃娃的玩具爸妈不给他就不买了，飞机乐高那些是看都不看。 
        从小妈妈带大，非常粘妈妈，睡觉也和妈妈睡，生气了就会像个女孩一样哼哼唧唧也不会打滚撒泼这些。 
        
        爸妈很担心他以后这个样子怎么找媳妇，只能抑制他喜欢女孩子的东西，不给他买不给他玩，可他就悄悄攥钱自己买，藏起来玩。去ktv里面也都是唱女人的歌，他自己用女声唱出来！
        
        我也挺担心，怕他以后是个gay，爸妈比较传统 知道了会打断他的腿的。
        
        他胆子也小，去公园海盗船是不敢玩的，摩天轮也是不敢上的… 甚至商场里面的观光电梯他都是不敢站在最里面的… 听爸爸睡觉打鼾 会把他吓哭，可他都10岁了啊。 
        
        我十岁的时候爸妈因为事业刚起步 都没怎么管我，弟弟比我小12岁，出生的时候家庭环境已经不错了，妈妈就全职带他。
        
        完全感觉他就是个带把的女孩子啊！！
        我想问的是他这样的女性化，能纠正过来吗？如果不能 会影响以后的生活？他现在的现象能反映他的性取向吗？"
      - 2019年4月1日--可怜的群主
        "【workflowy注：两张图。QQ截图，群主吃糖被发现了】"
      - 2019年4月1日--人渣的本愿 クズの本懐
        "【workflowy注：人物关系图】"
      - 2019年4月1日pass--2015版 下学期课表
      - 2019年4月1日--【思考】亲兄妹在做好安全措施的情况下，可以发生性关系吗？
      - 2019年4月1日--20170108 我对不起物理
      - 2019年4月1日--20170109 电动力学考完了
    - 20190402
      - 2019年4月2日--丛中跨性别人群手术诊断证明指南（流程全… - 知乎
        "丛中跨性别人群手术诊断证明指南（流程全指导）2017年1月9日版（同适用希望做心理诊断的跨性别人群） 
        
        本指南初衷是为了给大家去丛中处就诊提供便捷参考信息，使得人生地不熟的朋友如同在自家后花园散步，不会因为某些计划外的因素导致意外发生。将来，有可能推出其他系列参考，奉微薄之力，为跨性别人群提供帮助 
        
        同时，本指南明确反对以拿到手术证明为目的欺骗医生，隐瞒个人情况的行为。医生并不能分辨患者每一句话的真假。所以，这样骗到证明一刀之下后悔终生。
        
         与此之外，任何试图询问本宝宝提问内容及测试内容的，不予回答。本指南仅供参考，指南内涉及价格，就医规则，挂号规则等内容的，请行动前联系医院核实。本宝宝并无经历维持随时更新。我会尽最大努力保持信息有效，可靠，但是如果你不核实就行动，恕我直言，你too young.too naive. 
        
        标准声明：本文仅供参考，作者不做任何形式法律担保，本文版权©所有禁止转载。 
        
         请详细阅读全文。以做万全之策。姐大半夜心血来潮从差不多12点整理到四点多。为了这半夜的四个半小时请看全。 
        
         丛中，国内具有开具易性症诊断证明及手术诊断证明资格的医生之一。和他一样有资格的有上海精神卫生所陆铮，北医三院胡佩诚。 
        南方不详，据广州的姐妹说她是做mmpi，然后三个主治医师会诊开的证明，想方便的可以试试。 
        
         第一，拿手术诊断证明必备材料： 
        
        1.如果是开手术用的证明（盖门诊章的那种），需要你所在公司，学校，社区的介绍信（三中方法均有人通过审核）。格式如下。最稳妥的是公司，因为变性手术相关条例有规定。如果你只是来拿个普通易性症的诊断不涉及手术啊什么的，额，我没试过等候补充。章要清晰，医院会登记上面的单位名称。 
        
        介绍信 
        北京大学第六医院： 
        兹有我公司员工（学校学生）***，身份证号****，前往你处对其个人情况进行诊断，并开具医学书面诊断证明，望贵院协助办理相关手续为盼。
        xx市xx公司（学校）
        xx年xx月xx日 公司（学校）
        盖章
        
         2.身份证，必需品不多说
        
         3.钱。一定现金。刷卡蛮麻烦，万一用黄牛更麻烦。数额等下说 
        
        4.非北京本地的，时间紧的，可能要熬夜排队，季节不同请准备好花露水（暖宝宝），烟（咳，姐和我女神约翰逊斯嘉丽一样抽烟的），手机充电宝，适当的衣物。冬天一定要多穿，门口风大。夏天带薄长袖防蚊虫。 
        
         第二，挂号，挂号费用，诊断费用。
        
        我现场挂过专家挂过特需，支付宝也挂过，据说微信，114，北京挂号平台都可以不过我没用过。
        
        建卡统一10元，北京市病历本5毛 
        两种挂号方式： 
        1.特需号500rmb，包含mmpi费用。就是说一般情况，医生不会主动要求做，你想要做医生也会给做。非一般情况就是如果医生觉得你需要做，也有可能直接让你做。 
        2.专家号14元，咨询费20，第一次看还要收20心理治疗费。做不做mmpi另说，做的话得交钱。没做过所以不清楚价格。 
        
        第三，看病流程，有三种。 
        
        1北京本地的，本方案花费少，省体力 
        推荐周日之前去六院建门诊卡，周一9点以后在支付宝上用就诊卡注册，网上挂周三专家号，周三去看丛大爷。 
        
        2非北京的，不着急的，本方案省心省事儿不熬夜 
        周日之前到北京，至少周日18点之前办好就诊卡。剩下的步骤参见流程1，然后中间的其他时间可以在北京玩玩。住宿地点，土豪可选择星级酒店，打车来医院。普通药娘可选择周边小宾馆，不过一定要提前定房！至少提前打两天打电话给附近宾馆。
        温馨提示，小宾馆没洗澡的。有洗澡的定出去的贼快 
        3非北京的，时间紧到只能待一两天。 
        请在周二或者周三晚12点之前来院门口排队。左侧队列排的是专家号，周二来的周三看病的排左侧，早晨六点左右发号牌。右侧队列排的是特需号，周三来的周四看病的排右侧，没号牌 排队到七点半就开始挂号了 
        温馨提示：要记清前后的人。最好两个人交替排队，半夜可以旁边租个宾馆休息下。一个人的话敲累。 
        排队靠前的很大几率能挂到丛中。不过不做任何保证，有人倒霉到排第七个还没挂上。最稳妥的是排第一个。 
        
        第四，就诊
        
        挂号成功后，支付宝挂号的直接根据挂号提示准时带好病例，就诊卡，少量现金到分诊台刷卡去看丛大爷 排队挂号的，拿到号去分诊台刷卡，然后等候。上午的可以直接等着，下午的可以先出去附近吃吃东西，问好下午几点开始再来。 
        
        叫到号直接进去。丛中一般都有实习医生陪诊。实在不习惯可以和医生说他们可以出去。 
        
        我明确提倡，建议，推崇，问到什么说什的，实话实说，说谎话到最后坑的是自己。本文也一直贯彻诚实就医原则。 
        
        不知道想做男生做女生，就说不知道，喜欢穿女装直说啊，真心不丢人的，现在那么多伪娘呢。说心里话，即便你最后结果不是跨性别，不会觉得你不好。这个身份只是一个普通的属性，不代表任何优势，反而有可能对你的人生造成极大阻碍。一部分人居然在宣扬怎么说过得概率高，我明确表示，任何发表此类言论者，请自行承担法律后果。 
        
        再次声明，也许一个详细的检查，会是你认清自己的机会。切勿随意给自己归类，一旦错误，抱憾终身。不得不说，有些滥用激素药物的人，会对自己造成不可逆转的伤害。一旦后悔无可弥补。 
        
        问了之后，确诊的话，告诉医生你需要诊断证明。带来了介绍信。没确诊易性症的只是喜欢女装的小伪娘/小cd，可以开心的洗洗漱漱回去泡泡妹子穿穿女装了（望在工作，生活，感情，女装之前做好平衡与取舍）。 
        
        重要的注意事项，内有我能想起来所有的预防意外的事项。 
        1.拿到诊断证明后，如果有hrt需要，可以周四试着挂一下隔壁三院整形美容科潘柏林教授的号，他可以开hrt处方。当天会抽血，根据你的血液内激素含量来指导HRT。（检查费不到一千块的样子）不过同样 ，提前挂号。支付宝需要预约转诊。我是拿诊断证明提前一周预约的，或者，当天尽早去现场挂号，有多早你想吧，我没试过不清楚。 
        2有条件的可以开车排队，车放门口，夜里还能进去开个空调睡觉。不过记得别关紧车门小心一氧化碳中毒。 
        3门口有黄牛。价格500块提供排队服务。黄牛头子是门口胖胖的保安队长， 
        4不管本地外地，地铁时间请按百度地图给出的时间加出1个小时。早到了还能吃个饭，晚了就哭唧唧了。外地来的，最好住周边，来一趟很麻烦，错过了很糟心。要是有土豪住市区豪华大酒店了，打车请准备至少两个小时赶路时间。北京的路况向来是，提前两个小时出门，半个小时到了。提前一个小时出门，两个小时都不一定到。 5外地定飞机请考虑天气，雾霾之类的。外地定火车请考虑火车晚点之类的，外地驾车请考虑高速大雾封路，限号之类的。而且限号早晨八点限十点多才解哦。市区规则请百度。 
        6周边有好多吃的，请百度地图 
        7附近贼多。请小心。 
        8排队党。天冷时候请在正常抗寒范围内多带一件大衣。天热穿长袖防晒服防蚊虫。当年我来了三次，那个酸爽。而且有条件可以带个板凳。 
        9倒霉的时候前几个就能吧丛中挂完。请节哀。不过这种就太悲催了，知道一悲催的第七个人都没排上第二天用的黄牛。提醒自己，鲁迅的早字哦(⊙o⊙) 
        10.提前打电话给医院前台，电话请自行百度，问下大夫出诊么，是否有事情无法出诊。这种事儿我赶上过，排了半夜一问丛大爷开会去了不出诊。 
        11注意看门卫处，公告栏张贴的信息。有时候会很有用处 
        
        先这么多，想起来再添加。 
        
        创建于 2017-01-09 禁止转载"
      - 2019年4月2日--20170110
      - 2019年4月2日--好好学习吧，少女
        "用跑偏（走火入魔）的方式去成长，在我看来是赌才华。而赌才华是很愚蠢的。因此如果你遇到了高中政治课本（何况你才上初二），你应该用像看到你的初恋女朋友那样的虔诚态度去对待它。你要对它温柔，要对它好，为它付出时间和精力，直到你吃透了它（就像你终于上了你的女朋友），直到你考了很高的分数，或者用屁股去做政治论述题都能把采分点（不知道什么是采分点的可以洗洗睡了）全都给列出来，比标准答案还更标准，比价值正确更加正确，你才有资格去对马克思主义说三道四。  "
      - 2019年4月2日--20170111 群主家长党 妹妹吃糖
      - 2019年4月2日--20170112 量子力学考完了
      - 2019年4月2日--20170113 近乡情更怯
      - 2019年4月2日--20170113【假期计划】
      - 2019年4月2日--中国科学院研究生院《热力学与统计物理》2011年考研大纲
        "中国科学院研究生院《热力学与统计物理》2011年考研大纲
        　　一、考试内容：
        　　（一）热力学的基本规律：
        　　热平衡定律，物态方程，热力学第一定律，热力学第二定律，热力学第三定律，卡诺定理，克劳修斯等式和不等式，热力学基本方程
        　　（二）均匀物质的热力学性质：
        　　麦氏关系，气体的节流过程和绝热膨胀过程，基本热力学函数的一般表达式，特性函数，热辐射的热力学，磁介质的热力学
        　　（三）单元系的相变：
        　　平衡稳定性条件，开系的热力学基本方程，单元复相系的平衡条件及相图，汽液相变，液滴的形成，相变的分类
        　　（四）多元系的复相平衡和化学平衡：
        　　多元系的热力学基本方程，多元系的复相平衡条件，吉布斯相律，化学平衡条件
        　　（五）近独立粒子的最概然分布：
        　　等概率原理，玻耳兹曼分布，玻色分布，费米分布
        　　（六）玻耳兹曼统计：
        　　热力学量的统计表达式，麦克斯韦速度分布律，能量均分定理，理想气体的热力学性质，固体热容量的爱因斯坦理论，顺磁性固体的热力学性质
        　　（七）玻色统计和费米统计：
        　　热力学量的统计表达式，弱简并理想玻色气体和费米气体，玻色-爱因斯坦凝聚，光子气体，金属中的自由电子气体
        　　（八）系综理论：
        　　刘维尔定理，微正则分布及其热力学公式，正则分布及其热力学公式，巨正则分布及其热力学公式，实际气体的物态方程，固体的热容量
        
        　　二、考试要求：
        　　（一）热力学的基本规律：
        　　1.深入理解并掌握温度，功，熵，焓，自由能，吉布斯函数等概念。
        　　2.深入理解并掌握热平衡定律，热力学第一定律，热力学第二定律，热力学第三定律，卡诺定理，克劳修斯等式和不等式，热力学基本方程。
        　　3.熟练掌握理想气体的热力学性质。
        　　4.了解简单固体和液体，顺磁性固体的物态方程。
        　　（二）均匀物质的热力学性质：
        　　1.深入理解并掌握麦氏关系。
        　　2.熟练掌握气体的节流过程和绝热膨胀过程。
        　　3.理解并掌握基本热力学函数的一般表达式，特性函数。
        　　4.掌握热辐射的热力学，磁介质的热力学。
        　　5.了解获得低温的方法。
        　　(三)单元系的相变:
        　　1.深入理解并掌握平衡稳定性条件，单元复相系的平衡条件。
        　　2.熟练掌握开系的热力学基本方程。
        　　3.理解并掌握汽液相变，液滴的形成，相变的分类。
        　　4.了解临界现象和临界指数。
        　　(四)多元系的复相平衡和化学平衡:
        　　1.理解并掌握多元系的热力学基本方程，多元系的复相平衡条件。
        　　2.掌握混合理想气体的热力学函数及化学平衡。
        　　3.理解并掌握吉布斯相律，化学平衡条件。
        　　4.了解二元系相图。
        　　（五）近独立粒子的最概然分布:
        　　1．深入理解并掌握系统微观运动状态的描述，微观状态数，等概率原理。
        　　2．熟练掌握玻耳兹曼分布，玻色分布，费米分布。
        　　3．理解上述三种分布的关系。
        　　（六）玻耳兹曼统计：
        　　1．深入理解并掌握热力学量的统计表达式，麦克斯韦速度分布律，能量均分定理。
        　　2．熟练掌握理想气体的热力学性质。
        　　3．掌握固体热容量的爱因斯坦理论。
        　　4．了解顺磁性固体的热力学性质，负温度状态。
        　　（七）玻色统计和费米统计：
        　　1．深入理解并掌握热力学量的统计表达式。
        　　2．理解并掌握弱简并理想玻色气体和费米气体的性质。
        　　3．理解玻色-爱因斯坦凝聚，光子气体，金属中的自由电子气体的概念。
        　　(八).系综理论：
        　　1.深入理解并掌握微正则分布，正则分布，巨正则分布及其热力学公式。
        　　2.理解并掌握刘维尔定理。
        　　3.理解实际气体的物态方程，固体的热容量。
        
        　　三、主要参考书目：
        　　汪志诚著，《热力学•统计物理》，高等教育出版社，北京，2003年第三版。"
      - 2019年4月2日--20170114 加油第一天！
      - 2019年4月2日--20170115 姐姐的婚礼
      - 2019年4月2日--20170116 第一天
      - 2019年4月2日--20170117 第二天
      - 2019年4月2日--20170118 第三天
      - 2019年4月2日--20170119 第四天 面姬
      - 2019年4月2日--怎么撩荧惑？
        "怎么撩药娘？
        荧惑 May Gauss be with you.
        刘泠雨、 高鸣野、 周小扬、 陈小橙 等 7 人赞同
        荧惑狐手册
        
        致亲爱的猎人：
        荧惑狐是一种智慧美丽高贵优雅的生物，所以千万不能产生恶意，一定要尽量的讨好。
        如果让狐狸讨厌你就完蛋啦，所以脑子里面不要转坏念头哦，聪明的狐狸很容易发现察觉的。狐狸喜欢暖暖和和的牛肉汤或者羊肉汤，为什么不是猪肉呢，因为猪肉性寒，吃了没有那么暖和。最好每天用瓦瓮炖好腩肉送给狐狸，记得要多放胡椒少放盐。吃完之后狐狸会想要一些水果，这时候你需要做的就是送上新鲜的柑橘类水果，鲜嫩多汁的。
        在你做完这些之后，狐狸大概会比较开心也许会陪你玩一会~
        
        【workflowy整理注：狐狸照片一枚。2019年4月2日】
        
        百条尾巴的大狐狸荧惑（划掉）
        猎人君的挚友
        
        
        
        
        
        
        /诶，我说，真的会有傻乎乎的猎人照着狐狸的建议去捕狐狸吗？
        
        /T_T说好的羊肉汤呢~怎么都想捉咱_(:з」∠)_
        编辑于 昨天 15:06
        
        7  取消关注 23 条评论 感谢 更多 • 作者保留权利"
      - 2019年4月2日--荧惑 孤独叹息
        "monologue lament
        荧惑 May Gauss be with you.
        刘泠雨、 島風、 冬Suzu、 早乙女瑞穂、 Yungstedt、 周小扬、 菜姬不是菜鸡、 论外凤、 鸢鸢、 顿河的静静 等 41 人赞
        我是个跨性别者
        我父母婚姻和美，从小没有受过虐待；大学之前我没住过校，也没被老师欺负过；我智慧过人，成绩优异，反正正常人找不出什么奇奇怪怪低人一等的原因，欲加之罪何患无辞又是另一说了。
        
        总之，我就只是想当个女生而已。
        
        是的，不过而已。
        
        烦的要死。我的室友在宿舍里旁若无人地号喊着他喜欢的女生不喜欢他的时候，我正在苦苦地为性别焦虑而冥思苦想。他的床板在他的床帘背后吱呀作响，我满脑子都是想给自己去势的念头，没办法转移开想法，我曾以为是我还不够聪明，没法管理好自己的思考，后来我才明白，我不可能做到勉强我照着他们的观念来思考问题，哪怕我被斥为变态，哪怕我不被理解，但是总之我不可能永远装着过一辈子。哪怕世界不可能会错，错的只可能是我，那又怎么样呢？去谈一场欺骗双方的恋爱，去生一个叫我爸爸，叫我的爸爸爷爷的孩子？我还真一度哄骗自己能做到呢。
        
        最关键的是，这些话我没法说出口，没有人会乐意想听这些话。就像我不能理解高中时男生们围着女生团团转的那种殷勤，小伙子们也不会理解我每天要花六个小时以上的时间谴责自己为什么不去服药不去做去势然后再花相同的时间劝勉自己那是少数人少数异类的“可耻之途”去他妈的社会达尔文主义。
        
        异性恋真可恶，有伴侣的秀恩爱，没伴侣的还可以秀饥渴。而我只能在想象中不断地折磨自己，连谈场属于青春的恋爱的胆量都没有。去它的下辈子！这真是太不公平啦。喜欢后入式传教士式等等各种不同姿势，喜欢高的胖的瘦的黑的白的邪魅的妖娆的健硕的人们啊，全部统一在了异性恋这面不倒的大旗下，狮心王也好，红胡子也罢，又或圣殿团，甜党咸党全部放下了手里的勺子。大风从东刮向西，从北刮向南，你所说的pervert到底是什么意思。
        
        啊，好希望异性恋们也被不允许谈论那些和性和亲密关系相关的话题啊，如果我们不能相互理解，至少这样我们可以共同抑郁，多一些共同经历有助于相处融洽，不是吗
        
        this is my tiny insane monologue
        
        f**k off the testicle! I'm to shout out.
        
        41 7 条评论 分享 • 举报 • 去往文章页"
      - 2019年4月2日--荧惑 侏儒呓语
        "侏儒呓语
        荧惑 May Gauss be with you.
        4 人赞
        我今天发现，我自己很绿茶。绿透了的那种。
        知乎这个社区，乃是一个笑贫不笑娼，看热闹大过天的社区，为了在这个社区的可爱的群众当中受到认可，我可耻地每句话都小心考量害怕被当成希帕提娅这样的异教徒被挂起来剐死，真是太卑鄙太无耻太绿茶了。
        
        那些真性情的答主们让我惭愧啊，跟爱着的人做的事情，就应该想怎么说就怎么说，光明磊落坦坦荡荡，既成全自己口舌之快，更满足知乎看客猎奇之娱。对吧，人家就喜欢把边缘性行为当做每天的话题，喜欢向这个世界展露真实的自己，我有什么好该去批评的呢，一定是我单身日久，邪毒入脑，见到鸾凤和鸣便起意打杀，嗯对，一定是我人傻脸丑脾气轴，活该享受不到两个人（哦失敬，也许是3+人）杨过与小龙女（也许..还有那只雕）生命的大和谐。
        
        之前我想啊，我在知乎上零零星星写了那么多答案，还不及绮罗一个问题的关注，为什么我会对这些那么介意呢，都是因为我是现实生活中的loser，考不到东大嫉妒别人，也赚不到钱只能抖些机灵混混存在感，但是我想明白了。
        
        要想红，先放料，比如说放张照片，然后告诉大家我多次被邀请参观朝阳区的警察局，然后有一个加强师的男朋友，一个中队的女朋友，哎呀不是真的有什么要紧嘛，大家爱看嘛，等到大家都来关注的时候我不管说什么话，哪怕是说高斯是牛顿和莱布尼兹的私生子，牛顿终身未娶乃是因为旧情未了这样的狗屁玩意又有什么要紧嘛，基数那么大，总会有一两个silly cunt相信我的。
        
        呐，从现在开始吧，先发张照片好了，就算不能成为一个现充，也要言而有信呐。
        
        
        
        喵～(￣▽￣～)~
        
        4 10 条评论 分享 • 举报 • 去往文章页"
      - 2019年4月2日--20170120 第五天
      - 2019年4月2日--发情的妹妹
        "【workflowy注：qq截图】"
      - 2019年4月2日--20170121 第六天
      - 2019年4月2日--kindle 邮箱
        "〖发送至Kindle〗电子邮件  lovelivemadoka@kindle.com  "
    - 20190403上
      - 2019年4月3日--20170122 第七天
      - 2019年4月3日--20170123 第八天
      - 2019年4月3日--20170124 第九天
      - 2019年4月3日pass--日语jlpt n2成绩
      - 2019年4月3日--如何做一个合格的m
        "如何做一个合格的m
        
        01．SM可以是生活的一部分
        很多人是很矛盾的，一方面希望自己能够有所依靠，有所臣服，另一方面又觉得自己这样做很不好，所以会把自己的生活分成两个部分：SM时刻和平常时刻，认为 SM是不正常的，是和所谓的生活矛盾的，内心对SM即渴望又憎恶。我认为SM和“生活” 其实没有任何冲突，SM本身就是生活的一部分。记得小时候读政治书，说人是社会关系的总和。S和M也是一种社会关系，不用把S和M的关系特别化，只需把它当成一种社会关系即可。每种社会关系中由于各自处的角色不同，所需担负的职责也是不一样的。在父母面前，我们需要尽孝道；在老师面前，我们需要尊师道；在公司里，我们要为公司创造价值；在主人面前，我们需要让他感觉快乐，就是这么简单
        02．M拥有更多的人生价值
        一个人活在这个世界上，是需要自身价值来支撑自己的，一个人如果找不到自己生存于世的价值了，实在和行尸走肉没有太大区别。作为一个M，会比大部分人多一个人生价值点，那就是你对S的价值。每每我看到主人对我满意的笑容时，我都会有一种莫以名状的满足感和成就感，感到人生的价值，也许这就是“M的快乐来自于S的快乐。
        03．崇拜自己的主人
        我是很崇拜我的主人的，我觉得他是那么的高贵，那么的睿智，从他身上我学到了很多，思考了很多。在他面前，我觉得只有抬头仰视才是我应有的状态。我一直觉得M应该从内心崇拜自己的主人，而不是仅仅在某些时刻崇拜S，或者在某些形式上做崇拜状。
        04．敬畏自己的主人
        对主人要保持一种敬畏的心情，只有这样，才不会得意忘形，违反主人定下的规则。臣服于主人的鞭子，不仅是有形的鞭子，更是无形的。主人的一个手势，一个眼神，都足以BIAN打我的内心，让我战栗不已，让我忘记世间其它事物，只想匍匐在主人面前，祈求他的宽恕。主人永远是宽容的，在我获得应有的惩戒之后，总是会将颤抖的我拢在怀中，怜惜地抚摸我，现在想想，颇有些“打在我身，痛在他心”感觉。其实，做一个主人是很难的，需要花很多的心血，他需要时时关心M的成长，需要时时克制自己，注意M的反应，不要伤害到M，自家的东西，当然格外爱惜一些。所以作为M，要体谅自己的主人，不要为自己的主人添麻烦，不要让自己的主人为了自家的小狗狗成天在外给人赔不是，碰到事情，事先多请示一下总是不会错的。
        05．惩罚也是一种恩赐
        主人的恩赐有很多种，奖赏固然是恩赐，惩罚又何尝不是。惩罚固然说明主人对M所做的有不满，但至少说明主人还愿意教导M，还对M有着期望。对M来说，最大的惩罚就是主人的不惩罚，不理不睬。记得有一次，我在短时间内同一个错误一犯再犯，我想主人是真的生气了，他一言不发，只是用眼光冷冷地注视着我，我蜷伏在他的面前，低声哀求主人的谅解，他依然沉默不语，那时，只觉得仿佛世界末日已到，看不到希望。后来总算主人开恩，用20皮鞭作为对我的洗礼，饶恕了我，当主人说出对我的惩罚的时刻，我固然害怕，但又何尝不有些欣喜，我知道主人没有抛弃我。我追随主人4年了，4年来，由于我生性怕痛，主人一向对我很爱护，那是唯一一次受罚的20皮鞭。也许对很多同好来说，20皮鞭没有什么，但对我来说，那已经是最厉害的一次了，我希望我这辈子不会再惹主人生那么大的气。
        06．相信你的主人
        我在网上好像总是会看到谈公调的事情，很多M会觉得公调格外的羞辱或者刺激，而我很少有这种感觉，有别的奴和我开玩笑说我脸皮厚。其实我觉得这和脸皮厚不厚没有关系，而是和你对主人的信任程度有很关。如果你相信你主人的为人，相信你的主人会保护好你，那有什么好怕的呢？无论是在公共场所还是独处密室，你都在主人的身边，都在他的羽翼之下，难道这还不够安全吗？还有比这更安全的地方吗？相信你的主人，相信他不会让你身处险境，相信他所做的一切都是对你有益的，相信他其实比你更了解你自己。
        07．不要辩解
        我现在很少在受惩罚的时候，大声地说出自己错误的原因了。在最早被调教的时候，我的主人是这样要求我的。确实通过这种形式，可以让自己了解自己的地位和错误，让自己好好反省。主人要惩罚M的时候，很多M会辩解，须知辩解本身就是错，不是你不够坦白而使你的主人先前受到蒙蔽，就是你不相信你主人的判断力，这哪样不是错？不要辩解，主人要惩罚你，必然是你让主人不开心了。做M要让主人快乐，你让主人生气了，不快乐了，这就已经是天大的错了，还需要辩解什么吗？无论你是为什么这么做，做了什么，只要让主人生气了，就只存在错大错小的问题，而无所谓有没有错了。错了还要问主人错在哪里，那就走得更远了，简直是朽木不可雕也。如果不知道让主人生气的原因，做M的可以祈求主人的指点，但切勿把这个当成是主人的义务。主人的指点那是他的恩赐，做M的应该多用心真正理解主人平时的教导，举一反三，触类旁通，这样就不至于连错在哪里都不知道了。
        08．自律
        能不能自觉遵循主人的旨意做事，其实和主人在不在身边没有什么关系，就看主人是不是在M的心里。
        09．SM和性
        如果说SM和XING没有关系，估计没有人会相信。确实，如果在SM中缺乏了性的因素，会让SM逊色不少。食色性也。性是人类最原始的一种本能，当你能控制一个人的性，抑或是你的性被人控制，这是一种特别的经历。在调教中，主人往往会把我驱向巅峰，在我即将到达的时候，把我打落回地，然后又驱动我向巅峰爬去…… 周而复始，循环往复，这是一种特别的体验，让人痛苦而沉迷。而主人此时欣赏着我迷离的眼神，泛红的脸庞和无助的呻吟，那个时候必然格外的性感。
        10．等待
        主人经常会吓唬我说：如果他喜欢上别的M，不喜欢我了，我会怎么办？我想，我会静静地缩在角落里，等待主人的垂怜。主人不喜欢我了，必然是我有做的不好的地方，我应当面壁思过，好好的反省，同时祈望主人的眷顾，但我不会去打扰我的主人，破坏他的兴致，毕竟主人的快乐才是最重要的。当然我也相信我的主人，不会随便地抛弃我，他一定会给我机会的。
        11．心灵的皈依
        也许在SM中，我感受最多的不是兴奋，而是平静，那种回归自我的平静，那种坦诚的平静，可以什么也不用想，放下“我”，释放“我”，无须掩饰和压抑自己的感受，真好。
        12．眉目传情
        我平时说话很喜欢盯着别人的眼睛，特别在说一些重要内容的时候，我觉得这样可以吸引对方注意，并且表明我说话的真诚。唯一我不敢随便注视眼睛的人也许就是主人了，在主人的面前，我多多少少有些自惭形秽，不敢平视说话。在主人面前，更多的时候我低眉顺眼说话的姿态比较多，不过每次我都会忍不住偷偷抬眼看一下主人，看看主人是否开心。主人说我这种眼神挺让人心动的，不知道当初是不是因为这个而让主人心动收留了我。
        13．用心去侍奉
        我优点不多，嘴也比较笨，不太会说些讨人喜欢的话，特别是在需要说这种话的时候，往往显得特别笨拙，找不到话。不过有一点，主人还是经常会夸我一下，就是说我比较会看眼色。我觉得这个不是很难，首先，要把注意力放在主人身上，如果注意力不集中，怎么聪明都是没有用的。其次，要按主人的思维去思考，不要总是我觉得怎样怎样，多想想主人会觉得怎样，自然慢慢就会和主人有默契。第三，要善于总结，第一次我往往是反应不过来的，但是如果主人重复两次或三次做同一个动作，总归还是要长些记性的，而且要学会举一反三，否则主人会被M给累死的。主人教个规矩，不仅仅要从形式上学习，而且要努力去思考，主人为什么要我这样做，还有哪些类似的事情我要注意了，通过这种形式我能给主人带来什么，还有哪些做法也可以给主人带来同样的快乐。我想这种问题多想想，自然也就容易和主人形成默契了。
        14．M的位置
        做M其实不难，关键是找到自己的位置。M的位置在哪里，我觉得是在主人的足前。当我跪在主人的面前时，当我被主人抚摸时，我感到了心灵的平静。我是幸运的，因为我找到了一个让我停靠的港湾，当我找到港湾的时候，一定要珍惜，要去爱护，这个港湾才会长久。
        15．M的思维
        记得4年前的一天，当时主人在国外，难得一天清晨，我们在一个聊天室里聊天，开始一直很融洽，后来主人问了我一个问题，我当时在明知道主人意图的情况下，没有给主人一个明确的答复，让主人很是不开心。主人下线了，把我晾在那里。当时我突然有一种莫名的惶恐和难受，无助的泪水划过我的脸庞。主人经常问我，你怎么不会哭呢？是啊，在主人身边我几乎从来没有哭过，因为在主人身边，永远是有力量在支撑我的，但那次我哭了，我懊悔自己的愚蠢，羞愧自己的无用。主人远在大陆的另一侧，自己居然还要惹主人不开心。后来主人对我小施惩戒之后饶恕了我，我还算是幸运的。从那以后，我想我以M的身份在主人面前时，都会努力按主人的思维方式去考虑主人的期望，而不会再把世俗的一些规则放在心上了。
        16．奴性
        奴性这种东西是先天形成还是后天形成，说句实在话，我也不清楚，不过有一点我是可以肯定的，小的时候，在我还不知道SM的时候，我就有过类似的幻想，幻想中的行为现在看来就颇有些SM的因素在里面。直到有一天在书店里看到李银河的书，我才知道我这种想法不是唯一的。后来，我开始在各大BBS里面闲逛，慢慢地，对自己的了解越来越深，释放自己的愿望也就越来越强烈。在遇到主人之后，我才真正地了解了自己。主人给了我一个机会来释放自己，不用掩饰，尽情放纵自己内心的卑微，真好。"
      - 2019年4月3日--20170125 第十天
      - 2019年4月3日--20170126 小旅游
      - 2019年4月3日--女同啪啪经验？ 荧惑
        "女同，没什么啪啪啪经验，跟喜欢的妹子一起爱爱的时候总会弄疼她，性不大和谐，求女同啪啪大法（捂脸）？修改
        她是P，我H偏P，互相很喜欢。她的前任是很T的那种，床上活儿好，对比一下，我没什么经验（捂脸），只大学时跟初恋睡过，没有插入，彼此都爱惜对方。楼主喜欢肌肤相亲，在一起接吻就觉得很甜很有感觉，没有接吻下一步有点进行不下去，她不喜欢接吻，吻技有待提高（慢慢调教）明明她下面湿得非常厉害，但我却不知道怎么让她舒服，每次一摸小豆豆她就娇喘得很厉害，一插入她又比较怕疼，做过几次都不顺利，没什么技巧，都快不敢跟她做了，怕她失望。沟通过，她说我太纯洁了，需要慢慢调教，感觉对自己挺失望的，求啪啪大法（捂脸哭）修改
        
        荧惑 May Gauss be with you.
        周小扬、 白芷 等 6 人赞同
        神烦…俺只是个mtf…
        干嘛邀俺…还邀两次…
        我强答还不行吗？
        
        第一步：列未知数和方程，哦不，是明确你俩的关系——并不是恋爱关系，也不是攻受关系，床帷间瞬息万变，你需要认识到你们俩是谁在掌控节奏，是谁在发出要求（邀请）而谁来被动满足，相比于异性恋粗劣的进程——从**硬开始，**抽搐为中场，不应期为退场——les具有更多可变化的细节，把握对方的细微信号（而不是感受那根东西的软硬）是保证两个人能够踏好舞步的前提。默契的性爱应该像搭配有素的桥牌大师一样，能够读懂对面的每一个小细节，并做出漂亮的回应。
        
        在对两人的性爱关系中各自偏好一种什么样的角色有所认识之后（这个角色并不是固定的！只是一个基础框架！）接下来要考虑的就是如何处理不坚强的将牌进行飞张，不是，是如何使的信号沟通更为稳定，以及使你的表达更具有韵味。
        
        稍有品味的人都会认同半遮半掩的姑娘比标本般的全裸展露更诱人。这是由于海森堡不确定性原理，哦不，因为这样的状态是不确定的。你的伴侣也许是在对你的单调的吻感到单调。试着进行一些不一样的（富有新鲜感的）行为来为你们的生活带去一些sparkle，带有稍许舔舐的亲吻嘴唇之外的部位，比如后颈，肩膀，耳朵，或者，还有乳头？又或是更长情敏感的抚摸——你只有一根舌头却有十根手指。
        
        这个世界上总有一帮蠢人以为一味进攻才是谈恋爱，实则没有只进不退的舞步，让渡主动权——桥牌，哦不，les中的攻守变换也是存在的。我想想——躲开怀抱绕到背后抱住双臂对着耳朵吹气~亲吻时故意把脖子后移却把胸口顶上去迎上对方的身体…被邀请的感觉和被要求的感觉是不一样的，从性是心理以及生理的交流来看，能够挑动起伴侣的情绪是最重要的。
        
        因而，以上所说都不过是术而已，道是去了解感受，尊重认同伴侣的心思，以上行为如果是胡乱炮制任性施为最终导致伴侣觉得你做作的话…还是be…（不要做和形象差距太大的事情，偶尔有点范围内的变化是反差萌，逾距了则是颠覆形象）虽然我知道道理这么说很简单，如果理解不了掌握不到位多半还是难以让伴侣满意。如果对此有所顾虑请大方地去问伴侣她想要怎么样，她开口说的总不会有错~让她主导也蛮好~
        
        …心疼自己，大晚上失眠写这种答案…关键我还是virgin…全靠本狐狸天才的脑袋想象出来的啊~
        还是心疼…
        6 发布于 02:11 13 条评论 感谢 更多
         • 作者保留权利"
      - 2019年4月3日--2017 春节红包
      - 2019年4月3日pass--自宫 切蛋
        "【workflowy注：截图教程】"
      - 2019年4月3日pass--月生活费只有500的大学女生如何学习化妆？
      - 2019年4月3日--20170127 除夕
      - 2019年4月3日--20170128 初一
      - 2019年4月3日pass--初中学生手册 老师评语
        "【workflowy注：照片】"
      - 2019年4月3日--20170129 初二 武功山
    - 20190403下
      - 2019年4月3日--20170130 初三 明月山
      - 2019年4月3日--20170131 初四 龙虎山
      - 2019年4月3日--20170201 初五 お帰り
      - 2019年4月3日pass--妈妈滴滴出行 密码
      - 2019年4月3日--20170202 初六 送爱姨
      - 2019年4月3日--20170203 倒数第九天
      - 2019年4月3日--20170127 姐姐？
      - 2019年4月3日--荧惑-弹剑作歌
        "弹剑作歌
        
        同龄的小伙伴在听着周杰伦的龙拳哼哼哈嘿的时候，我一点都不喜欢周杰伦的歌，那时的理由也很简单——我就是不想听男声，反正少我一个听众也不会影响他的地位，那就随他去吧。
        中二之年，对于国语歌曲更是严苛，饱受诗经楚辞熏陶的我根本看不上那些所谓的文艺填词。所以对王菲也是毫无感觉，每次在车上碟里面放到她的歌就想切掉…反正哪怕到现在听的华语歌手都很少啊，不过三四而已。
        那时候慢慢找了很多歌来听，很多现在都还躺在硬盘里，初音未来时至今日好像也快十年了？第一次听安室奈美惠是犬夜叉的片尾曲Come，顶顶喜欢的曲子，同样地记住了滨崎步的dearest。后来就在我妈的办公室里面挂着耳机一遍遍听，午休，晚自习。性格被压抑的人也许会更喜欢听音乐让心情舒展开来吧。
        歌白鸠，引拂舞，铿鸣钟，考朗鼓。
        回家过年发现笔记本无线网卡罢工，于是翻捡出那些以前下载的歌曲来听，往事当真如潮水般涌上心头。滨崎步后面嗓子再毁又如何，我还是记住当年耳边响过的字字句句。听的是歌，也是心情。响的是弦，也是琴心。
        /喵的快点写个结尾起床吃饭去，饿啦…"
      - 2019年4月3日--荧惑-(所谓天赋党的开始？——编者加)
        "妈妈说，外婆年轻时很漂亮，追的人能排一条街。
        我问：那你呢？
        ：我不漂亮，只是一般
        （我默默看了一眼镜子…一代不如一代咯~）
        
        老爸是个大笨蛋大笨蛋
        我以前以为他只是在家不会说话…
        昨天才知道他在外面也是个ky…
        我问我妈：欸，你当初哪根弦搭错喜欢上他了
        ：我也不知道（甜蜜而虐狗的笑容）
        所有大男孩都是大笨蛋！
        
        昨天终于出门有所运动
        虽然风吹得脸有点凉，但是回家躺在被窝里感觉身上暖融融绵乎乎的…开心真是好啊，明天天气好的话也要出门走走。
        
        突然感觉自己还是蛮好看的。
        20170203
        
        
        真开心啊
        荧惑 May Gauss be with you.
        1 人赞
        今天同学聚会，一个同学来的时候表示把我当成女生，一个同学在走的时候说我侧影像他们班的一个女同学。
        哇咔咔~
        无知吧，颤抖吧，臣服吧~
        20170202"
      - 2019年4月3日--20170204 倒数第八天
      - 2019年4月3日--20170205 倒数第七天
      - 2019年4月3日--20170206 倒数第六天
      - 2019年4月3日--20170207 面姬しっぱい
      - 2019年4月3日--20170208 倒数第四天
      - 2019年4月3日--20170209 倒数第三天
    - 20190405上
      - 2019年4月5日--20170210 倒数第二天 爸爸工作要变换？
      - 2019年4月5日pass--12306火车票购票
      - 2019年4月5日--20170211 倒数第一天
      - 2019年4月5日--20170212 开学 上学期账单
      - 2019年4月5日pass--武汉换乘 地铁 转车
      - 2019年4月5日pass--课表 2017 大三下 加日语
      - 2019年4月5日pass--日语n2准考证2016
      - 2019年4月5日pass--物理生物学导论
      - 2019年4月5日--20170213 开学第一天
      - 2019年4月5日--20170214 情人节？化验
      - 2019年4月5日pass--抽血 化验 体检 激素20170214
      - 2019年4月5日--20170215
      - 2019年4月5日pass--工商银行
      - 2019年4月5日--20170216 传单ドキドキ 人坏了
      - 2019年4月5日pass--总加权排名(包括大二下考试)
      - 2019年4月5日pass--总加权排名(包括大三上考试)
    - 20190405下
      - 2019年4月5日--20170217 崩坏继续
      - 2019年4月5日--PDF页面拼接工具  合并
        "您好： 
        感谢您购买 PDF页面拼接工具 
        
        您的支付宝交易号:2017021821001004440280010957 
        您的机器码是:PagesMerger_SJ249C03TWD-WX71A74CPP3S|D$WD-WX71A74CPP3S|B$1ZSJ249C03T 
        对应的注册码是 
        
        FzgjbCqtAeMOe7jj/sMhKHCgSYfapiK+90fOfspjXLkjHdn1SVKAEm9FziHHZPS2k40Gs13cukMXTy8au4JzrEBHbwCWm4RPjoeI0QpJjIlEcYVQ0N6EQR75dmrBoqzmXGWV0dJItVLIg9JKYJUREegxGHhJwnsJEnXMexP2ZRM=
        复制时候请不要带空格，请保存好您的注册码，有任何问题请与我们联系，欢迎您的下次光临。3 
        
        PDFdo.com 
        用户支持: support@pdfdo.com 网站: http://www.pdfdo.com/"
      - 2019年4月5日--20170218 日语课 我好累 喵喵帮我买抱枕~好开心
      - 2019年4月5日--20170219 勤工俭学培训课 身残志坚学不辍
      - 2019年4月5日--20170220 黑夜起行事业忙 激光渐艰待趋前 喉热徐舒缓
      - 2019年4月5日--日汉互译 第一次作业
      - 2019年4月5日pass--精密测量物理
      - 2019年4月5日pass--ll4.0
      - 2019年4月5日--20170221 传单告罄起床迟 风雨洗尘守车行 lovelive更新重回坑
      - 2019年4月5日pass--热力学统计 网站 密码
      - 2019年4月5日pass--基层岗位面试
        "【workflowy注：知乎摘抄】"
      - 2019年4月5日--20170222 早起贪黑发传单 任劳任怨守单车 睡眠不足
      - 2019年4月5日--20170223 停药！慵懒传单作捆发 积储父上雷霆起 抱枕寄达犹不喜 出柜母上
      - 2019年4月5日--いのち
        "NT402
        ST202"
      - 2019年4月5日--妹妹
        "18983736050  "
    - 20190406
      - 2019年4月6日--20170224 千里及宅速至此 语出千言鬼狼嚎 天翻地覆 妹妹电及问询 稍喜
      - 2019年4月6日--20170225 无头乱寻医生睹 步履艰难无盼头 生不如死：父母状态写映
      - 2019年4月6日--20170226 行路迟迟几欲倒
      - 2019年4月6日--20170227忽言语归宅治病
      - 2019年4月6日--20170228病栋轩昂诊室堂 三番言语无济事 心复忧伤
      - 2019年4月6日--日语翻译 第二次作业
      - 2019年4月6日--地铁 光谷 华科 出口 F
      - 2019年4月6日--20170301 希冀渐失床不起 授课昏迷几欲倒 入夜始有公选课 徐舒
      - 2019年4月6日--20170302 勉强起床精神好 学力不够深忧虑
      - 2019年4月6日--201702开学二月份账单
      - 2019年4月6日--自己紹介文
      - 2019年4月6日--初中0820 花名册
      - 2019年4月6日--20170303 害于学者暂相忘 复反正轨
      - 2019年4月6日--20170304 日语粗简心难在 昼寝交臂母电讯 食日食 野行游 抱抱
      - 2019年4月6日--20170305 晨起食毕喻家山 回返降及欲抱抱
    - 20190421
      - 2019年4月21日--第三次作业
      - 2019年4月21日--20170306 复回家 日文绩单取又放 不见车辆空悲切
      - 2019年4月21日--20170307 老教授信口雌黄 退缩无路父母迫 无解
      - 2019年4月21日--20170308 速整顿学习入正轨 固体激光双语心理经济解剖全发力
      - 2019年4月21日--深柜的金融mtf 知乎
      - 2019年4月21日--20170309 精确测量考试几何
      - 2019年4月21日--私の友だち
      - 2019年4月21日--20170310 泡面入手生意起？试看
      - 2019年4月21日--生吃蔬菜
        "胡萝卜、白萝卜、水萝卜、番茄、黄瓜、柿子椒、大白菜心、紫包菜等。  "
      - 2019年4月21日--20170311 激光固体两头山 蔬菜嗜食吃到吐
    - 20190422
      "2019年4月22日--第四次作业
      2019年4月22日--明代庙堂碑文
      2019年4月22日--细胞的物理生物学 第一章 生物学定量模型
      2019年4月22日--20170312 午前颓废午后奋发 夜守单车喵喵喵
      2019年4月22日--20170313 解释宏典系提纲
      2019年4月22日--生物物理学第一章总结
      2019年4月22日--细胞的物理生物学 第二章 细胞和生物体的空间尺度和构造方案
      2019年4月22日--20170314 府君苦口婆心
      2019年4月22日--细胞的物理生物学 第三章 生命系统的时间尺度。
      2019年4月22日--20170316 金こうにゅう1"
    - 20190423
      - 2019年4月23日--精密物理测量 时钟误差
      - 2019年4月23日--20170317 ききん15まい日
      - 2019年4月23日--细胞的物理生物学 第四章 模式系统
      - 2019年4月23日--20110621 暑假
      - 2019年4月23日--曹公梓良记
      - 2019年4月23日--20140903
      - 2019年4月23日--20140904
      - 2019年4月23日--20140902
      - 2019年4月23日--20140901
  - 201905整理
    - 20190503上
      - 2019年5月3日--20140608-20140819
      - 2019年5月3日--20140820
      - 2019年5月3日--20140821
      - 2019年5月3日--20140822
      - 2019年5月3日--20140823
      - 2019年5月3日--20140824
      - 2019年5月3日--20140825
      - 2019年5月3日--20140827
      - 2019年5月3日--20140828
      - 2019年5月3日--20140829
      - 2019年5月3日--20140830  
      - 2019年5月3日--20140826  
      - 2019年5月3日--20140905
      - 2019年5月3日--20140906
      - 2019年5月3日--20140907
      - 2019年5月3日--20140908
      - 2019年5月3日--20140909
      - 2019年5月3日--20140910
      - 2019年5月3日--20140911
      - 2019年5月3日--20140912
    - 20190503下
      - 2019年5月3日--20140914
      - 2019年5月3日--20140917
      - 2019年5月3日--20140919
      - 2019年5月3日--20140920
      - 2019年5月3日--20140921
      - 2019年5月3日--20140930
      - 2019年5月3日--20140929
      - 2019年5月3日--甜甜100问
      - 2019年5月3日--1116班节
      - 2019年5月3日--20150101永逝的2014（14年全年回忆）
    - 20190519上
      - 2019年5月19日--20150113平常心—给甜甜的话
      - 2019年5月19日--20150113司马迁和史记—给甜甜的话
      - 2019年5月19日--20150228武汉昆明火车
      - 2019年5月19日--苏轼逗比
      - 2019年5月19日--20150809【ANN】恋爱1周年~
      - 2019年5月19日--20170318 tj生日 整理QQ空间
      - 2019年5月19日--细胞的物理生物学第五章 活细胞中的力学和化学平衡
      - 2019年5月19日--细胞的物理生物学 第六章 统计力学基础与简单应用
      - 2019年5月19日--20170320 ふたたびはじまり
      - 2019年5月19日--细胞的物理生态学 第七章 二态系统
    - 20190519下
      - 2019年5月19日--第五次日语翻译
      - 2019年5月19日--20170321 刈草尽日身疲惫 雨落单车棚 ニセコエ
      - 2019年5月19日--20170322 雨日无事东图坐 旧书精华满背囊
      - 2019年5月19日--细胞的物理生物学 第八章 无规行走和高分子结构
      - 2019年5月19日--细胞的物理生物学 第九章 盐溶液的静电学
      - 2019年5月19日--细胞的物理生物学 第十章 弹性梁理论及其生物学应用
      - 2019年5月19日--细胞的物理生物学 第十一章 生物膜的弹性
      - 2019年5月19日--明王道2017年考研日语翻译答案
      - 2019年5月19日--20170323 扫落叶午前于草丛 午后于道路
      - 2019年5月19日--20170324 雨起学习图书馆 双语推进
  - 201906整理
    - 20190607上
      - 2019年6月7日-20170325 散步旧书店 王羽生病
      - 2019年6月7日-改变你世界观的书 网友推荐
      - 2019年6月7日-20170326 妈妈来武汉 再一次
      - 2019年6月7日-20170327 第一次工资单 妈妈 呜呜 自私的我
      - 2019年6月7日-什么时候能看懂这段话？
        "William of Ockham的所谓奥卡姆剃刀最早提出的时候是经院哲学中关于实体，共相和殊相的探讨中出现的。要剔除的是针对于共相的普遍实体的探讨(包括关联立场的普遍实体和共相实体)。
        在当代分哲中语哲和科哲也确实引用过来当过例示，并且重新发掘过。
        
        但是很多人对于这个理解更多类似于朴素版的施雷德-弗雷谢特的“O-R简单性”进路，或者说科学理论的简单性话题。这一路数包括J. W. MCALLISTER(比如《美与科学革命》里面的几个概念广为人知)，莫拉夫希克和Mach等人。核心点是科学呈现的是何种简单性，并且这种简单性由何种逻辑结构构成并具备解释效力。
        
        还有人理解类似于带朴素波普尔证伪主义情节的朴素的最佳解释推理理论(IBE).但是利普顿的重点是可扩展性(ampliative)和溯因推理。"
      - 2019年6月7日-20170328 午后昏睡 傍晚车票 ゆめ
      - 2019年6月7日-计算机科班
        "我觉得一个计算机科班出身的，牛逼的程序员，最最基本的应该要具备：
        
        数据结构与算法部分：《算法导论》
        
        计算机系统部分：《CSAPP》、《计算机体系结构量化研究方法（去华为什么的可能会用的上）》、《现代操作系统》、《深入理解Linux内核》、《分布式系统》、《数据库系统概念》
        
        计算机网络部分：Linux和网络编程，《计算机网络部分》、《TCP/IP协议》
        
        还有编译原理等等具体方向上的知识
        
        这些东西，你从大一开始一天高三的学习强度，3年都不一定学得通，学得精。就算法导论这本书中所有的习题+源代码，够你钻研一年多了。"
      - 2019年6月7日-20170329 时不我待 及时难寻
      - 2019年6月7日-20170330 作业茫茫 股市跌四天
      - 2019年6月7日-4月番
      - 2019年6月7日-钱钟书 谈艺录 一段 知乎
        "余雅喜谈艺，与并世才彦之有同好者，稍得上下其议论。二十八年（1939）夏，自滇归沪渎小住。友人冒景璠，吾觉言诗有癖者也，督余撰诗话。曰：”咳唾随风抛掷可惜也。‘余颇技痒
        
        我平素喜欢讨论艺术，和同时期的才子们有共同爱好，稍稍能和他们探讨一番。民国28年（1939）夏，我从云南回到浙江吴淞江一带小住。我的朋友冒景璠，他讨论诗歌有瘾，同时也督促我撰写诗话。他说：“随口之谈，化作风飘散真是可惜了。”我听了也很想写下来。"
    - 20190607中
      - 2019年6月7日-20170331 呜呜
      - 2019年6月7日-201703 账单
      - 2019年6月7日-20170401 帰り
      - 2019年6月7日-20170402 うち1
      - 2019年6月7日-20170403 うち2
      - 2019年6月7日-看书
        "中国通史教程 齐
        我与地坛
        妞妞 周国平
        悟空传
        平凡的世界
        站在两个世界的边缘
        苏菲的世界
        人类简史
        
        經濟學的思維方式 美國 保羅..."
      - 2019年6月7日-20170404 手被切了
      - 2019年6月7日-20170405 放弃生物物理提纲
      - 2019年6月7日-20170406 换寝摸底会议
      - 2019年6月7日-忘れられないこと
      - 2019年6月7日-20170407 风扇？
    - 20190607下
      - 2019年6月7日-亮劍 悲劇
        "大概是要看書才能明白吧。
        
        《亮剑》绝不是一部抗战神剧，而是一出远远没有写完的悲剧神作，其思想的深刻性，其深厚的历史积淀，绝不是一般的电视剧所能比拟的。
        
        哪怕是电视剧中，这部电视剧在剧末甚至点出了文革这样的绝对领域，我实在不明白抗日神剧是怎么得出结论的，到了剧中22集过后，这样的点简直太多，几乎每一集都是在暗示什么，在说些什么，可惜许多人没有看懂，包括这个问题下的许多人。"
      - 2019年6月7日-20170408 以毒攻毒
      - 2019年6月7日-20170409 安静的餐厅，解忧杂货店
      - 2019年6月7日-三本实用心理学书籍
        "1、 讲意志力、自律最实用的书：《自控力》（凯利·麦格尼格尔）。这是本畅销书，虽然篇幅有所注水，但核心精华都来自最前沿的心理实验，对指导自控非常有帮助，这本书翻了至少3遍，还在Kindle上购买了英文原版，并为此写了1万余字的学习笔记，对全书做了精炼和概括，每每读来收获颇多。
        【注：笔记万余字太长，为确保篇幅无法粘贴分享，有兴趣可私信。】
        
        2、讲人性最透彻的书：《理解人性》（阿尔弗雷德·阿德勒）。这本书我从2011年读到现在仍爱不释手，甚至忍痛花了好几十美刀买了Kindle英文原版对照阅读，期间写了5篇学习笔记（下图），并在6年的实际生活中对照、实践、检验书本理论，又完成一篇实践心得，总共5篇笔记，分别是心灵篇，性格篇，经典情绪篇，经典性格特征篇，以及性格分析实践篇。
        【注：同上。】
        3、人际交往及心理操纵最有效的指导手册：《影响力》（罗伯特·西奥迪尼）。"
      - 2019年6月7日-20170410 大满足
      - 2019年6月7日-第六次 翻译
      - 2019年6月7日-2015华中科技大学考研大纲《固体物理》
      - 2019年6月7日-20170411 xodo最高
      - 2019年6月7日-体测成绩
      - 20170412 おとうさんまた来た
  - 201907整理
    - 0721-0
      - 2019年7月21日-20170414 腰酸背疼
      - 2019年7月21日-世界女权运动发展的两个阶段以及我国现状
      - 2019年7月21日-专业导航
        "引力中心（大擴招中）200人-1500人以上。基礎常數 精密測量 國家需求（重力場問題） 星載加速度計 1000/月+1w
        量子光學（三個團隊）
        超快光學（ 強場超快光學 微納光學）
        粒子與天體物理研究所（天體物理 粒子物理學）
        材料物理研究所 光學 化學
        凝聚態物理研究所 付英雙 （理論 實驗 計算）
        生物物理研究所 肖奕 （實驗 計算）
        國家脈衝强磁場中心
        聚變與等離子體...（磁場約束熱核反應）
        中科院物理與數學研究院（廣告紙）
        光電國家實驗室
        应用电子工程实验室。電磁...加速器（基於超導回旋加速器的質子治療研發平臺）"
      - 2019年7月21日-养老型上班 つぎ？
      - 2019年7月21日-hustggg2015年博士研究生招生简章
      - 2019年7月21日-hustggg2015年硕士研究生招生简章
      - 2019年7月21日-hustggg涂良成教授团队招聘博士后
      - 2019年7月21日-hustggg精密重力测量科学中心组织结构图
      - 2019年7月21日-hustggg推免本科生招生
      - 2019年7月21日-hustggg航空重力测量（MEMS）
      - 2019年7月21日-hustggg卫星重力测量
      - 2019年7月21日-2016年学术论文（生物）
      - 2019年7月21日-2017年物理学院组会信息汇总
      - 2019年7月21日-hust生物物理研究所黄胜友组招聘博士后
      - 2019年7月21日-华中科技大学电气学院应用电磁工程研究所2015招聘博士后
    - 0721-1
      - 2019年7月21日-应用电磁工程研究所
      - 2019年7月21日-吴颖个人简介
      - 2019年7月21日-姚凯伦
      - 2019年7月21日-地球物理研究所许厚泽
      - 2019年7月21日-生物物理研究所
      - 2019年7月21日-hust各个所人员
      - 2019年7月21日-20170415 专业介绍大会
      - 2019年7月21日-20170416 一千米取消！
      - 2019年7月21日-20170418 玩物丧志 任务难成
      - 2019年7月21日-anki账号
      - 2019年7月21日-圈子账本 账号
      - 2019年7月21日-20170419 勉而为之，无不成
      - 2019年7月21日-横向课题，纵向课題
      - 2019年7月21日-如何选择导师（根据自己在华科的所见所闻总结的）
      - 2019年7月21日-上届学生的大四上 课表
    - 0721-2
      - 2019年7月21日-20170420 固体物理危机！
      - 2019年7月21日-20170421 热统大危机！
      - 2019年7月21日-20170422 妈妈来了
      - 2019年7月21日-20170423 想妈妈
      - 2019年7月21日-20170424 实验打乱一切
      - 2019年7月21日-喵喵 二爷 本性大发
      - 2019年7月21日-20170425 喵喵 日语论文
      - 2019年7月21日-20170426 けんさ
      - 2019年7月21日-抽血 化验 激素 肝功能
      - 2019年7月21日-20170427 毕设生产开始？
      - 2019年7月21日-20170428 多站少坐 番茄工作法
      - 2019年7月21日-201704 账单
      - 2019年7月21日-20170429 喵喵又不理我了
      - 2019年7月21日-支付宝 淘宝
    - 0721-3
      - 2019年7月21日-20170501 久晴之雨 妹妹
      - 2019年7月21日-20170502 久违的拥抱~
      - 2019年7月21日-20170503 激光原理复习完成！
      - 2019年7月21日-20170504 试试14年的手机
      - 2019年7月21日-2016年学术论文（量子）
      - 2019年7月21日-2016年学术论文（引力）
      - 2019年7月21日-2016年学术论文（粒子）
      - 2019年7月21日-粒子与天体实验室参观
      - 2019年7月21日-粒子与天体物理 听讲
      - 2019年7月21日-20170505 论文选题1
      - 2019年7月21日-生物物理 宣传栏
      - 2019年7月21日-日语翻译课件1-4 5-8
      - 2019年7月21日-电气学院
      - 2019年7月21日-20170506 激光原理结束，可是
      - 2019年7月21日-20170507 论文选题
  - 201912整理
    - 1230
      - 2019年12月30日- 20170508 实验搞坏6个探针 おんなのこじゃない
      - 2019年12月30日- 舒曼共振 百度百科
      - 2019年12月30日- 20170509 毕业设计スタート！
      - 2019年12月30日- 全部毕设题目
      - 2019年12月30日- 加速器 教授
      - 2019年12月30日- 20170510 终于跑步，几近完蛋
      - 2019年12月30日- 20170511 晚上不能待寝室！
      - 2019年12月30日- 毕设名词解释
      - 2019年12月30日- 物理学院全部老师联系方式
      - 2019年12月30日- 大学 应物1401 花名册
        "U201410165 鄂思宇
        U201410167 王龙飞
        U201410171 徐彪
        U201410174 赵志龙
        U201410175 司运达
        U201410176 李莞聪
        U201410180 何俊毅
        U201410181 刘黎望
        U201410182 蔡旭锋
        U201410183 童泽昊
        U201410184 凌子恒
        U201410185 刘武
        U201410186 赵润晓
        U201410187 王羽霄
        U201410188 彭可为
        U201410189 余乐洋
        U201410190 周翔基
        U201410192 何佳铧
        U201410193 陈一波
        U201410194 胡毅
        U201410195 谷朝政
        U201410196 樊炜皓
        U201410197 丁世平
        U201410198 柴昊
        U201410199 张永博
        U201410200 孙宁
        U201410202 漆鸿
        U201416777 李晨圣"
      - 2019年12月30日- たいじゅう きろく
        "0512 62.80
        0513 62.70
        0514 62.90
        0515 62.15
        0516 62.20
        0519 62.05
        0520 62.15"
    - 1230-02
      - 2019年12月30日- lixsense 兼职
      - 2019年12月30日- payoneer
      - 2019年12月30日- 20170512 束胸完全不行！
      - 2019年12月30日- 20170513 一千米 欺负喵喵？被反击
      - 2019年12月30日- 20170514 调查问卷兼职？疯了
      - 2019年12月30日- 第八次作业
      - 2019年12月30日- 20170515 实验失败！ 人生RPG
      - 2019年12月30日- 20170516 颓废种的方向 喵喵被微软拒绝了
      - 2019年12月30日- 20170517 さようなら
      - 2019年12月30日- 生物物理学 刘士勇 课程总结
      - 2019年12月30日- 20170518 妈妈加油 生物物理信息充足！
  - 202002整理
    - 20200208
      - 2020年2月8日 20170519 体育及格！
      - 2020年2月8日 大学 体测 1000米等 体育成绩
      - 2020年2月8日 20170520 条条道路通CS
      - 2020年2月8日 20170521 加速器！
      - 2020年2月8日 20170522 生物物理要完蛋
      - 2020年2月8日 固体物理书上无
      - 2020年2月8日 20170522 实验结束
      - 2020年2月8日 摄氏华氏温度转换 1
      - 2020年2月8日 hello,world!
      - 2020年2月8日 20170423 背单词习惯小组结束
      - 20140524 复习生物~
      - 20170525 学习linux
      - 20170526 印象笔记怎么使用？
      - 20170527 明天考生物！
      - 20170528 生物物理结束 本课总结
      - 20170529 平板键盘工作好，日语考试突来到
      - 上德不扬
      - 20170530 帮了上届帮这届？八股文随便写？
      - 20170531 又开始肝船？
      - 20170601 消灭都市？转钟才洗澡！
      - 20170602 碧蓝航线！正式开始玩儿
      - 20170603 日语考试 实验论文
      - 20170603 找到了当男孩子的乐趣？我不相信
      - 20170604 日语阅读考试和LGBT
      - 20170605 知乎，柊泽艾力欧，你到底是谁？
      - 20170606 精密物理测量？这是什么呢？
      - 20170607 被莫名其妙的表白了
      - 20170608 开始颓废了诶，不可以的！信酱
      - 20170609 可怜的孩子，飞雪
      - 20170610 考前一天的大复习
      - 20170611 颓废的上午，考试的下午
    - 20200428
      - 20170612 冲刺复习第一天，热力学统计
      - 20170613 梦见有人在吸毒 计算机等级
      - 班级花名册
      - 男生寝室分配
      - 碧蓝航线
      - 20170614 苹果机
      - 20170615 固体物理老师的师生情
      - 有哪些看似荒谬，其实很科学的理论？
        "父母所创造的共享家庭环境对孩子的后天成长基本无影响。  "
      - 20170616 热学老师什么也没有说
      - 20170617 在图书馆复习的一天
      - 人类进化历程，很形象，以前看书看到一大堆专有名词搞不清楚
      - 20170618 颓废的话，这是最后一天
      - 20170619 固体物理抬一手
      - 20170620 みなさま頑張ってきた
      - 有没有一个让你难忘的同学？
      - 20170621 果然只有考前最后一天效率最高
      - 20170622 一开始的害怕，最后的虐杀
      - 20170623 没有重点的考试，自信的心
      - 石油会枯竭吗？为什么几十年前预测现在会枯竭，但是还有很多石油可采？
      - Apple ID 苹果 iPhone
        "qqmail
        中学生だった時好きなヒト だいしょうしゃあ注意"
      - 知乎问题-我儿子上淘宝偷买女装和女性激素的药物 该怎么办？
      - 如何根据眉骨修眉、画眉？
      - 20170624 显得有些颓废在考试前夕
      - 20170625 热统终于全部复习完毕
      - 20170626 热统今天考，最后一门
      - 我考上了名校，但最终死在了原生家庭手里
      - 20170627 实习突然开始
      - 20170628 一句话都没有听懂的课
      - 20170629 疲惫的“假期” 扭曲的妹妹？
      - 20170630 奇怪的梦
      - 漢川草廬-二十四史-三國志
        "漢川草廬-二十四史-三國志@手机QQ浏览器 http://www.sidneyluo.net/a/a04/a04.htm  "
    - 20200429
      - 20170701 开始变得颓废？
      - 20170702 加速器物理重要性变成第一！再不看完不行了
      - 知乎 湛凌雪 太疯狂！广东17岁男孩在家“自宫”割下体，自称“想做女人”
      - 湛凌雪-我的儿子想变性当女孩子，我该怎么办？
      - 湛凌雪-如何看待某些跨性别者自行手术的现象？
      - 湛凌雪-成为家长党是一种怎样的体验？
      - 湛凌雪-你是如何出柜的？
      - 湛凌雪-入戏太深是种怎样的体验?
      - 董卓为什么一入京就能号令群臣百官，废立皇帝呢？ 仅仅一个外臣为什么像空降大宰相？ 难道他兵特别多？
      - 20170703 知乎 湛凌雪，愤怒，致郁
      - 20170704 放弃量子光学，主攻加速器物理
      - 知乎 喵喵么么么 双性人故事
      - Castle.Y致孝-当一个药娘的伴侣是什么样的体验？
      - 男女恋爱观念变化
        "然而著名情感心理学家哲史.沃尔.夏索德的研究表示，在女性从高中毕业到大学毕业进入职场的前五年的这段时间里，随着自己眼界的开阔、生活阅历的加深，以及身上现实压力的加大，女生对男性的择偶要求在逐步增高，从单纯的“喜欢他长得帅”慢慢转变为“希望他能给我带来安稳幸福的生活”。
        而男生的趋势则正好相反，对女生的要求，从“想找一个温柔漂亮的白富美女神”，慢慢发展为“找一个适合的女生就行”。
        这两种趋势的矛盾，最后导致了很多中学时期的校园恋爱最终走向彼此嫌弃，彼此伤害的结局。"
      - 中国现在真的已经不敢打仗了吗？
      - 夜色之深-你遇见最好的同桌或同学是什么样的?
      - 20170705 放弃量子光学
      - 20470706 懦弱的退选尝试
      - 20170707 必须放弃量子光学
      - 如何看待百度正太吧许多未成年人「弟弟」主动发帖找「哥哥」？
      - 20170708 实习结束了？
      - 20170709 就是做不出均匀的ps小球
      - 20170710 退选量子光学
      - 20170711 キャンディー隠し運ぶ方が大事
      - 20170712 回家第一天 面基
      - 20170713 颓废？这要完蛋的我跟你说 剪头发
      - 20170714 继续颓废的一天 《脑内乾坤 大脑也有性别》
      - 20170715 上午买衣服 下午看漫展
      - 20170716 去外婆外公家
  - 202007整理
    - 20200712
      - 20170717 清早跑步第一天 爸爸的擔心 呼
      - 20170718 在家一點溫暖的感覺都沒有
      - 沉沦离歌殇未央-16岁+未成年人离家出走如何避免被父母、警察抓回家？
        "很有意思的一个题目，不邀自答。
        以前因为讨钱的一点事情用各种方式追踪过一个离家出走的未成年人，基本上常人能做的方式也都试过了，最后因为各种原因找不到也就不了了之了（毕竟又不是我孩子也没必要费心了）。不过据说是连父母也没找到就是了。
        先交代一下背景，离家出走的这位同学，姑且称为a，十五岁，职高一年级，药娘，长得颇有几番姿色，脑子也灵光。离家出走的原因涉及到和父母不和，和学校不和，最后偷了两千块钱溜出来了，带着身份证和常用手机，还带了一包女装。
        他的第一站从徐州坐到广州，但是在武汉下车找我，理由也很简单，在很多不太严的城市里，出站只有人工检票，没法查出他在哪里下的。在留下手机号，身份证号后借了三千块钱并且想办法不开借条。之后他干了件相当聪明的事情，他找了四家武汉的黑吧，然后弄到了四张身份证正面的照片（黑吧的工作原理就是借前台的身份证开机），由于他长相有些漂亮且不分男女，在武汉呆了数日后他凭借着这四张身份证做汽车辗转湖北四川，期间把头发烫卷并配了副眼镜。从朋友那里借取金钱后在随州（非省会城市，非大城市）买了一张可以用的身份证，之后就没消息了。（当然可能有消息我没关注了）
        从我报案开始警察能查到他最后的记录就是那张徐州出发的火车票，由于一开始我并非亲属，也没有借条，甚至都不能立案。将近一个月后，在联系多个被骗的人并找到他父母之后此事才有进展，不过能查到的资料也仅限于到了随州，之后就没了下文。
        通过这个事情，未成年离家出走不被抓还能过得不错需要满足一下要素
        1，平时得要朋友多，而且关系要紧密，至少也要混到能借个百来块钱不打条的地步。朋友和朋友之间得不常联系，为下一步计划赢取时间。
        2，之前有数次离家出走又回去的经历，以慢慢骗取父母，让父母对你的离家出走疏于管理。上述中的a父母足足用了一个月才反应过来孩子又跑了，a出来的借口是参加夏令营。
        3，自己的身份证这种东西，属于一次性用品，用完就留着做纪念吧。等到了异地之后得用非法途径弄到他人（成人）身份证或者身份证明，如果有足够资金建议找个穷地方直接买一张成人的。
        4，外貌要有很大改观，最好是完全变人。像这种女装的例子是一种，同时假发也是改变的方法之一。化妆等小改变是没什么必要，监控没那么高的像素。
        其他的就靠自己总结了，不过最后我还是希望这文章对你没什么帮助，毕竟未成年离家出走没几个好结果，不过本本分分读完书，经济独立了就是真正的自由。
        
        
        更多详情: https://www.zhihu.com/question/62562671/answer/199871043"
      - 20170719 差点被赶出家门
      - 20170720 普通的颓废
      - 20170721 彻底出柜
      - 20170722 二伯伯生日
      - 20170723 一家人颓废 私のせい？
      - 深蓝水晶-如何评价知乎用户Dekabrist Hibiki？
        "初见的时候，还是一个青涩的小男孩的样子。
        那时候才刚刚和家里摊牌，与家里吵得不可开交，气到哭出来。
        我用希的方式spiritual了一下她，效果拔群。
        
        之后就一直觉得她是真的很萌的一个孩子，娃娃脸看起来很可爱，哪怕是男装看起来也有一种奶猫（少包释小龙）的即视感
        有很多自己喜爱和擅长的东西，这很好。
        
        后来毕业，工作环境极其艰苦，一人在外孤苦无依，却能默默的承受下来。坚强又隐忍的小家伙，可惜被晒成了小暹罗（笑）。
        感情上的受挫对她打击很大，到现在恐怕也没能完全放下，但是大概就像其他事情一样，被她层层包裹住藏在了心底。
        
        其实内心还是很脆弱的，也会希望有情感上的支撑，但是哪怕是关系相对亲密的我，也总会觉得她还是在尽力隐藏自己的真实情感，不想倾诉太多。她的心里如果用勾玉看一下，或许是层层叠叠几千把锁的样子吧
        
        如今，虽然脸蛋还是那么嫩，也还是那么娇羞。但是看起来成熟了许多，有大人的样子了（不是欧派！）（打）
        经过实践发现我尘封了大概一年多的神秘力量不减反增，spiritual呀呐～
        
        不像我这种演什么最后都会演成自己的人，已经可以熟练地切换几种形象和身份性格了。就像生物为了适应恶劣的自然环境而进化出的防御措施一样，是无奈的结果。
        
        和一些奇奇怪怪的人似乎牵扯的有些深，摊上许多我看来其实很没必要的负担，让她也身心俱疲，不过毕竟我是独狼一般的人，与周围的一切都刻意保持着距离，可能暂时无法理解吧。只能默默的心疼着，如果有可能，希望帮她承担一些。但是在她心里恐怕我这种想法早就逾越了吧，不知道呢。
        
        
        
        接下来的日子，也要继续加油。希望她如愿以偿的那天，我也可以像尹天仇一样，大声的喊出“我说我养你啊！”
        
        嘛，毕竟，最喜欢了
        更多详情: https://www.zhihu.com/question/54984521/answer/178533568"
      - 夏楚-如何克服写作时的模仿欲望？20151125
        "和练字一个道理，先是模仿，最后都会练成自己的风格。
        
        只要不断去想，去写。
        更多详情: https://www.zhihu.com/question/22713343/answer/73923038"
      - 夏楚-几岁变药娘合适？20160304
        "我相信科技（｡ò ∀ ó｡）
        
        
        
        
        
        
        
        
        连干细胞诱导都有学，题主的年龄(ﾉ ○ Д ○)ﾉ　
        
        话说这么萌的爸哪里找啊(๑&gt;
        
        以下是重点
        ——————————————————————
        别完全相信大脑，很多人都“曾以为”blabla……
        与目前的中国社会为敌……但我挺你(//∇//)
        糖这种东西，吃了不能随便停，反弹很恐怖……我没试过，听说的(눈_눈)但药娘一辈子吃药是跑不了了。
        如果现在能好好地开心活着，就别乱走凶吉未卜的路，尽管我相信终有一天，世界上将没有柜子，但这其中的艰辛，谁知道呢。如果情绪不太稳定（像我），就要小心了。
        不是说顺从本心不好，而是做这个代价略高。
        任何人都是无性别的，有性别的是社会。
        
        总之，做好自己，自己做好
        
        以上
        （不服不辩，辩哭我怎么办( •̥́ ˍ •̀ू )）
        更多详情: https://www.zhihu.com/question/40688917/answer/89261681"
      - 夏楚 跳过
      - 20170724 书店 伪声 夏楚
      - 20170725 不太现实 图书馆
      - 20170726 キャンディー
      - 20170727 上午依旧无法利用？
      - 20170728 努力 妹妹
      - 20170729 夏楚 楚怡路 楚园 中南大学 圣地巡礼
      - 20170730 “晚安”
      - 20170731 不回家了？
      - 20170801 孤儿？
      - 20170802 爸爸气病了
      - 20170803 妈妈休假
      - 20170804 开福寺和妈妈 夏楚
      - 幸福课 不完美人生的解答书
      - 20170805 买花 战狼2 madoka自杀 maskoto
      - 20170806 离家回学校 一等座
      - 20170807 不颓废的开始！
      - 20170808 碧蓝航线真浪费时间！
      - 20170809 爱齿尔口腔医院 妈妈不同意
      - 20170810 刀剑神域
      - 20170811 两个牙齿没了！ 武大口腔 决斗吧夏楚
      - 20170812 ドm夏楚
      - 20170813 楚楚qq到手了~~
      - 20170814 梦到自撸(黑人问号) 校医院爆满
      - 20170815 梦 伪声果然不能放弃
      - 20170815 下午医院人满
      - 20170816 拔牙 夏楚夏楚不理我
      - 20170817 休整 刀剑神域第一册
    - 20200712 1
      - 20170818 多看看书，elevate mind
      - 中间略
      - 20180201 打代码 奇鸟行状录
    - 20200713
      - 20180202 头发剪了
      - 中略
      - 20180616 想坏蛋蛋
    - 2020年8月3日
      - 20180617 肌肉恢复了 渴望力量，朗道力学购买
      - 完毕！
- 圣经的故事 庞龙
  - 第一章 一部文学遗产
  - 第二章 创世纪
    "七日创世
    亚当夏娃
    该隐 亚伯 塞特
    
    诺亚
    
    巴别塔"
  - 第三章 先驱者
    "亚伯拉罕"
- skill stack
  - 备忘
    - 20200120 保存
      - bilibili uwp 13 webpack介绍
      - https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E6%A6%82%E8%BF%B0.md
      - https://github.com/CyC2018/CS-Notes
      - https://leetcode.com/tag/dynamic-programming/
      - https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E7%96%91%E9%9A%BE%E7%82%B9.md
      - http://www.jjwxc.net/onebook.php?novelid=724767&chapterid=14
    - 网页保存
      - 1129 reboot
        - 火狐
          - http://tool.oschina.net/apidocs/apidoc?api=jdk-zh
          - https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/io/package-summary.html
          - https://github.com/doocs/advanced-java
        - chrome
          - https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md
          - https://monkeysayhi.github.io/2017/09/27/%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%9C%89%E5%87%A0%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%9F/
          - http://v.xue.taobao.com/learn.htm?itemId=600378332917
          - http://web.4399.com/stat/togame.php?target=rxsg&server_id=S30322&cid=3000&time=1575028076359
          - http://xueshu.baidu.com/usercenter/paper/show?paperid=d79f70e6c48583efec55a7ec8dc70cfa&site=xueshu_se
          - https://www.researchgate.net/search.Search.html?type=researcher&query=Anthony%20Huggins
          - http://cds.cern.ch/record/2132847/files/CERN-ACC-2016-0017.pdf
          - https://x.glgoo.top/scholar?hl=zh-CN&as_sdt=0%2C5&q=Design+and+Simulation+of+High+Momentum+Acceptance+Gantries+for+Ion+Beam+Therapy&btnG=#d=gs_cit&u=%2Fscholar%3Fq%3Dinfo%3AlK5uwOiU-cwJ%3Ascholar.google.com%2F%26output%3Dcite%26scirp%3D0%26hl%3Dzh-CN
          - http://www.sidneyluo.net/a/a02/001.htm
          - https://ctext.org/han-shu/gao-di-ji/zh
          - http://www.xysa.com/xysafz/book/quansongci/t-0201.htm
          - http://yw.eywedu.com/24/26/mydoc002.htm
      - 1216 reboot
        - http://web.4399.com/stat/togame.php?target=rxsg&server_id=S30322&cid=3000&time=1575354664487
        - http://localhost:8888/ichiwan/handOutServlet
        - https://github.com/Snailclimb/JavaGuide#%E5%AE%B9%E5%99%A8
        - https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E7%96%91%E9%9A%BE%E7%82%B9.md
        - http://v.xue.taobao.com/learn.htm?spm=a2174.7765244.0.0.Rd4ZLc&courseId=96329
        - https://www.bilibili.com/bangumi/play/ep299561
        - https://www.bilibili.com/bangumi/play/ep260914
        - https://www.wenku8.net/novel/0/18/629.htm
        - https://space.bilibili.com/344849038/video?tid=0&page=2&keyword=&order=pubdate
        - https://www.bilibili.com/video/av34269113/?spm_id_from=trigger_reload
        - http://localhost:8090/inject
        - ------------------
        - https://www.bible.com/bible/2016/GEN.3.NRSV
        - https://www.bible.com/bible/406/GEN.3.ERV
        - https://www.bible.com/bible/83/GEN.3.JCB
        - https://www.bible.com/bible/46/GEN.2.CUNP-%E7%A5%9E
        - http://www.godcom.net/lingxiu/
        - http://www.godcom.net/fsdsm/old/1.htm
        - http://www.godcom.net/fsdsm/old/z/1.htm
        - file:///E:/%E6%96%87%E6%A1%A3/bible/%E6%80%9D%E9%AB%98%E8%81%96%E7%B6%93%E5%8E%9F%E8%91%97%E8%AD%AF%E9%87%8B%E7%B3%BB%E5%88%97/01.%E6%A2%85%E7%91%9F%E4%BA%94%E4%B9%A6.pdf
        - http://www.sbofmhk.org/pub/body/dproduct/d4_download/media/books/201511_HistoryOfOldTestament/HistoryOfOldTestament_1_zh.pdf
        - -------------------
        - https://tool.oschina.net/uploads/apidocs/jdk-zh/
        - https://tool.oschina.net/uploads/apidocs/jdk-zh/java/lang/Runtime.html#addShutdownHook(java.lang.Thread)
        - https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/concurrent/locks/package-summary.html
        - https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/lang/doc-files/threadPrimitiveDeprecation.html
      - 0103 update
        - https://baike.baidu.com/item/%E9%BB%84%E6%98%8F%E7%9A%84%E7%A6%81%E5%BF%8C%E4%B9%8B%E8%8D%AF/5479719?fr=aladdin
          "黄昏的禁忌之药"
        - 前端
          "https://www.bilibili.com/video/av56979800?p=22"
        - springcloud
          "https://www.bilibili.com/video/av22613028?from=search&seid=13955973011348741925"
        - spring boot2
          "http://v.xue.taobao.com/learn.htm?spm=a2174.7765244.0.0.Rd4ZLc&courseId=96329"
        - Java 知识点
          "https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E7%96%91%E9%9A%BE%E7%82%B9.md
          https://github.com/Snailclimb/JavaGuide#%E5%AE%B9%E5%99%A8"
        - leetcode
          "https://leetcode.com/problems/degree-of-an-array/"
        - 热血
          "http://web.4399.com/stat/togame.php?target=rxsg&server_id=S30322&cid=3000&time=1575354664487"
      - ·SQL学习
        "https://www.bilibili.com/video/av59623481/"
      - Java学习路线--B站视频
        "https://www.bilibili.com/read/cv3560825?share_medium=android&share_source=qq&bbid=XYDD5D3D347ADF41ADF2524B48B51002DF33E&ts=1569819791994"
      - 微服务实战
        "https://www.bilibili.com/video/av41227405?p=3"
      - 零之使魔
        "https://www.bilibili.com/bangumi/play/ep14761?from=search&seid=17419216225369905714"
      - 柏拉图理想国导读
        "https://www.bilibili.com/video/av42621432?p=9"
      - 放浪男孩漫画
        "http://www.dm5.com/m32557/#ipg40"
      - leetcode
        "https://leetcode.com/problems/trapping-rain-water/solution/"
      - 圣经
        - http://www.godcom.net/fsdsm/old/z/1.htm
        - http://www.godcom.net/fsdsm/old/1.htm
        - http://www.godcom.net/lingxiu/
        - https://www.bible.com/bible/46/GEN.2.CUNP-%E7%A5%9E
        - https://www.bible.com/bible/83/GEN.3.JCB
        - https://www.bible.com/bible/406/GEN.3.ERV
        - https://www.bible.com/bible/2016/GEN.3.NRSV
    - 2020年1月2日
      - 昨天忘记牙套回寝室
      - 早上忘记拿伞
    - 2020年1月3日
      - 论文 二三部分合起来
      - 分开匹配 把对称性弄好
  - 搞定
    - API源码阅读
      - Thread类
        - 类说明
        - Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?
          "Java Thread Primitive Deprecation
          Java线程基元弃用
          
          Why is Thread.stop deprecated?
          为什么不赞成使用Thread.stop？
          Because it is inherently unsafe. Stopping a thread causes it to
          unlock all the monitors that it has locked. (The monitors are
          unlocked as the ThreadDeath exception propagates up
          the stack.) If any of the objects previously protected by these
          monitors were in an inconsistent state, other threads may now view
          these objects in an inconsistent state. Such objects are said to be
          damaged. When threads operate on damaged objects, arbitrary
          behavior can result. This behavior may be subtle and difficult to
          detect, or it may be pronounced. Unlike other unchecked exceptions,
          ThreadDeath kills threads silently; thus, the user has
          no warning that his program may be corrupted. The corruption can
          manifest itself at any time after the actual damage occurs, even
          hours or days in the future.
          因为它本质上是不安全的。停止线程会使它解锁它已锁定的所有监视器。 （当ThreadDeath异常在堆栈中向上传播时，监视器将被解锁。）如果以前由这些监视器保护的任何对象处于不一致状态，则其他线程现在可能会以不一致状态查看这些对象。据说这些物体已损坏。当线程对损坏的对象进行操作时，可能会导致任意行为。此行为可能是微妙的，难以检测，或者可能是明显的。与其他未检查的异常不同，ThreadDeath会无声地杀死线程。因此，用户没有警告其程序可能已损坏。在实际损坏发生后的任何时间，甚至未来数小时或数天，腐败都会显现出来。
          
          Couldn't I just catch the ThreadDeath exception
          and fix the damaged object?
          In theory, perhaps, but it would vastly complicate the
          task of writing correct multithreaded code. The task would be
          nearly insurmountable for two reasons:
          从理论上讲，也许吧，但这会使编写正确的多线程代码的任务大大复杂化。该任务几乎是无法克服的，原因有两个：
          
          A thread can throw a ThreadDeath exception
          almost anywhere. All synchronized methods and blocks would
          have to be studied in great detail, with this in mind.
          A thread can throw a second ThreadDeath exception
          while cleaning up from the first (in the catch or
          finally clause). Cleanup would have to be repeated till
          it succeeded. The code to ensure this would be quite complex.
          
          In sum, it just isn't practical.
              线程几乎可以在任何地方抛出ThreadDeath异常。考虑到这一点，必须对所有同步的方法和块进行详细研究。
              从第一个线程清除时（在catch或finally子句中），线程可以引发第二个ThreadDeath异常。必须重复进行清理，直到成功。确保该代码很复杂。
          
          总而言之，这是不切实际的。
          
          What should I use instead of Thread.stop?
          我应该用什么代替Thread.stop？
          Most uses of stop should be replaced by code that
          simply modifies some variable to indicate that the target thread
          should stop running. The target thread should check this variable
          regularly, and return from its run method in an orderly fashion if
          the variable indicates that it is to stop running. To ensure prompt
          communication of the stop-request, the variable must be
          volatile (or access to the variable must be
          synchronized).
          stop的大多数用法应该由简单地修改某些变量以指示目标线程应停止运行的代码代替。目标线程应定期检查此变量，如果该变量指示要停止运行，则应按有序方式从其运行方法返回。为了确保及时传达停止请求，变量必须是易失性的（或对变量的访问必须同步）。
          
          
          For example, suppose your applet contains the following
          start, stop and run
          methods:
              private Thread blinker;
          
              public void start() {
                  blinker = new Thread(this);
                  blinker.start();
              }
          
              public void stop() {
                  blinker.stop();  // UNSAFE!
              }
          
              public void run() {
                  while (true) {
                      try {
                          Thread.sleep(interval);
                      } catch (InterruptedException e){
                      }
                      repaint();
                  }
              }
          
          You can avoid the use of Thread.stop by replacing the
          applet's stop and run methods with:
              private volatile Thread blinker;
          
              public void stop() {
                  blinker = null;
              }
          
              public void run() {
                  Thread thisThread = Thread.currentThread();
                  while (blinker == thisThread) {
                      try {
                          Thread.sleep(interval);
                      } catch (InterruptedException e){
                      }
                      repaint();
                  }
              }
          
          
          How do I stop a thread that waits for long periods (e.g., for
          input)?
          That's what the Thread.interrupt method is for. The
          same "state based" signaling mechanism shown above can be used, but
          the state change (blinker = null, in the previous
          example) can be followed by a call to
          Thread.interrupt, to interrupt the wait:
          这就是Thread.interrupt方法的用途。可以使用上面显示的相同的“基于状态”的信令机制，但是状态更改（在前面的示例中，blinker = null）之后可以调用Thread.interrupt来中断等待：
              public void stop() {
                  Thread moribund = waiter;
                  waiter = null;
                  moribund.interrupt();
              }
          
          For this technique to work, it's critical that any method that
          catches an interrupt exception and is not prepared to deal with it
          immediately reasserts the exception. We say reasserts
          rather than rethrows, because it is not always possible to
          rethrow the exception. If the method that catches the
          InterruptedException is not declared to throw this
          (checked) exception, then it should "reinterrupt itself" with the
          following incantation:
              Thread.currentThread().interrupt();
          
          This ensures that the Thread will reraise the
          InterruptedException as soon as it is able.
          为了使该技术起作用，至关重要的是，任何捕获中断异常并且不准备处理该异常的方法都必须立即重新声明该异常。我们说重新声明而不是重新抛出，因为并非总是可能重新抛出异常。如果未声明捕获InterruptedException的方法引发此（已检查）异常，则它应使用以下提示“重新中断自身”：
          
          What if a thread doesn't respond to
          Thread.interrupt?
          In some cases, you can use application specific tricks. For
          example, if a thread is waiting on a known socket, you can close
          the socket to cause the thread to return immediately.
          Unfortunately, there really isn't any technique that works in
          general. It should be noted that in all situations where a
          waiting thread doesn't respond to Thread.interrupt, it
          wouldn't respond to Thread.stop either. Such
          cases include deliberate denial-of-service attacks, and I/O
          operations for which thread.stop and thread.interrupt do not work
          properly.
          在某些情况下，您可以使用特定于应用程序的技巧。例如，如果某个线程正在一个已知的套接字上等待，则可以关闭该套接字以使该线程立即返回。不幸的是，实际上没有任何一种技术可以正常工作。应该注意的是，在所有等待线程不响应Thread.interrupt的情况下，它也不响应Thread.stop。这样的情况包括故意的拒绝服务攻击，以及thread.stop和thread.interrupt无法正常工作的I / O操作。
          
          Why are Thread.suspend and
          Thread.resume deprecated?
          Thread.suspend is inherently deadlock-prone. If the
          target thread holds a lock on the monitor protecting a critical
          system resource when it is suspended, no thread can access this
          resource until the target thread is resumed. If the thread that
          would resume the target thread attempts to lock this monitor prior
          to calling resume, deadlock results. Such deadlocks
          typically manifest themselves as "frozen" processes.
          Thread.suspend本质上是容易死锁的。如果目标线程在挂起时在监视器上保持锁以保护关键系统资源，则在恢复目标线程之前，没有线程可以访问该资源。如果将恢复目标线程的线程在调用resume之前尝试锁定此监视器，则会导致死锁。这种僵局通常表现为“冻结”进程。
          什么应该
          
          What should I use instead of Thread.suspend and
          Thread.resume?
          As with Thread.stop, the prudent approach is to
          have the "target thread" poll a variable indicating the desired
          state of the thread (active or suspended). When the desired state
          is suspended, the thread waits using Object.wait. When
          the thread is resumed, the target thread is notified using
          Object.notify.
          For example, suppose your applet contains the following
          mousePressed event handler, which toggles the state of a thread
          called blinker:
              private boolean threadSuspended;
          
              Public void mousePressed(MouseEvent e) {
                  e.consume();
          
                  if (threadSuspended)
                      blinker.resume();
                  else
                      blinker.suspend();  // DEADLOCK-PRONE!
          
                  threadSuspended = !threadSuspended;
              }
          
          You can avoid the use of Thread.suspend and
          Thread.resume by replacing the event handler above
          with:
              public synchronized void mousePressed(MouseEvent e) {
                  e.consume();
          
                  threadSuspended = !threadSuspended;
          
                  if (!threadSuspended)
                      notify();
              }
          
          and adding the following code to the "run loop":
                          synchronized(this) {
                              while (threadSuspended)
                                  wait();
                          }
          
          The wait method throws the
          InterruptedException, so it must be inside a try
          ... catch clause. It's fine to put it in the same clause as
          the sleep. The check should follow (rather than
          precede) the sleep so the window is immediately
          repainted when the thread is "resumed." The resulting
          run method follows:
              public void run() {
                  while (true) {
                      try {
                          Thread.sleep(interval);
          
                          synchronized(this) {
                              while (threadSuspended)
                                  wait();
                          }
                      } catch (InterruptedException e){
                      }
                      repaint();
                  }
              }
          
          Note that the notify in the mousePressed
          method and the wait in the run method are
          inside synchronized blocks. This is required by the
          language, and ensures that wait and
          notify are properly serialized. In practical terms,
          this eliminates race conditions that could cause the "suspended"
          thread to miss a notify and remain suspended
          indefinitely.
          While the cost of synchronization in Java is decreasing as the
          platform matures, it will never be free. A simple trick can be used
          to remove the synchronization that we've added to each iteration of
          the "run loop." The synchronized block that was added is replaced
          by a slightly more complex piece of code that enters a synchronized
          block only if the thread has actually been suspended:
                          if (threadSuspended) {
                              synchronized(this) {
                                  while (threadSuspended)
                                      wait();
                              }
                          }
          
          In the absence of explicit synchronization,
          threadSuspended must be made volatile to ensure
          prompt communication of the suspend-request.
          The resulting run method is:
              private volatile boolean threadSuspended;
          
              public void run() {
                  while (true) {
                      try {
                          Thread.sleep(interval);
          
                          if (threadSuspended) {
                              synchronized(this) {
                                  while (threadSuspended)
                                      wait();
                              }
                          }
                      } catch (InterruptedException e){
                      }
                      repaint();
                  }
              }
          
          
          Can I combine the two techniques to produce a thread that may
          be safely "stopped" or "suspended"?
          Yes, it's reasonably straightforward. The one subtlety is that the
          target thread may already be suspended at the time that another
          thread tries to stop it. If the stop method merely sets
          the state variable (blinker) to null, the target thread
          will remain suspended (waiting on the monitor), rather than exiting
          gracefully as it should. If the applet is restarted, multiple
          threads could end up waiting on the monitor at the same time,
          resulting in erratic behavior.
          To rectify this situation, the stop method must ensure
          that the target thread resumes immediately if it is suspended. Once
          the target thread resumes, it must recognize immediately that it
          has been stopped, and exit gracefully. Here's how the resulting
          run and stop methods look:
              public void run() {
                  Thread thisThread = Thread.currentThread();
                  while (blinker == thisThread) {
                      try {
                          Thread.sleep(interval);
          
                          synchronized(this) {
                              while (threadSuspended && blinker==thisThread)
                                  wait();
                          }
                      } catch (InterruptedException e){
                      }
                      repaint();
                  }
              }
          
              public synchronized void stop() {
                  blinker = null;
                  notify();
              }
          
          If the stop method calls Thread.interrupt, as
          described above, it needn't call notify as well, but it
          still must be synchronized. This ensures that the target thread
          won't miss an interrupt due to a race condition. "
    - volatile关键字
      - 三大特点 可见性 原子性 禁止编译器重排序
      - 百度百科
        "确保本条指令不会因编译器的优化而省略，且要求每次直接读值"
      - Java中的双重检查锁（double checked locking）
        "下面代码有线程安全问题：
        public class Singleton {
            private static Singleton uniqueSingleton;
        
            private Singleton() {
            }
        
            public Singleton getInstance() {
                if (null == uniqueSingleton) {
                    uniqueSingleton = new Singleton();
                }
                return uniqueSingleton;
            }
        }
        ---------------------------------------------------
        
        方法一
        public synchronized Singleton getInstance()
        串行了
        
        ------------------------------------------------------
        方法2 双重检查锁 有问题!!
        public Singleton getInstance() {
                if (null == uniqueSingleton) {
                    synchronized (Singleton.class) {
                        if (null == uniqueSingleton) {
                            uniqueSingleton = new Singleton();   // error
                        }
                    }
                }
                return uniqueSingleton;
            }
        
        ---------------------------
        需要用volatile
        private volatile static Singleton uniqueSingleton;"
    - 魔弹之王与战姫
    - 绝对双刃
    - ing
      "ssm框架123"
    - 视频1000完
  - 还不知道的东西
    - 校招常问方向
      - 算法
        - 算法
          - 图考的不多，主要是两个 最短路径优先算法
          - 全部的排序方法
          - 内排序 外排序
          - 大数据外排序
          - 遍历算法——BFS DFS
          - morris遍历
          - hash算法，一致性hash？布隆过滤器
          - LRU? KMP? Manacher？ BFPRT?
          - 剑指offer
        - 手写快排
        - 数据结构熟么，讲一下树和图吧，树的层次遍历使用什么结构，相应的图的遍历呢。讲讲最小生成算法，还有迪杰斯特拉
        - 数组，找到唯一一个出现两次的数
        - 一个10000以下的数组，内存够。里面只有1，2，3。排下序
          "a 普通排序O（nlogn）
          b 荷兰旗问题，双指针解决。O（N）
          c 统计数量，重放数组O（2N）
          d 另外搞一个数组，把1放头，3放尾，也是双指针。O（N）。空间复杂度O（N）"
        - 用队列计算一个树的高度
        - 一个黑名单集合，数据量很大，快速查询一个值是否在集合里，怎么设计
        - 还是上一题，说这个黑名单可能需要动态地增删改，如何设计才能避免访问响应太慢
        - 上一题的黑名单做成分布式，怎么做
        - 找一个无序数组的中位数
        - 快排的时间复杂度，最坏情况呢，最好情况呢，堆排序的时间复杂度呢，建堆的复杂度是多少
        - 写一个层序遍历
        - 写一个插入树节点到一颗排序树的插入方法，使用递归方式找到插入位置即可
        - 一个有向图用邻接矩阵表示，并且是有权图，现在问怎么判断图中有没有环
        - 一个二叉树，找到二叉树中最长的一条路径
      - 多线程/并发
        - 集合
          - vector arraylist linkedlist
          - hashtable hashmap treemap
          - concurrenthashmap 并发包
          - hashset treeset
        - Java基础
          - 多线程学习
            - 同步：volatile synchronized lock
            - volatile
            - synchronized  原理 锁的升级降级？
            - lock reentrantLcok 原理
            - threadlocal
            - 通信
            - 线程池 原理
            - 死锁？ 定位 修复
            - CAS? atomic类
            - AQS:并发包
            - 并发包全部知识
          - 新版本特性？8 9 10...
          - excepting / error？
          - final finally finalize
          - 四种引用：强弱虚幻？
          - 接口/抽象类
          - 深浅克隆
          - string stringbuffer stringbuilder
          - IO NIO AIO？
        - io/nio学习
        - 为什么object的wait和notify必须在同步块中使用，不在同步块使用会报错么，编译报错还是运行报错。
        - hashmap，hashtable，concurrenthashmap区别和场景
        - volatile关键字有什么用
        - 进程和线程 在通信上的区别
        - 悲观锁和乐观锁，说一下Java和数据库分别怎么实现的
        - Java的集合类哪些是线程安全 分别说说这些集合类，hashmap怎么实现的
        - chm和countdownlatch怎么使用的
        - 操作系统的死锁必要条件，如何避免死锁
      - JVM OK
        - GC调优
          - 思路
          - JVM常用参数
          - jvm监控工具
            - 命令行的
            - 图形化的
        - jvm学习
          - 内存模型
          - happen-before原则
          - 内存泄漏 内存溢出 栈溢出
          - 类加载
          - 对象初始化
          - 垃圾回收？
            - 引用计数
            - 可达性分析
            - 怎么回收
            - 常用的垃圾收集器
            - 内存分配和回收策略
        - 分区
        - gc算法 gc是否会有停顿或者延迟
        - 讲一下OOM和内存泄漏的例子，为什么有GC还会出现内存泄漏和内存溢出呢
        - jvm讲一下gc吧，两个对象的引用循环依赖，会不会被垃圾回收，什么情况下会什么情况下不会呢
        - GC root是哪些位置呢
        - 说一下JVM内存模型把，有哪些区，分别干什么的
        - 说一下gc算法，分代回收说下
      - 数据库/索引
        - mysql
          - 范式
          - 事务!!!!
          - 索引技术!!
            - 分类、选择原则、优化、失效、底层原理
          - 锁
            - 行锁 表锁 读锁 写锁 乐观悲观 加锁的方法 分布式锁
          - 存储引擎：innob....
          - JOIN执行计划？
          - 分库分表
          - 主从复制
        - 事务
          - 数据库的事务，四个性质说一下，分别有什么用，怎么实现的
          - 讲到了redo和undo日志，问我分别有什么用
          - 数据库的隔离性如何保证，使用悲观锁和乐观锁有何区别。MVCC的设计目的是什么，怎么使用版本号判断数据的可见性
        - 数据库索引说一下，除了B+树索引还有什么索引
        - 倒排索引说一下，如果关键字很多，怎么优化。使用前缀树和hashmap优化
        - 前缀树的结构和原理说一下
        - 数据库的备份和恢复怎么实现的，主从复制怎么做的，什么时候会出现数据不一致，如何解决
        - MySQL的引擎讲一下，有什么区别，使用场景呢
        - 查询最新的10条数据
        - MySQL的union all和union有什么区别
        - MySQL有哪几种join方式，底层原理是什么
        - MySQL索引的实现，innodb的索引，b+树索引是怎么实现的，为什么用b+树做索引节点，一个节点存了多少数据，怎么规定大小，与磁盘页对应
      - 网络
        - 计算机网络
          - 异步IO多路复用
        - 浏览器发起http请求过程，越详细越好
        - 网络这块，说一下dns请求的过程吧，dns是否会访问缓存呢，缓存在本地和浏览器，还有dns服务器上是不是都有
        - get和post的区别讲一下，底层的实现有区别么，都是基于TCP，那么如何限制get的url长度，在哪一层限制的
        - TCP连接中的三次握手和四次挥手，四次挥手的最后一个ack的作用是什么，为什么要time wait，为什么是2msl
        - socket网络编程，说一下TCP的三次握手和四次挥手
        - 计算机网络TCP和UDP有什么区别，为什么迅雷下载是基于UDP的
      - 中间件/缓存 
        - netty
        - redis
          - 为什么？
          - 优缺点
          - 数据类型
          - 底层实现
          - 单线程——展开
          - 持久化
          - 过期策略/内存淘汰机制
          - redis/mysql 双写一致性问题？
          - 并发竞争key问题
        - web
          - cookie session
          - 分布时session
          - spring...
        - tomcat工作模式
        - redis
          - Redis说一下为什么是单线程的，不会很慢么，有什么好处
          - Redis的IO请求模型，是不是IO多路复用呢
          - Redis了解哪些啊
          - Redis使用哨兵部署会有什么问题
          - Redis了解么，如果Redis有1亿个key，使用keys命令是否会影响线上服务
          - Redis的持久化方式，aod和rdb，具体怎么实现，追加日志和备份文件，底层实现原理的话知道么
          - Redis的list是怎么实现的，我说用ziplist+quicklist实现的，ziplist压缩空间，quicklist实现链表
          - sortedset怎么实现的，使用dict+skiplist实现的
        - 缓存和数据库的一致性怎么保证
        - 问我如何把docker讲的很清楚
        - 了解什么消息队列
        - 写一个LRU的缓存，需要完成超时淘汰和LRU淘汰
      - 设计模式
        - 学习！！
      - 框架
        - spring
          - Spring的interceptor和filter有什么区别
      - 分布式
        - 分布式架构...
        - dubbo
        - 服务器如何负载均衡，有哪些算法，哪个比较好，一致性哈希原理，怎么避免DDOS攻击请求打到少数机器
        - 分布式系统了解么，说一下Hadoop了解啥
        - MapReduce的combiner干啥的
        - Hadoop分发任务时，有个job失败了，hadoop会怎么处理
        - hadoop分发任务，如果有一个节点特别慢拉慢了整体速度怎么办
        - 分布式数据库了解么
      - linux/服务器
        - 操作系统
          - 死锁仔细学习——条件 应对方法
        - 常用命令
        - shell
        - Linux查看cpu占用率高的进程
        - 查看占用某端口的进程和某进程监听的端口
        - 如何查询日志文件中的所有ip，正则表达式
        - Linux的内存管理算法
        - Linux的文件系统了解么
        - 说说Linux的磁盘管理
        - Linux有哪些进程通信方式
        - 僵尸进程和孤儿进程是什么，如何避免僵尸进程
        - Linux的共享内存如何实现 共享内存实现的具体步骤
        - 进程通信方式有哪些，问我分别怎么使用，管道有哪些类型，各有什么优缺点
        - 问我服务器硬件了解么
        - shell了解么
        - 问我cgroup在linux的具体实现
      - 项目
        - 项目中难点，用到的技术
      - 其他
        - 开源的技术看过用过么，分布式存储的了解么
        - 想做什么方向的开发
        - 平时了解什么操作系统
  - 其他
    - 2020一月新番
      "电磁炮3
      风俗娘鉴赏
      索马里和森林之神
      星掠者 !!!
      理科生坠入情网
      恋爱小行星
      巧克力
      因为太怕痛
      OBSOLET
      "
    - 笔记本牌子型号 DELL 2017-10-12 15:02:18购买
      "戴尔DELL灵越游匣Master15.6英寸游戏笔记本电脑(i5-7300HQ 8G 128GSSD+1T GTX1050Ti 4G独显)黑"
  - 学习ing
    - JavaGuide
      "https://github.com/Snailclimb/JavaGuide/blob/master/README.md"
      - Java
        - 基础
          - Java 基础知识回顾
            "https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md"
            - 1. 面向对象和面向过程的区别
              "面向过程 ：面向过程性能比面向对象高。 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix等一般采用面向过程开发。但是，面向过程没有面向对象易维护、易复用、易扩展。
              面向对象 ：面向对象易维护、易复用、易扩展。 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，面向对象性能比面向过程低。
              参见 issue : 面向过程 ：面向过程性能比面向对象高？？
              
              这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语言，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械码。
              
              而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比Java好。"
            - 2. Java 语言有哪些特点?
              "简单易学；
              面向对象（封装，继承，多态）；
              平台无关性（ Java 虚拟机实现平台无关性）；
              可靠性；
              安全性；
              支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；
              支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；
              编译与解释并存；
              修正（参见： issue#544）：C++11开始（2011年的时候）,C++就引入了多线程库，在windows、linux、macos都可以使用std::thread和std::async来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread
              "
            - 3. 关于 JVM JDK 和 JRE 最详细通俗的解答
              "JVM
              Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。
              
              什么是字节码?采用字节码的好处是什么?
              
              在 Java 中，JVM可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java程序无须重新编译便可在多种不同操作系统的计算机上运行。
              
              Java 程序从源代码到运行一般有下面3步：
              
              [图]
              
              我们需要格外注意的是 .class->机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。
              
              HotSpot采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是JIT所需要编译的部分。JVM会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9引入了一种新的编译模式AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT预热等各方面的开销。JDK支持分层编译和AOT协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。
              
              总结：
              
              Java虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。
              
              JDK 和 JRE
              JDK是Java Development Kit，它是功能齐全的Java SDK。它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。
              
              JRE 是 Java运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java虚拟机（JVM），Java类库，java命令和其他的一些基础构件。但是，它不能用于创建新程序。
              
              如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装JDK了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何Java开发，仍然需要安装JDK。例如，如果要使用JSP部署Web应用程序，那么从技术上讲，您只是在应用程序服务器中运行Java程序。那你为什么需要JDK呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。"
            - 4. Oracle JDK 和 OpenJDK 的对比
              "可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么Oracle和OpenJDK之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。
              
              对于Java 7，没什么关键的地方。OpenJDK项目主要基于Sun捐赠的HotSpot源代码。此外，OpenJDK被选为Java 7的参考实现，由Oracle工程师维护。关于JVM，JDK，JRE和OpenJDK之间的区别，Oracle博客帖子在2012年有一个更详细的答案：
              
              问：OpenJDK存储库中的源代码与用于构建Oracle JDK的代码之间有什么区别？
              
              答：非常接近 - 我们的Oracle JDK版本构建过程基于OpenJDK 7构建，只添加了几个部分，例如部署代码，其中包括Oracle的Java插件和Java WebStart的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源Oracle JDK的所有部分，除了我们考虑商业功能的部分。
              
              总结：
              
              Oracle JDK大概每6个月发一次主要版本，而OpenJDK版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。
              OpenJDK 是一个参考模型并且是完全开源的，而Oracle JDK是OpenJDK的一个实现，并不是完全开源的；
              Oracle JDK 比 OpenJDK 更稳定。OpenJDK和Oracle JDK的代码几乎相同，但Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到Oracle JDK就可以解决问题；
              在响应性和JVM性能方面，Oracle JDK与OpenJDK相比提供了更好的性能；
              Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；
              Oracle JDK根据二进制代码许可协议获得许可，而OpenJDK根据GPL v2许可获得许可。"
            - 5. Java和C++的区别?
              "我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过C++，也要记下来！
              
              都是面向对象的语言，都支持封装、继承和多态
              Java 不提供指针来直接访问内存，程序内存更加安全
              Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。
              Java 有自动内存管理机制，不需要程序员手动释放无用内存
              "
            - 6. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?
              "一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 main（）方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。"
            - 7. Java 应用程序与小程序之间有哪些差别?
              "简单说应用程序是从主线程启动(也就是 main() 方法)。applet 小程序没有 main() 方法，主要是嵌在浏览器页面上运行(调用init()或者run()来启动)，嵌入浏览器这点跟 flash 的小游戏类似。"
            - 8. 字符型常量和字符串常量的区别?
              "形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符
              含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)
              占内存大小 字符常量只占2个字节; 字符串常量占若干个字节(至少一个字符结束标志) (注意： char在Java中占两个字节)"
            - 9. 构造器 Constructor 是否可被 override?
              "在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，所以 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。"
            - 10. 重载和重写的区别
              "重载
              发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。
              
              重写
              重写是子类对父类的允许访问的方法的实现过程进行重新编写,发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为 private 则子类就不能重写该方法。也就是说方法提供的行为改变，而方法的外貌并没有改变。"
            - 11. Java 面向对象编程三大特性: 封装 继承 多态
              "封装
              封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。
              
              继承
              继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。
              
              关于继承如下 3 点请记住：
              
              子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。
              子类可以拥有自己属性和方法，即子类可以对父类进行扩展。
              子类可以用自己的方式实现父类的方法。（以后介绍）。
              多态
              所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
              
              在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。"
            - 12. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?
              "可变性
              
              简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，private　final　char　value[]，所以 String 对象是不可变的。而StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰，所以这两种对象都是可变的。
              
              StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。
              
              AbstractStringBuilder.java
              
              abstract class AbstractStringBuilder implements Appendable, CharSequence {
                  char[] value;
                  int count;
                  AbstractStringBuilder() {
                  }
                  AbstractStringBuilder(int capacity) {
                      value = new char[capacity];
                  }
              线程安全性
              
              String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。　
              
              性能
              
              每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。
              
              对于三者使用的总结：
              
              操作少量的数据: 适用String
              单线程操作字符串缓冲区下操作大量数据: 适用StringBuilder
              多线程操作字符串缓冲区下操作大量数据: 适用StringBuffer"
            - 13. 自动装箱与拆箱
            - 14. 在一个静态方法内调用一个非静态成员为什么是非法的?
            - 15. 在 Java 中定义一个不做事且没有参数的构造方法的作用？
            - 16. import java和javax有什么区别？
            - 17. 接口和抽象类的区别是什么？
              "接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。
              接口中除了static、final变量，不能有其他变量，而抽象类中则不一定。
              一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口。
              接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰！）。
              从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。
              备注：在JDK8中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见issue:https://github.com/Snailclimb/JavaGuide/issues/146)"
            - 18. 成员变量与局部变量的区别有哪些？
            - 19. 创建一个对象用什么运算符?对象实体与对象引用有何不同?
            - 20. 什么是方法的返回值?返回值在类的方法里的作用是什么?
            - 21. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?
            - 22. 构造方法有哪些特性？
            - 23. 静态方法和实例方法有何不同？
            - 24. 对象的相等与指向他们的引用相等,两者有什么不同?
            - 25. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?
            - 26. == 与 equals(重要)
            - 27. hashCode 与 equals (重要)
            - 28. 为什么Java中只有值传递？
            - 29. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?
            - 30. 线程有哪些基本状态?
            - 31 关于 final 关键字的一些总结
            - 32 Java 中的异常处理
            - 33 Java序列化中如果有些字段不想进行序列化，怎么办？
            - 34 获取用键盘输入常用的两种方法
            - 35 Java 中 IO 流
            - 36. 常见关键字总结:static,final,this,super
            - 37. Collections 工具类和 Arrays 工具类常见方法总结
            - 38. 深拷贝 vs 浅拷贝
          - Java 基础知识疑难点/易错点
          - 一些重要的Java程序设计题
          - J2EE 基础知识回顾
        - 容器
      - 网络
    - advanced-java
      "https://github.com/doocs/advanced-java
      
      本项目大部分内容来自中华石杉，版权归作者所有，内容涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。我(@yanglbme)对这部分知识做了一个系统的整理，方便学习查阅。配合《大型网站技术架构——李智慧》、《Redis 设计与实现——黄健宏》、《Redis 深度历险——钱文品》、《亿级流量网站架构核心技术——张开涛》食用，效果更佳。
      
      学习之前，先来看看 Issues 讨论区的技术面试官是怎么说的吧。本项目也欢迎各位开发者朋友到 Issues 讨论区分享自己的一些想法和实践经验，参与或加入开源组织请看这里，你也访问 GitHub Page 详细了解一下 Doocs。
      
      另外，我还将在这里更新内容，感兴趣的朋友可以进来看看。"
      - 高并发架构
        - 消息队列
        - 搜索引擎
        - 缓存
        - 分库分表
        - 读写分离
        - 高并发系统
      - 分布式系统
    - 面试热点问题
      "https://zhuanlan.zhihu.com/p/93785574"
      - Java基础
        - List 和 Set 的区别
        - HashSet 是如何保证不重复的
        - HashMap 是线程安全的吗，为什么不是线程安全的（最好画图说明多线程环境下不安全）?
        - HashMap 的扩容过程
        - HashMap 1.7 与 1.8 的 区别，说明 1.8 做了哪些优化，如何优化的？6、final finally finalize
        - 强引用 、软引用、 弱引用、虚引用
        - Java反射
      - Java 并发
        - synchronized 的实现原理以及锁优化？
        - volatile 的实现原理？
        - Java 的信号灯？
        - synchronized 在静态方法和普通方法的区别？
        - 怎么实现所有线程在等待某个事件的发生才会去执行？
        - CAS？CAS 有什么缺陷，如何解决？
        - synchronized 和 lock 有什么区别？
        - Hashtable 是怎么加锁的 ？
        - HashMap 的并发问题？
        - ConcurrenHashMap 介绍？1.8 中为什么要用红黑树？
        - AQS
        - 如何检测死锁？怎么预防死锁？
        - Java 内存模型？
        - 如何保证多线程下 i++ 结果正确？
        - 线程池的种类，区别和使用场景？
        - 分析线程池的实现原理和线程的调度过程？
        - 线程池如何调优，最大数目如何确认？
        - ThreadLocal原理，用的时候需要注意什么？
      - Spring
        - BeanFactory 和 FactoryBean？
        - Spring IOC 的理解，其初始化过程？
        - BeanFactory 和 ApplicationContext？
        - Spring Bean 的生命周期，如何被管理的？
        - Spring Bean 的加载过程是怎样的？
        - 如果要你实现Spring AOP，请问怎么实现？
        - 如果要你实现Spring IOC，你会注意哪些问题？
        - Spring 是如何管理事务的，事务管理机制？
        - Spring 的不同事务传播行为有哪些，干什么用的？
        - Spring 中用到了那些设计模式？
      - Mysql
        - 与 Oracle 相比， Mysql 有什么优势？
        - 简洁描述 Mysql 中 InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？
        - 在 Mysql 中 ENUM 的用法是什么？
        - Mysql 中使用什么存储引擎？
        - 如何使用 Unix shell 登录 Mysql
        - Mysql 中有哪几种锁？简单介绍一下
      - Netty
        - BIO、NIO和AIO
        - Netty 的各大组件
        - Netty的线程模型
        - TCP 粘包/拆包的原因及解决方法
        - 了解哪几种序列化协议？包括使用场景和如何去选择
        - Netty的零拷贝实现
        - Netty的高性能表现在哪些方面
      - 分布式相关
        - Dubbo的底层实现原理和机制
        - 描述一个服务从发布到被消费的详细过程
        - 分布式系统怎么做服务治理
        - 接口的幂等性的概念
        - 消息中间件如何解决消息丢失问题
        - Dubbo的服务请求失败怎么处理
        - 重连机制会不会造成错误
        - 对分布式事务的理解
        - 如何实现负载均衡，有哪些算法可以实现？10、Zookeeper的用途，选举的原理是什么？11、数据的垂直拆分水平拆分。12、zookeeper原理和适用场景
        - zookeeper watch机制
        - redis/zk节点宕机如何处理
        - 分布式集群下如何做到唯一序列号
        - 如何做一个分布式锁
      - 设计模式
        - 在 Java 中，为什么不允许从静态方法中访问非静态变量？
        - 在 Java 中，什么时候用重载，什么时候用重写？
        - 举例说明什么情况下会更倾向于使用抽象类而不是接口？
        - Java 中什么叫单例设计模式？请用 Java 写出线程安全的单例模式
        - 什么是设计模式？你是否在你的代码里面使用过任何设计模式？
        - 请列举出在 JDK 中几个常用的设计模式？
      - Tomcat
        - Tomcat 的缺省端口是多少，怎么修改？
        - tomcat 有哪几种 Connector 运行模式(优化)？
        - Tomcat 有几种部署方式？
        - tomcat 容器是如何创建 servlet 类实例？用到了什么原理？
        - tomcat 如何优化？
        - 内存调优
        - 垃圾回收策略调优
        - 共享 session 处理， 添加 JMS 远程监控
        - 关于 Tomcat 的 session 数目
        - 监视 Tomcat 的内存使用情况
        - 打印类的加载情况及对象的回收情况
        - Tomcat 一个请求的完整过程
        - Tomcat 工作模式？
      - 缓存
        - Redis用过哪些数据数据，以及Redis底层怎么实现
        - Redis缓存穿透，缓存雪崩
        - 如何使用Redis来实现分布式锁
        - Redis的并发竞争问题如何解决
        - Redis持久化的几种方式，优缺点是什么，怎么实现的
        - Redis的缓存失效策略
        - Redis集群，高可用，原理
        - Redis缓存分片
        - Redis的数据淘汰策略
      - JVM
        - 详细jvm内存模型
        - 讲讲什么情况下回出现内存溢出，内存泄漏？
        - 说说Java线程栈
        - JVM 年轻代到年老代的晋升过程的判断条件是什么呢？5、JVM 出现 fullGC 很频繁，怎么去线上排查问题？6、类加载为什么要使用双亲委派模式，有没有什么场景是打破了这个模式？7、类的实例化顺序
        - JVM垃圾回收机制，何时触发MinorGC等操作
        - JVM 中一次完整的 GC 流程（从 ygc 到 fgc）是怎样的
        - 各种回收器，各自优缺点，重点CMS、G1
        - 各种回收算法
        - OOM错误，stackoverflow错误，permgen space错误
      - Nginx
        - 请列举 Nginx 的一些特性
        - 请解释 Nginx 如何处理 HTTP 请求。
        - 使用“反向代理服务器”的优点是什么?
        - 请列举 Nginx 服务器的最佳用途。
        - 请解释你如何通过不同于 80 的端口开启 Nginx?
        - 在 Nginx 中，解释如何在 URL 中保留双斜线?
    - Java多线程
      - CompletionStage
        "CompletionStage其实很好理解，按照官方定义，它表示一个可能异步运行的“阶段”，在该阶段内要执行相应的行为，而这些运算会在另一个CompletionStage完成后开始，它自身完成后又可触发另一个依赖的CompletionStage。
        在CompletionStage中这些方法均可用来定义一个行为，行为的执行方式可参考方法名和入参，这与java8中的stream api持同样的风格。行为参数可以是Consumer，Function，Runnable。包含accept的方法，参数会有一个Consumer，它会消费上一或多个CompletionStage的结果；包含run的方法，参数会有一个Runnable，它的运行不需要前面CompletionStage的执行结果；包含apply的方法，参数会包含Function，该function一般以前一或几阶段的返回值为入参，以自身的执行结果作为当前CompletionStage的结果。
        CompletionStage和实现类ComletableFuture的方法名中也会包含either/all/any等简单的单词，和上述的含义相组合，不难理解。"
    - 设计模式
      - 观察者设计模式 OK
        - Java中普通的observer和observable类都deprecated了
        - 基本知识
        - Flow响应式编程
          "在本指南中，您将学习Java 9中的Flow API如何帮助您使用新的Publisher和Subscriber构建反应模式。阅读之后，您应该能够理解这种新的编程风格及其优缺点。
          
          本指南重点介绍新的  Flow API，它使我们能够仅使用JDK采用Reactive Programming，而不需要其他库，如RxJava或Project Reactor等。
          
          但是，在看了API之后，你很快就会发现这个API由几个接口和一个实现组成：
          
          接口  Flow.Publisher <T>定义了生成项目和控制信号的方法。
          Flow.Subscriber <T> 接口  定义了接收这些消息和信号的方法。
          Flow.Subscription接口   定义了链接发布服务器和订阅服务器的方法。
          接口  Flow.Processor <T，R>定义了一些方法来执行一些高级操作，例如将项目的转换从发布者链接到订阅者。
          最后，SubmissionPublisher类  <T>实现了Flow.Publisher <T>，它是一个灵活的项目生成器，符合Reactive Streams计划。
          
          即使没有很多类可以使用，包括Java 9中的这个API也是一个重大变化：第三方可以为依赖于这些接口的库提供Reactive支持，例如从JDBC驱动程序到RabbitMQ的反应式实现。
          
          从Pull 到Push 再到Pull-Push
          
          反应式编程主要是消费者控制数据流，由于它集成在主要框架和库分发版（例如Java 9或Spring 5）中，它现在变得流行，并且分布式系统的兴起带来了大量的数据需要相互关联传达。
          
          回顾过去有助于我们了解其崛起。几年前，从消费者那里获取数据的最流行的技术是基于Pull 拉的机制。客户端定期轮询数据，如果可用，他们会读取数据。优点是，在资源较少的情况下，他们可以控制数据流（停止轮询）; 主要缺点是在没有任何消耗时通过轮询数据浪费处理时间和/或网络资源。
          
          随着时间的推移，趋势发生了变化，从生产者那里推送数据并让消费者照顾它变得很受欢迎。问题在于消费者可能拥有比生产者更有限的资源，在消费者缓慢和数据丢失的情况下最终会得到完整的输入缓冲。如果只发生在我们订阅者中的一小部分用户，这可能会很好，但是如果它发生在大多数用户身上呢？我们可以做得更好，减缓我们的生产者发布...
          
          Reactive Programming附带的混合推拉Pull-Push方法试图带来两全其美：它让消费者负责请求数据并控制来自发布者的流量，这也可以在阻止或丢弃数据时做出决定资源。我们将在下面看到一个很好的实际例子。
          
          Flow和Stream的区别
          
          应式编程并不是取代函数编程。两者兼容并且完美地协同工作。虽然Java 8中引入的Streams API非常适合处理数据流（map，reduce和所有变体），但Flow API会在通信方面（请求，减速，丢弃，阻塞等）发挥作用。
          
          您可以将Streams用作Publisher的数据源，根据需要阻止它们或删除项目。您也可以在订阅者身边使用它们，例如，在收到某些项目后执行聚合。更不用说所有其他的编程逻辑，其中反应流不适合，但它可以用函数式编写，并且比命令式编程的可读性和维护更容易十倍。
          
          有个困扰：如果你需要两个系统之间交换并转换数据怎么办？Stream和Flow如何一起工作？在这种情况下，我们可以使用Java 8函数将源映射到目标（转换它）但我们不能在发布者和订阅者之间使用Stream，对吗？
          
          我们可能会想到在两者之间创建一个订阅者，它从原始发布者那里获取项目，转换它，然后像发布者那样发布。好消息：这就是Java 9的Flow.Processor<T, R>模式， 所以我们只需要实现该接口并在那里编写函数来转换数据。
          
          就个人而言，我不喜欢全反应，  过度反应或成为反应性布道者（我无法决定具体的术语）。尽量不要为此疯狂。
          
          "
          - 案例
            "本指南中包含的示例代码模拟了Magazine Publisher用例。发布者只有两个订阅者。
            
            出版商将为每位订阅者制作一系列20种杂志。他们知道他们的读者在交货时通常不在家，他们想避免邮递员退回杂志或扔掉杂志。这可能发生，因为发布者知道订阅者的邮箱通常很小，无法放置更多邮件（订阅者的缓冲区）。-- 强大
            
            取而代之的是，他们实施了一个非常创新的交付系统：用户在他们在家时打电话给他们，他们几乎立即交付一本杂志。出版商计划在办公室为每位订阅者保留一个小盒子，以防有些人在发布杂志后不立即致电该杂志。经理认为在发行人办公室为每个订户保留最多8个杂志的空间已经足够了（注意缓冲区现在是如何在出版商那边）。
            
            于是一名员工提出了以下不同的场景：
            
            如果客户请求杂志足够迅速，将不会存在邮箱容量的问题。
            如果客户没有以杂志出版的速度发出请求，那么邮箱将被塞满。这位员工提出以下几种处理方案：
            a. 增加邮箱容量，为每位客户提供可容纳20份杂志的邮箱。（publisher增加buffer）
            b. 直到客户请求下一份杂志之前停止印刷，并且根据客户请求的速度降低印刷速度以清空邮箱。
            c. 新的杂志直接丢掉。
            d. 一个折中的方案： 如果邮箱满了，在下次打印之前等待一段时间，如果还是没有足够的空间则丢弃新的杂志。
            
            出版商无法承受花费过多的资源仅仅是因为一个速度慢的客户，那将是巨大的浪费，最终选择了方案d，最大程度上减少客户损失。
            
            本文示例代码中选用了方案d是因为如果我们使用了一个虚拟的无穷buffer，这对理解Reactive模式的中概念是不利的，代码也将变得过于简易，无法与其他方案进行比较，接下来让我们来看代码吧。
            
            
            "
    - 日本語聴解
      - 2019年12月9日　https://mp3cut.net/cn/
        - 1番（第11日）
          "男の人はばんごう案内に電話をかけました　2019120901
          男の人が知りない電話番号は何番ですか
          はい　104です　2019120902
          さくらホテルの電話番号をお願いします
          さくらホテルですか
          はい
          少々お待ちください。
          お問い合わせ番号は　03-3378-6241です
          ありがとうございました。"
        - 2番
          "女の学生と男の学生が話しています
          男の学生は誰と住んでいますか　2019120903
          山田さんはお父さんとお母さんと一緒に住んでいますか
          いいえ　両親は遠くに住んでいます　
          そうですか　
          今　姉と住んでいます
          兄妹は一人ですか
          あっ　弟もいますよ
          弟は両親と一緒です
          "
        - 3番
          "男の人と女の人が話しています
          パーティーはいつですか
          パーティーはいつですか
          えーと　四月四日です
          えっ　八日？
          いいえ　八日じゃなくて　四日です
          "
        - 4番
          "男の人と女の人が話しています
          男の人はいつまで休みですか
          いやぁ　昨日も今日もゆっくりしたね
          明日も休み？
          そう
          明後日は
          明後日からまた会社
          大変ね"
        - 5番
          "病院で医者と女の人が話しています
          女の人が一日に何回薬飲みますか
          この薬は　朝と夜　ご飯を食べたらとって飲んでください　2019120904
          昼ごはんのあとは　
          昼は飲まないでください
          はい
          四日間の飲んでくださいね
          分かりました"
        - 6番　0640まで
          "お母さんと男の子が話しています
          男の人はどこへ行きますか
          お母さんと　今日はスーパー行ってくる
          何を買うの
          アイスクリーム
          じゃ　先に田中さんに家にいって　この本を貸してくれる？　2019120905
          はい
          公園で
          遊んだりしないで　早く帰ってきなさいよ"
- 招聘相关
  - 网站
    - HUST 大学生就业信息网
      "https://job.hust.edu.cn/"
    - 牛客网
      "https://www.nowcoder.com/contestRoom"
  - 经验学习
    - 20200201 摘录
      "很多东西我只是看了一些但是完全没用过或者没写过可以写吗。我的回答是当然可以，这要看你的写法，你要写精通，那准备死就行了，你要写熟悉，可能也会被问死，但是你可以说自己正在研究哪一个方向，正在看哪一些技术栈等等。这样至少能看出你的兴趣点和规划。
      
      面试中本人比较喜欢问简历上做过的项目，至于为什么这里讲一下，如果简历上没有什么项目，或者描述极其简单，那么自然就是去问一些java底层实现，说实话，java知识体系如此庞大，运气不好问的问题一个答不上。
      
      如果有项目经历的话很多时候都会聊项目怎么实现，做了什么功能，用了什么技术栈，遇到什么问题，如何解决的等等，只要稍微准备一下就能很好回答。有人就说了假如没有项目经历怎么办，这个时候我只想说难道你在大学就从来没有做过学生管理系统。
      
      关于项目，一定要描述清楚项目的功能，以及你做的功能，还有就是用到了什么技术栈。同时对于项目要充分准备。有的同学被问到项目的时候回答很随意：其实就是做了一些的crud，没有太复杂。我只想说既然啥都没有你写上干嘛，你自己都瞧不上难道要我觉得你的项目很厉害。
      
      实习题型基本全是动态规划（尤其是背包问题）、图搜索
      
      至于压轴的动态规划题，记住4道例题，背包问题、矩阵链乘、最长上升子序列、最长公共子串，绝大多数（高达90%）的动态规划题都是这几个的变种。"
- 马上anki
  - 已保存
    - boolean 几个字节？
      "1.boolean 类型被编译成 int 类型来使用，占 4 个 byte 。
      
      2.boolean 数组被编译成 byte 数组类型，每个 boolean 数组成员占 1 个 byte
      
      3.在 Java 虚拟机里，1 表示 true ，0 表示 false 。
      
      4.这只是 Java 虚拟机的建议。
      
      5.可以肯定的是，不会是 1 个 bit 。
      
      来源： https://binkery.com/archives/34"
- 日期格式化
  - 默认格式 2020/1/29
- vue
  - 简介
    - 国内用vue比较多
    - vue /vju:/like view
    - 渐进式框架 可以嵌入
    - 视图&数据？ 前端路由技术？可复用组件 状态管理
    - 学习前提：HTML+CSS+JS
  - 使用
    - CDN引用 开发环境/生产版本 NPM?
    - WEBSTROME
  - 属性传值 {}加引号不解析，不加就会解析
    - v-for="(e,i) in movies"
      "v-for中的(e,i )可以被 :class 和 @click 看到"
    - :class="{active:classes[i]}"
    - @click="liClick(e,i)"
      "事件函数传参"
    - :style="{color: color}"
    - @click="liClick(i)"
    - 数组[i]无法监听，使用this.$set(this.arr,i,e);
    - key="XX" 防止虚拟dom复用
  - v-if/v-show
    - if-若false 删除dom
    - show-若false 样式隐藏
  - v-for="(e,i) in arr"
    - 点击变红 currentIndex
      "<ul>
          <li @click="currentIndex=i" 
              :class="{active : currentIndex === i}" 
              v-for="(e,i) in letters" 
              key="e">{{e}}</li>
      </ul>"
  - v-modal 表单绑定 双向绑定
- Head First JavaScript
- 梅瑟五書
  - 總論
    - 文學
      "書名
      	舊約前五經，希伯來人稱之爲忠告、法律
      五書
      	創世紀 出谷紀 肋未紀 戶籍紀 申命記
      内容
      	不是人類歷史，而是人類救贖史、神政史"
- 零れ記し
  - 大事年表-ゆがんでく
    - 小学
    - 初中 2008.9-2011.8
      "初一被人欺负，成绩倒数，初二左右成绩好起来，同时也没人欺负我了，初三过得很快乐。"
    - 高中 2011.9-2014.8
      "高一1109，第一次排名考试就起飞，受欢迎的一年？高二开始1116班，成绩越累越差。"
      - 高一
        "2011.8 “我只是路个过”——小怡出现在了我的个人贴吧"
      - 高二
        "2015.9 转班1116
        雅礼事件
        张家界事件"
      - 高三
    - 本科 2014.9-2018.8
      - 大一 2014.9-2015.9
      - 大二 2015.9-2016.9
        "2016.6 和甜玲分手"
      - 大三 2016.9-2017.9
      - 大四 2017.9-2018.9
    - 研究生2018.9-
  - 睡覺不帶手機 mp3準備好了 書 準備好了
  - 週末中午不能回寢室 因為有人不走 為了自己不受到影響 所以不能回去
  - 想和曉靈一起做點心。美味しい菓子できたら嬉しい20190721
  - 知心朋友。有一個感覺少了，有兩個就感覺多了。真奇怪20190721
  - 小狼和晓灵要在一起了，没有意外，却莫名的伤心到哭出来20190722
  - 不要脑补自己 因为最后总是感到恶心 想想那些美好的角色吧 20190723
- 摘抄
  - 生きているのも、悪くはないかも ーーさくらもゆ
- 牛精书虫
  - 诱拐
    - 简介
      "　1745年起苏格兰岁月艰难。苏格兰高地人向英格兰乔治国王发动了战争，但失败了。乔治国王的部队把很多苏格兰高地人赶出了他们的家园。
      
      　　来自苏格兰低地的戴维·鲍尔弗并不为英格兰部队而烦恼。当他离家去开始新生活时，他并没有预料到任何麻烦或危险。但是，麻烦很快接踵而至。他见到了他那很有钱的叔叔，但他叔叔获悉自己有这样一个穷侄子时一点儿也不高兴。危险一个接一个。戴维来到苏格兰高地，在那儿他遇见了艾伦·布雷克，一个骄傲的斯图尔特人。斯图尔特人既恨英格兰人，又恨效忠乔治国王的坎贝尔人，所以艾伦对于戴维来说是一个危险的朋友。
      
      　　接着发生了一宗谋杀案。戴维和艾伦在荒山野岭上逃命……
      
      　　罗伯特·路易斯·史蒂文森于1850年生于苏格兰的爱丁堡。他受训成为一名律师，但21岁时他下决心要当一名作家。他的最著名的作品有：《诱拐》、《金银岛》和《化身博士》。1894年他在萨摩亚岛与世长辞。"
    - 读书笔记
      "David 17 父母去世，离开家乡
      father teacher Essendean
      Ebenezer Balfour
      ----------------
      when I shut the door of our house behind me for the last time
      With my plaid over my shoulder 格子呢; 毛呢; 方格花呢长披肩
      By midday 到中午
      bring it down 把它给毁掉
      Blood built it 它是用血筑成的
      lifted my hand 举起手
      mean-looking 恶意的凝视 形象猥琐 吝啬的样子
      He was a secretive man (思想、情感等) 不外露的; 惯于掩藏自己的; 有城府的; 他是个爱遮遮掩掩的人
      He did not speak much to me，but was clearly thinking hard． 他对我讲话不多，但很明显地他在使劲想什么
      Sending a stranger up those stairs in the dark was sending him straight to his death 让一个陌生人在黑暗中上那楼梯，就是把他直接送到死神面前
      He isn't well liked 他不招人喜欢
      I looked，unseeing，at the sea 我视而不见地望着大海
      
      
      "
    - 1 David meets his uncle
      "　　It was early in the month of June，1751，when I shut the door of our house behind me for the last time．All my life I had lived in the quiet little village of Essendean，in the Lowlands of Scotland，where my father had been the dominie，or schoolteacher．But now that he and my mother were both dead，I had to leave the house．The new dominie would soon arrive，and he would teach at the school and live in the dominie's house．So，although I was only seventeen，there was nowhere for me to live，and no reason for me to stay in Essendean．
      
      　　But my heart was beating with excitement as I walked down the road，because in my hand I carried the letter that my father had given me just before he died．‘Davie，’he had said，‘when I am dead，take this to the house of Shaws，near Cramond．That's where I came from，and that's where you must go．Put this letter into the hands of Ebenezer Balfour．’
      
      　　Balfour！The same name as my own！It was the first time I had heard of any of our family outside Essendean．
      
      　　So I decided to walk to Cramond，hoping that perhaps this Mr Balfour，in his fine big house，would receive me kindly，and help me to become a rich man one day．With my plaid over my shoulder，I walked fast up the hill away from the village．What an adventure，to leave that sleepy place，where nothing ever happened，and go to a great，busy house，to be with rich and important people of my own name and blood！But when I reached the top of the hill，I turned a little sadly，to take my last look at the dominie's house，and Essendean churchyard，where my father and mother lay．
      
      　　My journey northwards took almost two days．By midday on the second day I could see the smoking chimneys of Edinburgh in front of me，and soon I arrived in Cramond．
      
      　　Now I began to ask people on the road for the house of Shaws．Their answers worried me a little．Some people seemed surprised，some afraid，and some angry，when I spoke the name of Ebenezer Balfour．I could not understand this，but it was too far to go back to Essendean that day， and I wanted to find the rest of the Balfour family very much So I continued on my way，and when I met a dark，wild-looking woman coming towards me，I asked her where the house of Shaws was She took me to the top of the next hill，and showed me a large building standing alone in the bottom of the next valley．Although the fields around were green，and the farmland was excellent，the house itself looked unfinished and empty．Part of its roof was missing．There was no road to it，and no smoke coming from any of its chimneys，nor was there any garden． ‘That！’I cried．‘No，it can't be！’ ‘It is！’cried the woman angrily．‘That is the house of Shaws！Blood built it，blood stopped the building of if，and blood shall bring it down！Black is the heart of Ebenezer Balfour！Ye can tell him from me that I hope to see him die，and his house fall down around him！’ The woman turned and disappeared．I stood where she left me，shaking like a leaf，and looking down at the house for a long time．But when it began to get dark，I noticed some smoke coming out of the chimney，and felt a little more hope ful．‘There must be a fire，and cooking，and people in the house，’I thought．So I walked up to the front door．The house seemed locked up and unwelcoming，but there was fire light shining through the kitchen window，and I could hear someone talking quietly to himself．Bravely，I lifted my hand and knocked loudly on the strong wooden door．The house was suddenly silent，and there was no reply．I knocked and knocked，and shouted as loudly as I could．Finally，the win dow opened，and a man holding a gun put his head out．
      
      　　‘What do ye want？’he asked．
      
      　　‘I've come here with a letter for Mr Ebenezer Balfour of Shaws．Is he here？’
      
      　　‘Who is it from？’asked the man with the gun．
      
      　　‘That's none of your business，’I replied，getting angry．
      
      　　‘Well，put the letter down by the door，and leave．’
      
      　　‘I will not！’I answered sharply．‘I'm going to give it to Mr Balfour himself．The letter introduces me to him．’
      
      　　‘Who are ye then？’was the next question．
      
      　　‘I'm not ashamed of my name． It's David Balfour．’
      
      　　The man almost dropped his gun．After a long while，he asked in a changed voice，‘Is your father dead？’I was too surprised to answer，but he continued，‘Aye，he must be dead，and that's why ye have come．Well，man，I'll let ye in，’and he disappeared from the window．
      
      　　Now the door was unlocked，and a voice from the darkness said，‘Go into the kitchen and touch nothing．’I obeyed，while the man locked the heavy door carefully again．I found myself in the emptiest kitchen that I had ever seen．There was a fire，but no other light．On the table was a bowl of porridge and a glass of water，in front of the only chair．Around the walls were several locked chests．There was no other furniture．The man who now appeared in the kitchen was small，mean-looking and white-faced，between fifty and sev enty years old，and wearing a dirty old nightshirt．The worst thing about him was that he could neither take his eyes away from me，nor look straight into my face．
      
      　　‘If ye're hungry，’he said，‘ye can eat that porridge．It's grand food，porridge！Let me see the letter！’
      
      　　‘It's for Mr Balfour，not you，’I replied．
      
      　　‘And who do ye think I am？Give me Alexander's letter！Ye may not like me or my house or my porridge，but I'm your born uncle，Davie，my man！’
      
      　　This was the end of all my hopes．I was too tired and miser able to speak，so I silently gave him the letter，and sat down to eat the porridge．
      
      　　‘Your father's been dead a long time？’he asked，giving me a quick look from his sharp eyes．
      
      　　‘Three weeks，sir，’I said．
      
      　　‘He was a secretive man，Alexander was．Perhaps he didn't talk much about me？ Or about the house of Shaws？’
      
      　　‘I never knew he had a brother，sir，or ever heard the name of Shaws．’
      
      　　‘To think of that！’he replied．‘A strange man！’But he seemed very pleased，and began to look at me with more interest．Soon he jumped up and said，‘We're going to get on well，Davie！What's mine is yours，man，and what's yours is mine．Blood's thicker than water，and there's only ye and me of the name of Balfour． Now I'll show ye to your bed．’
      
      　　He took me up some dark stairs and showed me into a room．I could not see anything． ‘Can I have a light，sir？’I asked． ‘No，ye can't．No lights in this house！I'm afraid of fires，ye see．Good night to ye，Davie，my man．’And before I had time to reply，he pulled the door shut and locked it from the outside．The room was very cold，but luckily I had my plaid with me，so I covered myself with it like a blanket，and soon fell asleep．
      
      　　The next day my uncle and I had a small bowl of porridge and a glass of water for breakfast，lunch and supper．He did not speak much to me，but was clearly thinking hard．I often noticed him looking at me，while pretending to do something different， and he never left me alone in the kitchen with the locked chests，in which，I supposed，he kept his money．I did not like the way he looked at me，and began to wonder if he was a little crazy，and perhaps dangerous．
      
      　　After supper he said suddenly，‘Davie，I've been thinking．I promised your father a bit of money for ye before ye were born．A promise is a promise—and so I'm going to give ye…forty pounds！’ These last words seemed very painful to him．He added，in a kind of scream，‘Scots！’
      
      　　A Scottish pound was the same as an English shilling．I could see that his story was a lie，so I laughed at him，saying，‘Oh，think again，sir！English pounds，surely！’
      
      　　‘That's what I said，'replied my uncle quickly．‘Go outside for a moment，and I'll get the money for ye．’
      
      　　I was smiling as I went out，sure that he would give me nothing at all．It was a dark night，and I could hear wind in the hills．‘There may be thunder later，’I thought，not knowing how important the weather would be to me that night．
      
      　　But when my uncle called me in again，he counted thirty eight English pounds in gold into my hands．It clearly hurt him to do it，and he kept back the last two pounds，but I did not mind that．Surprised and pleased，I thanked him warmly．
      
      　　‘Now，’he said，looking cleverly at me，‘ye can give me something，Davie．I'm getting old now，and I need help．’
      
      　　‘Of course，sir，’I answered．‘What can I do？’
      
      　　‘Well，go outside and climb the stairs at the other end of the house，where the building isn't finished yet．Go up to the room at the top，and bring down the chest that ye'll find there．It's got valuable papers in it．’
      
      　　‘Can I have a light，sir？’I asked．
      
      　　‘No，’he said sharply．‘No lights in my house！’ ‘Very well，sir．Are the stairs good？’
      
      　　‘They're grand，’ said he．‘The stairs are grand．Out I went into the night．As I was feeling my way along the outside wall，there was a sudden flash of lightning，then darkness again．I found the stairs and started climbing．I was about fifteen metres above the ground，when there was another flash of lightning．That was lucky for me，because it showed me that the steps were uneven， and that I could easily fall to my death．‘These are the grand stairs！’I thought．‘Perhaps my uncle wants me to die！’Now I was very careful，and I felt each step with my hands before I put my foot on it．A few steps later my hand felt cold stone，and then nothing more．The stairs ended there，twenty metres above the ground．I felt cold with fear，when I thought of the danger that I had been in．Sending a stranger up those stairs in the dark was sending him straight to his death．
      
      　　Angrily，I turned and felt my way down．There was a crash of thunder，and suddenly the rain came down．At the bottom of the stairs I looked towards the kitchen，and could see，in the next flash of lightning，a figure standing still in the doorway，listening． When the thunder sounded again，louder than before，he ran back inside，and I followed as softly as I could．I found him sitting in the kitchen，drinking whisky straight from the bottle，and shaking with fear．Quietly I came up behind him，and，putting my hands sud denly on his shoulders，cried，‘Ah！’
      
      　　My uncle gave a kind of broken cry，and fell to the floor like a dead man．His face was a strange blue colour，and I began to think that he really was dead．At last his eyes opened，and he looked up and saw me．‘Oh man，are ye alive or a ghost？’he cried ‘Get me my medicine，Davie—it's for my heart．’I found the medicine bottle and gave him some．He soon began to look a little better． ‘Why did you lie to me？’I asked angrily．‘Why did you give me money？ And why did you try to kill me？ Answer me！’
      
      　　‘I'll tell ye tomorrow，Davie，I promise．Help me to bed now，will ye？’He still looked very ill，so I could not refuse．But this time I locked his bedroom door，and went to sleep in front of the kitchen fire．
      
      　　When I woke up in the morning，I felt very pleased with myself．‘He thinks he's cleverer than me，but he isn't！’I thought．When I let my uncle out of his room，I asked him again for an explanation After a while，he said，‘Davie，I have some business with a ship's captain at Queensferry．Now，we could walk over there，and when I've done my business，we could visit the lawyer，Mr Rankeillor．He'll answer all your questions．He's an honest man，and he knew your father．What do ye say to that？’
      
      　　I thought for a moment．I had never seen the sea，but had always wanted to！‘It's a grand idea，’I said．
      
      　　It was a morning's walk to Queensferry，Which was west of Edinburgh，but we did not say a word to each other on the way．Suddenly，at the top of a hill，we could see the Firth of Forth below us，blue and calm，with white sails on it．
      
      　　‘Ye see that public house？’asked my uncle．‘Captain Hoseason's there，to do business with me．There's the ship's boat on the beach，waiting to take him to the ship．And there's the ship itself！A grand ship！’
      
      　　I had to agree with him．The sailors were getting the ship ready for sailing，and I thought what an exciting adventure that would be—to sail away to a foreign country．
      
      　　We walked down the hill to the public house and met the captain there．He was a tall，dark，serious-looking man，who shook hands politely with me．Stupidly，I left these two men to their business，and ran down to the beach，to talk to the sailors and look at the boats．It was all new and very interest ing to me．
      
      　　As I was coming back，I met the owner of the public house．
      
      　　‘Good morning，’he said．‘Did ye come with Ebenezer？’
      
      　　‘I did，’I replied．‘He isn't well liked，I understand．’
      
      　　‘That's true，’he answered．‘Nobody speaks well of him．It all started with that story about Mr Alexander，his brother．’
      
      　　‘What story？’I asked．
      
      　　‘Oh，just that Ebenezer had killed him．Did ye never hear that？’
      
      　　‘And why would he kill my f—，I mean，Alexander？’
      
      　　‘To get the house，of course，the house of Shaws．’
      
      　　‘Aye，man？Was my—was Alexander older than Ebenezer？’
      
      　　‘Indeed he was！No other reason for killing him！’
      
      　　This was a great surprise to me！I had thought that my fa ther was the younger brother，and I now understood why my uncle had lied to me，and wanted to kill me．The house of Shaws had belonged to my father，not my uncle，and now I had inherited it．The poor country boy who had walked from Essendean was the owner of a fine house and farmland！My head was full of the wonderful things that I could do in my life，as I looked，unseeing，at the sea．
      
      　　Just then my uncle and the captain came out of the public house．The captain smiled in a friendly way as he spoke to me．‘Sir，’he said，‘Mr Balfour has told me a lot about ye．I'm only sorry I haven't time to get to know ye better．But I'd like ye to come on to my ship for half an hour，before we sail，and have a drink with me．’
      
      　　Now，more than anything in the world，I wanted to see the inside of a ship，but I remembered that I had to be careful．‘My uncle and I have to see the lawyer，sir，’I replied，‘so I'm afraid we may not have enough time．’
      
      　　‘Aye，aye，’he answered，‘I know，but ye see，the ship's boat can put ye both down near Rankeillor's house，after ye've seen the ship，so ye won't lose any time．’ Suddenly he said quietly in my ear，‘Watch out for the old man—he wants to hurt ye．Come and talk about it．’Putting his arm in mine，he said loudly，‘What can I bring ye back from my travels？ A friend of Mr Balfour's is a friend of mine！’
      
      　　By this time we were on the beach， and he was helping my uncle and me into the boat．I thought that I had found a good friend and helper，and I was very excited as we came closer to the great ship，full of busy，noisy sailors．The captain and I were the first to climb up the ship's side，and at the top the captain immediately put his arm through mine and began to talk about the ship．
      
      　　‘But where is my uncle？’I asked suddenly．I pulled myself away from the captain's arm，and ran to the side of the ship．Sure enough，there was the boat returning to Queensferry，with my uncle sitting in it．I screamed，‘Help， help！Murder！’and my uncle slowly turned to look at me．
      
      　　I did not see any more．Already strong hands were pulling me away．Then something hit my head；I saw a great flash of fire，and fell to the ground．"
    - 1 戴维见到了叔叔
      "　我最后一次关上身后我们家的那扇门时，那正是1751年6月的头几天。我一直生活在苏格兰低地的埃森丁这个安静的小村庄里。我的父亲曾经是那儿的教师。但既然他和我的母亲都去世了，我就不得不离开那幢房子。新教师很快就要到了，他将在学校里教课并住在供教师住的房子里。所以说虽然我只有17岁，但已经没有我的栖身之地了，我也没有理由待在埃森丁了。
      　　但是我走在路上时心激动地跳着，因为我手中拿着我父亲临终前给我的那封信。“戴维，”他曾说，“我去世以后，拿着这封信去克莱蒙德附近的肖家大院。那儿是我的出生地，也是你应该去的地方。把这封信亲手交给埃比尼泽·鲍尔弗。”
      　　鲍尔弗！和我一样的姓氏！这是我第一次听说埃森丁地域以外我的家族成员。
      　　于是我决定走到克莱蒙德去，盼着有一天这个鲍尔弗先生能在他的豪华的大房子里友好地接待我并帮我变成富人。方格肩巾披在肩上，我大步流星地走上山岗，离开了那个小村庄。离开那寂静的、从未发生过什么事的小村庄而去一个热闹的大宅院里与姓氏和血缘和我相同的、有钱有势的人待在一起，这可真是一次历险！但当我到达山顶时，我带着一丝悲哀转身看了最后一眼供教师住的房子和我父母长眠着的埃森丁墓地。
      　　我往北差不多走了两天。到第二天中午时我能看见前面爱丁堡冒烟的烟囱，很快我就到了克莱蒙德。
      　　我开始向路上的行人打听肖家大院。他们的回答使我心里有点儿担忧。当我说出埃比尼泽·鲍尔弗这个名字时，一些人显得惊讶，一些人恐惧，一些人愤怒。我不明白这个，但那天回埃森丁是太远了，而且我也特别想找到鲍尔弗家族其余的人。于是我继续走着走着；而且当我看见一位皮肤黝黑、看似野蛮的老妇人向我走过来时，我向她打听肖家大院在哪儿。她把我领到下一座小山的顶峰，指给我看下一个山谷里的一幢孤零零的建筑物。虽然四周的田野一片葱绿，庄稼长势很好，但那幢房子本身好像没有建完，也显得空旷。有部分屋顶不见了。没有路通到那儿，烟囱里没有烟冒出来，也没有花园。
      　　“那个？！”我惊呼着，“不，绝对不是！”
      　　“就是！”那个女人愤恨地说道，“那就是肖家！它是用血筑成的，血停止了修建，血还将把它给毁掉！埃比尼泽·鲍尔弗的心是黑的！你可以告诉他我说我希望看到他死了并看到他的房子塌下来把他给埋了！”
      　　那个女人转身不见了。我在她离开我之处站着原地不动，像一片树叶一样颤抖，久久地俯视着那幢房子。但当暮色开始降临时，我发现有烟从那幢房子的烟囱冒出来，便感到稍微有点希望了。“那里面一定有火，有人在做饭，也一定有人，”我心想。于是我走到前门。房子似乎紧锁着，不欢迎来访者的样子，但是厨房的窗口透着火光，而且我能听到屋里有人悄声自言自语。鼓起勇气，我举起手，在那扇结实的木门上大声地敲起来。屋子忽然间静了下来，没有人回答。我敲了又敲，还使劲地喊起来。最后，窗户开了，一个手握一枝枪的男人探出头来。
      　　“你要什么？”他问道。
      　　“我带来一封给埃比尼泽·鲍尔弗·肖先生的信。他在吗？”
      　　“谁的？”持枪的男人问道。
      　　“那与你无关。”我答道，变得生气了。
      　　“好，把信放到门边，走。”
      　　“我不！”我厉声答道，“我准备把信交给鲍尔弗先生本人。这封信把我引荐给他。”
      　　“那么，你是谁？”这是下一个问题。
      　　“我才不为我自己的名字而感到害臊呢。我叫戴维·鲍尔弗。”
      　　那个男人差一点把他的枪扔了。过了好一阵子，他才变了腔道问道：“你父亲去世了吗？”我因太惊讶了而回答不出来，但他继续道：“对，他一定是死了，那也是你来的原因。好吧，伙计，我会让你进来，”并从窗户那儿消失了。
      　　门现在打开了，黑暗中有个声音说道：“到厨房来，不准碰任何东西。”我照着他说的做了，与此同时那个男人小心翼翼地又把那扇沉沉的门锁上了。我发现自己站在我所见过的最空荡荡的厨房里。那儿有一堆火，但除此以外再没有别的光线了。唯一的一把椅子前的桌子上面放着一碗粥和一杯水。墙的四周摆放着几个锁着的柜子。除此以外，没有别的什么家具。现在在厨房里出现的那个男人身材矮小，形象猥琐，脸色苍白，约在五十岁到七十岁之间，穿着一件脏兮兮的旧睡衣。最糟糕的是他既不把视线从我身上移开，也不直视我的脸。
      　　“如果你饿了，”他说道，“你可以吃那碗粥。粥，可是好东西！让我看看信！”
      　　“信是给鲍尔弗先生的，不是给你的，”我说道。
      　　“那么你以为我是谁啊？把亚历山大的信给我！你可能不喜欢我、不喜欢我的房子或者不喜欢我的粥，但我是你的亲伯伯，戴维，我的伙计！”
      　　我所有的希望破灭了。我因太劳累、太难受而什么话也说不出来，于是我默默地把信交给他并坐下来喝粥。
      　　“你父亲死了很久了？”他一边问，一边用他那双厉害的眼睛飞快地扫视我。
      　　“三周了，先生，”我道。
      　　“他是个爱遮遮掩掩的人，对，亚历山大是。也许他没有怎么说起过我？或说起过肖家这房子？”
      　　“我从不知道他有一个兄弟，先生，也没听说过肖这个名字。”
      　　“想想看！”他回答道，“真是一个奇怪的人！”但是他看起来很高兴，并且也开始更饶有兴趣地打量着我。不一会儿他跳起身来，说道：“我们将会合得来的，戴维！我的就是你的，伙计，你的也是我的。血浓于水，鲍尔弗家只有你和我两个人。现在我要把你带到睡觉处去。”
      　　他带着我上了黑黝黝的楼梯，把我带到一个房间里。我什么也看不到。
      　　“我能有盏灯吗，先生？”我问道。
      　　“不，你不能。这房子里不准有灯！你明白我怕火。晚安，戴维，我的伙计。”我还没有来得及回答，他已把门关上并从外面锁上了。房间里很冷，但幸运的是我随身带着肩巾，于是我用它像用毯子一样地把自己盖起来，很快我便睡着了。
      　　第二天早、中、晚饭我和我的叔叔都只喝了一小碗粥和一杯水。他对我讲话不多，但很明显地他在使劲想什么。我经常注意到他一边假装干别的事一边看我，他也从来没有让我一个人单独待在放有锁着的柜子的厨房里。我想他一定在里面放了钱。我不喜欢他看我的那种样子，开始想他是不是有点神经不正常，而且或许是个危险人物。
      　　吃过晚饭他突然说：“戴维，我一直在思考。你出生前我曾答应过你父亲给你一点钱。承诺就是承诺——我现在要给你……40镑！”最后的话语对他来说显得非常痛苦。他用一种尖叫的声音补充道：“苏格兰镑！”
      　　一个苏格兰镑相当于一个英格兰先令。我能看得出他在说谎，于是我嘲笑他，说：“噢，再想想，先生！英镑，确定无疑！”
      　　“那是我说的。”我叔叔很快答道，“出去一会儿，我给你拿钱。”
      　　我出去时微笑着，敢肯定他什么也不会给我。夜晚天黑黑的，我能听到山野里的风声。“之后可能会打雷，”我想，不知道那晚的天气对我来说将是何等重要。
      　　但当我叔叔把我又叫进去时，他将价值38英镑的金币数着放在我的手里。显然他是不情愿那么做的，他扣了最后两个英镑，但是我没有在意。我又惊又喜，热烈地感谢他。
      　　“那么，”他狡黠地看着我说道，“你可以给我一些东西，戴维。我现在变老了，我需要帮助。”
      　　“当然可以，先生，”我回答道，“我能做什么？”
      　　“好的，出去，爬上在那个还未建完的房子的另一端的楼梯。爬到位于房子的顶层的房间去，把你在那儿发现的柜子拿下来。里面有重要的文件。”
      　　“我能点盏灯吗，先生？”我问道。
      　　“不，”他厉声说道，“我的房子里不能点灯！”
      　　“好吧，先生。楼梯是好的吗？”
      　　“好的，”他说，“楼梯是好的。”
      　　我走进夜色中。我沿着外墙摸索着时，一道闪电忽然闪过，紧接着又是黑黝黝的。我找到了楼梯并且开始爬起来。我已离地大约十五米高，这时又有一道闪电闪过。那对我来说是幸运的，因为它向我表明楼梯是不平的，我很容易摔死。“这就是不错的楼梯！”我想道，“我伯伯可能想让我死掉！”现在我很当心起来，踩每一脚前都用手仔细地摸摸踏脚处。又爬了几步之后，我的手碰到了冰冷的石头，然后再也没有东西了。搂梯到头了，离地20米高。我一想起我所处的险境就害怕得直发冷。让一个陌生人在黑暗中上那楼梯，就是把他直接送到死神面前。
      　　我气呼呼地掉转过头，摸索着往下爬。雷电轰鸣，忽然间下起雨来。我站在楼梯的底端往厨房看，借助下一道闪电的光亮看见一个人静静地站在门口倾听着。当雷声又响起而且雷声大过以前时，他跑回里面，我尽可能悄悄地跟着他。我发现他坐在厨房里，直接用酒瓶喝着威士忌，身体因害怕而在发抖。我轻轻地从他身后走上前去，忽然间把手放到他的肩上，大声叫道：“啊！”
      　　我叔叔急促地尖叫起来并摔倒在地上，像一个死人一样。他的脸色显现出一种奇怪的蓝色，我开始琢磨他是不是真的死了。最后他的双眼睁开了，他抬起头看着我。“噢，伙计，你到底是活着还是个幽灵？”他叫道。“把我的药给我，戴维——治疗我的心脏用的那种。”我找到药瓶，给了他一些药。他很快就开始看着好一点了。
      　　“你为什么对我扯谎？”我生气地问道。“你为什么给我钱？你为什么还想杀死我？回答我！”
      　　“明天我会告诉你的，戴维，我发誓。现在帮忙把我扶到床上，行吗？”他看起来仍病得很厉害，所以我不能拒绝。但这一次我锁上了他的卧室的门，然后在厨房的炉火前睡了。
      　　第二天早晨当我醒来时，我对自己感到很高兴。“他以为他比我聪明，但他不是！”我想。当我把我叔叔放出房间时，我又要他解释一下。过了一会儿，他说道：“戴维，我和昆斯费里的一个船长有笔生意。现在我们走到那儿去，我做完生意时我们可以拜访一下律师兰基勒先生。他将解答你所有的问题。他是一个诚实的人，他认识你父亲。那么做你意下如何？”
      　　我想了一下。我从未见过大海，但一直想见！“是个好主意，”我说道。
      　　昆斯费里位于爱丁堡西侧，我们走了一上午才到，但一路上我们没有互相说话。猛然，在山顶上，我们看见了下面的福斯湾，湛蓝湛蓝的，又风平浪静，白帆点点。
      　　“你看见了那个小酒店吗？”我叔叔问道，“霍齐亚森船长在那儿，要和我做生意。海滩上有船上的小艇，等着把他带到船上去。那就是那船本身！一条大船！”
      　　我得同意他的。水手们正在把船收拾停当以备远航。我想着远航去一个遥远的国度将是一次多么激动人心的历险啊。
      　　我们走下山到了小酒店，在那儿见到了船长。他是个大高个儿，皮肤黝黑，表情严肃。他有礼貌地和我握握手。傻呵呵地，我让这两个人去干他们自己的事，自己跑到海滩上去和水手们聊天并去看那些小艇。这对我来说都是新鲜事，都很令人感兴趣。
      　　我正往回走时，遇到了小酒店的主人。
      　　“早晨好。”他说道，“你是和埃比尼泽一块来的吗？”
      　　“是的，”我回答道，“他不招人喜欢，我明白。”
      　　“那是真的。”他回答道，“没有人说他好话。这得从他兄弟亚历山大的故事说起。”
      　　“什么故事？”我问道。
      　　“噢，就是埃比尼泽杀害了他。你从未听说过那事吗？”
      　　“他为什么要杀我父——我是说，亚历山大？”
      　　“当然是为了房子，肖家大院。”
      　　“伙计，什么？难道我的——亚历山大比埃比尼泽年长吗？”
      　　“他就是！杀他再也没有别的原因了！”
      　　这对我来说真是件惊奇事！我过去一直以为我父亲是年幼的兄弟，现在我明白了为什么我的叔叔对我扯了谎而且要杀死我。肖家大院本来属于我父亲，不是我叔叔的，现在我继承了它。从埃森丁走出来的可怜的乡下男孩成了大房子和农田的主人！我视而不见地望着大海，脑袋里全是我想像的、我这一辈子可能干的美妙的事儿。
      　　正在那时我叔叔和船长从小酒店出来。船长边跟我说话边友好地冲我微笑。“先生，”他说道，“鲍尔弗先生告诉了我很多关于你的事。我只是感到有点遗憾，我没有足够的时间来更好地了解你。但是我想请你在我们开航前到我船上来半小时并和我喝上一杯。
      　　现在，在这个世界上我最想做的就是去看看船的内部构造，但是我记着我得小心。“我和我叔叔得去见律师，先生，”我答道，“所以恐怕我们可能没有足够的时间。”
      　　“对，对，”他回答道，“我知道，但是你明白，船上的小艇能够在你们看完之后让你们二人在兰基勒家附近的地方下船，所以你不会没时间的。”忽然间他对我轻声耳语道：“当心这个老家伙——他想害你。来谈谈。”他挽着我的臂，大声说：“我旅行回来给你带什么？鲍尔弗先生的朋友也是我的朋友！”
      　　到这时我们已在海滩上，他帮着我和叔叔进了小艇。我心想我找到了一个好朋友，一个可以帮忙的人；而且当我们更加走近到处是忙忙碌碌、吵吵嚷嚷的水手的大船时，我心里很激动。我和船长率先爬过船舷，在顶上船长立即用臂挽住我，开始谈起船来。
      　　“可我叔叔在哪儿？”我忽然间问道。我挣脱开船长挽我的胳膊，跑到船舷。千真万确，一艘小艇正驶回昆斯费里，我叔叔就坐在里边。我尖叫道：“救命，救命！有人要杀我！”而我叔叔慢慢地回头看看我。
      　　我再没看见什么。强有力的手已把我拖开了。接着什么东西打了我的头；我眼冒金星，接着倒在地上。"
- LeetCode -暂停-先学算法
  - 1-30
    - 13. Roman to Integer 罗马数字到整数
      - 题目
        "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
        
        Symbol       Value
        I             1
        V             5
        X             10
        L             50
        C             100
        D             500
        M             1000
        For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.
        
        Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
        
        I can be placed before V (5) and X (10) to make 4 and 9. 
        X can be placed before L (50) and C (100) to make 40 and 90. 
        C can be placed before D (500) and M (1000) to make 400 and 900.
        Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.
        
        Example 1:
        
        Input: "III"
        Output: 3
        Example 2:
        
        Input: "IV"
        Output: 4
        Example 3:
        
        Input: "IX"
        Output: 9
        Example 4:
        
        Input: "LVIII"
        Output: 58
        Explanation: L = 50, V= 5, III = 3.
        Example 5:
        
        Input: "MCMXCIV"
        Output: 1994
        Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."
      - 初步想法
        "流式思考，读入一个字母，转换为num
        尝试下一个字母，若之后的字母比它小，就加入sum+=num
        否则，sum-=num
        然后下一个字母放回去"
      - 我的代码
        "class Solution {
            public int romanToInt(String s) {
                int length = s.length();
                int num = 0;
                int nextNum = 0;
                int sum = 0;
                for (int i = 0; i < length - 1; i++) {
                    num = charToInt(s.charAt(i));
                    nextNum = charToInt(s.charAt(i + 1));
                    if (num >= nextNum) sum += num;
                    else sum -= num;
                }
                return sum + charToInt(s.charAt(length - 1));
            }
        
            public int charToInt(char c) {
                switch (c) {
                    case 'I':
                        return 1;
                    case 'V':
                        return 5;
                    case 'X':
                        return 10;
                    case 'L':
                        return 50;
                    case 'C':
                        return 100;
                    case 'D':
                        return 500;
                    case 'M':
                        return 1000;
                    default:
                        return 0;
                }
            }
        }"
      - 总结
        "简单题目，一步到位"
    - 14. Longest Common Prefix 最大公共前缀
      - 题目
        "Write a function to find the longest common prefix string amongst an array of strings.
        
        If there is no common prefix, return an empty string "".
        
        Example 1:
        
        Input: ["flower","flow","flight"]
        Output: "fl"
        Example 2:
        
        Input: ["dog","racecar","car"]
        Output: ""
        Explanation: There is no common prefix among the input strings.
        Note:
        
        All given inputs are in lowercase letters a-z."
      - 初步想法
        "从[0]开始一个个尝试就行了"
      - 我的代码
        "class Solution {
            public String longestCommonPrefix(String[] strs) {
                if(strs==null||strs.length==0)
                    return "";
                if(strs.length==1)
                    return strs[0];
                int i = 0;
                StringBuilder sb = new StringBuilder();
                while (true) {
                    for (int j = 0; j < strs.length - 1; j++) {
                        if (strs[j].length() <= i || strs[j + 1].length() <= i || strs[j].charAt(i) != strs[j + 1].charAt(i))
                            return sb.toString();
                    }
                    sb.append(strs[0].charAt(i));
                    i++;
                }
            }
        }"
      - 总结
        "一开始没有考虑null
        没有考虑[].lenth==1"
    - 20. Valid Parentheses 括号匹配
      - 题目
        "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
        
        An input string is valid if:
        
        Open brackets must be closed by the same type of brackets.
        Open brackets must be closed in the correct order.
        Note that an empty string is also considered valid.
        
        Example 1:
        
        Input: "()"
        Output: true
        Example 2:
        
        Input: "()[]{}"
        Output: true
        Example 3:
        
        Input: "(]"
        Output: false
        Example 4:
        
        Input: "([)]"
        Output: false
        Example 5:
        
        Input: "{[]}"
        Output: true"
      - 初步想法
        "利用栈，遇到左括号入栈，遇到右括号，出栈查看是否匹配
        最后空栈则返回true"
      - 我的代码
        "class Solution {
            public boolean isValid(String s) {
                final Stack<Character> stack = new Stack<>();
                for (int i = 0; i < s.length(); i++) {
                    char c = s.charAt(i);
                    if (isLeft(c))
                        stack.push(c);
                    else if (isRight(c)) {
                        if(stack.empty())
                            return false;
                        char t = stack.pop();
                        if (!isMatch(t, c))
                            return false;
                    } else
                        return false;
                }
                return stack.empty();
            }
        
            public boolean isMatch(char a, char b) {
                switch (a) {
                    case '(':
                        return b == ')';
        
                    case '[':
                        return b == ']';
        
                    case '{':
                        return b == '}';
        
                    default:
                        return false;
                }
            }
        
            public boolean isLeft(char a) {
                return a == '(' || a == '[' || a == '{';
            }
        
            public boolean isRight(char a) {
                return a == ')' || a == ']' || a == '}';
            }
        }"
      - 总结
        "想法没有问题"
    - 21. Merge Two Sorted Lists 合并两个有序列表
      - 题目
        "Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
        
        Example:
        
        Input: 1->2->4, 1->3->4
        Output: 1->1->2->3->4->4
        
        /**
         * Definition for singly-linked list.
         * public class ListNode {
         *     int val;
         *     ListNode next;
         *     ListNode(int x) { val = x; }
         * }
         */
        class Solution {
            public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
                
            }
        }"
      - 初步想法
        "简单题目，考虑周全即可"
      - 我的代码
        "/**
         * Definition for singly-linked list.
         * public class ListNode {
         *     int val;
         *     ListNode next;
         *     ListNode(int x) { val = x; }
         * }
         */
        class Solution {
            public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
                ListNode listNode = new ListNode(0);
                ListNode t = listNode;
                int a1, a2;
                while (l1 != null || l2 != null) {
                    if (l1 == null) {
                        t.next = l2;
                        break;
                    } else if (l2 == null) {
                        t.next = l1;
                        break;
                    } else {
                        a1 = l1.val;
                        a2 = l2.val;
                        if (a1 > a2) {
                            t.next = new ListNode(a2);
                            t = t.next;
                            l2 = l2.next;
                        } else {
                            t.next = new ListNode(a1);
                            t = t.next;
                            l1 = l1.next;
                        }
                    }
                }
                return listNode.next;
            }
        }"
      - 总结
        "判空很重要"
    - 26. Remove Duplicates from Sorted Array 原地数组去重
      - 题目
        "Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
        
        Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
        
        Example 1:
        
        Given nums = [1,1,2],
        
        Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
        
        It doesn't matter what you leave beyond the returned length.
        Example 2:
        
        Given nums = [0,0,1,1,1,2,2,3,3,4],
        
        Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.
        
        It doesn't matter what values are set beyond the returned length.
        Clarification:
        
        Confused why the returned value is an integer but your answer is an array?
        
        Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.
        
        Internally you can think of this:
        
        // nums is passed in by reference. (i.e., without making a copy)
        int len = removeDuplicates(nums);
        
        // any modification to nums in your function would be known by the caller.
        // using the length returned by your function, it prints the first len elements.
        for (int i = 0; i < len; i++) {
            print(nums[i]);
        }"
      - 我的想法
        "双指针元素交换即可，后指针遇到新数，就交换，然后前后移动"
      - 我的代码
        "class Solution {
            public int removeDuplicates(int[] nums) {
                if(nums.length==0)
                    return 0;
                if(nums.length==1)
                    return 1;
        
                int left = 0;
                int right;
                for (right = 1; right < nums.length; right++) {
                    if(nums[right]==nums[left])
                        continue;
                    else {
                        left++;
                        swap(nums,left,right);
                    }
                }
        
                return left+1;
            }
        
            public void swap(int[] arr,int i,int j){
                if(arr[i]==arr[j])
                    return;
                
                arr[i] = arr[i]^arr[j];
                arr[j] = arr[i]^arr[j];
                arr[i] = arr[i]^arr[j];
            }
        }"
      - 总结
        "swap一开始写错了！！
            public void swap(int[] arr,int i,int j){
                if(arr[i]==arr[j])
                    return;
                
                arr[i] = arr[i]^arr[j];
                arr[j] = arr[i]^arr[j];
                arr[i] = arr[i]^arr[j];
            }"
    - 27. Remove Element 原地去除指定元素
      - 题目
        "Given an array nums and a value val, remove all instances of that value in-place and return the new length.
        
        Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
        
        The order of elements can be changed. It doesn't matter what you leave beyond the new length.
        
        Example 1:
        
        Given nums = [3,2,2,3], val = 3,
        
        Your function should return length = 2, with the first two elements of nums being 2.
        
        It doesn't matter what you leave beyond the returned length.
        Example 2:
        
        Given nums = [0,1,2,2,3,0,4,2], val = 2,
        
        Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.
        
        Note that the order of those five elements can be arbitrary.
        
        It doesn't matter what values are set beyond the returned length.
        Clarification:
        
        Confused why the returned value is an integer but your answer is an array?
        
        Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.
        
        Internally you can think of this:
        
        // nums is passed in by reference. (i.e., without making a copy)
        int len = removeElement(nums, val);
        
        // any modification to nums in your function would be known by the caller.
        // using the length returned by your function, it prints the first len elements.
        for (int i = 0; i < len; i++) {
            print(nums[i]);
        }"
      - 我的想法
        "和26好像啊，但是有不同。首先搜索，是不同的才交换"
      - 我的代码
        "class Solution {
            public int removeElement(int[] nums, int val) {
                int left = 0;
                for (int i = 0; i < nums.length; i++) {
                    if (nums[i] != val) {
                        swap(nums, left, i);
                        left++;
                    }
                }
                return left;
            }
        
            public void swap(int[] arr, int i, int j) {
                if (i == j)
                    return;
        
                if (arr[i] == arr[j])
                    return;
        
                arr[i] = arr[i] ^ arr[j];
                arr[j] = arr[i] ^ arr[j];
                arr[i] = arr[i] ^ arr[j];
            }
        }"
      - 总结-无
    - 28. Implement strStr() kmp算法 匹配字符串
      - 题目
        "Implement strStr().
        
        Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
        
        Example 1:
        
        Input: haystack = "hello", needle = "ll"
        Output: 2
        Example 2:
        
        Input: haystack = "aaaaa", needle = "bba"
        Output: -1
        Clarification:
        
        What should we return when needle is an empty string? This is a great question to ask during an interview.
        
        For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr()and Java's indexOf()."
      - 想法
        "就是kmp算法，可是记不住，推一下？
        >>aabac
        >>aabaa
        "
      - 我的代码--暴力法 速度2ms
        "class Solution {
            public int strStr(String haystack, String needle) {
                        for (int i = 0; i < haystack.length()-needle.length()+1; i++) {
                    int j;
                    for (j = 0; j < needle.length(); j++) {
                        if(haystack.charAt(i+j)!=needle.charAt(j))
                            break;
                    }
                    if(j==needle.length())
                        return i;
                }
        
                return -1;
            }
        }"
      - 我的代码2--kmp 速度171ms
        "class Solution {
            public int strStr(String haystack, String needle) {
                if (needle.length() == 0)
                    return 0;
                if (haystack.length() == 0)
                    return -1;
        
                char[] h = haystack.toCharArray();
                char[] n = needle.toCharArray();
                int[] back = back(needle);
                int j = 0;
                for (int i = 0; i < h.length; ) {
                    if (h[i] == n[j]) {
                        if (j == n.length - 1) {
        //                    System.out.println("i = " + i);
        //                    System.out.println("j = " + j);
                            return i - n.length + 1;
                        }
                        i++;
                        j++;
                    } else {
        //                System.out.println("失配 i,j="+i+" "+j);
                        if (j == 0)
                            i++;
                        else {
                            if(isAllSame(n,0,j)&&h[i] == n[j-1]){
                                j--;
                            }else{
                                j -= back[j];
                            }
                        }
                    }
                }
        
                return -1;
            }
        
            public int[] back(String needle) {
                char[] n = needle.toCharArray();
                int[] arr = new int[(n.length > 2) ? n.length : 2];
                arr[0] = 0;
                arr[1] = 1;
        
                for (int j = 2; j < n.length; j++) {
                    if(isAllSame(n, 0, j)){
                        arr[j] = j;
        //                System.out.println("same+"+j);
                    }else {
                        arr[j] = j - longestMatch(n, 0, j);
                    }
        
        
        
                }
        
                return arr;
            }
        
            public boolean isAllSame(char[] arr, int s, int e){
                for (; s < e-1; s++) {
                    if(arr[s]!=arr[s+1])
                        return false;
                }
        //        System.out.println("s = " + s);
        //        System.out.println("e = " + e);
        //        System.out.println("same");
                return true;
            }
        
            public int longestMatch(char[] arr, int s, int e) {
                int max = 0;
                for (int len = 1; len < e - s; len++) {
                    if (isMarch(arr, s, e - len, len))
                        max = len;
                }
        //        System.out.println("longestMatch="+max);
                return max;
            }
        
            public boolean isMarch(char[] arr, int s1, int s2, int length) {
                for (int i = 0; i < length; i++) {
                    if (arr[s1 + i] != arr[s2 + i])
                        return false;
                }
                return true;
            }
        
            public int strStr1(String haystack, String needle) {
                for (int i = 0; i < haystack.length() - needle.length() + 1; i++) {
                    int j;
                    for (j = 0; j < needle.length(); j++) {
                        if (haystack.charAt(i + j) != needle.charAt(j))
                            break;
                    }
                    if (j == needle.length())
                        return i;
                }
        
                return -1;
            }
        }"
      - 我的代码3--java indexOf()中学到的暴力法
        "class Solution {
            public int strStr(String haystack, String needle) {
            if (needle.length() == 0)
                    return 0;
                if (haystack.length() == 0)
                    return -1;
        
                char[] h = haystack.toCharArray();
                int hlen = h.length;
                char[] n = needle.toCharArray();
                int nlen = n.length;
                int max = hlen - nlen + 1;
        
                char nfirst = n[0];
                for (int i = 0; i < max; i++) {
                    //找第一个字母匹配的
                    if (h[i] == nfirst) {
                        if (nlen == 1)
                            return i;
        
                        //开始匹配剩余字母
                        int s = i + 1;
                        int j = 1;
                        while ( j<nlen &&h[s] == n[j]) {
                            s++;
                            j++;
                        }
                        if (j == nlen)
                            return i;
                    }
                }
                return -1;
            
            }}"
      - 总结
        "kmp算法就是，失配时，让指针不移动到0，而是尽可能少移动一点
        利用的是前后缀相等关系
        
        喵：kpm算法理论漂亮而已"
  - 31-60
    - 35. Search Insert Position 有序表查找
      - 问题
        "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
        
        You may assume no duplicates in the array.
        
        Example 1:
        
        Input: [1,3,5,6], 5
        Output: 2
        Example 2:
        
        Input: [1,3,5,6], 2
        Output: 1
        Example 3:
        
        Input: [1,3,5,6], 7
        Output: 4
        Example 4:
        
        Input: [1,3,5,6], 0
        Output: 0"
      - 我的想法
        "二分查找"
      - 我的代码
        "class Solution {
            public int searchInsert(int[] nums, int target) {
                int right = nums.length-1;
                if(right==-1)
                    return 0;
                int left = 0;
                int mid = 0;
                while(right>=left){
                    mid = (right+left)/2;
                    if(nums[mid]==target)
                        return mid;
                    else if(nums[mid]>target)
                        right=mid-1;
                    else
                        left=mid+1;
                }
                return (left>mid)?left:mid;
            }
        }"
    - 38. Count and Say 数数1 11 21 1211..
      - 问题
        "The count-and-say sequence is the sequence of integers with the first five terms as following:1.     1
        2.     11
        3.     21
        4.     1211
        5.     111221
        1 is read off as "one 1" or 11.11 is read off as "two 1s" or 21.21 is read off as "one 2, then one 1" or 1211.Given an integer n where 1 ≤ n ≤ 30, generate the nth term of the count-and-say sequence.Note: Each term of the sequence of integers will be represented as a string. Example 1:Input: 1
        Output: "1"
        Example 2:Input: 4
        Output: "1211""
      - 初步想法
        "没看懂!!"
      - 查看网友解析
        "原来是数数字
        1-->一个1，写作11
        11-->两个1，写作21
        21->一个2，一个1，写作1211
        ..."
      - 我的代码
        "class Solution {
            public String countAndSay(int n) {
                String s = "1";
                StringBuilder sb = new StringBuilder(s);
                for (int i = 1; i < n; i++) {
                    sb.delete(0,sb.length());
                    int j = 0;
                    int count;
                    while (j<s.length()){
                        char ele = s.charAt(j);
                        count=1;
                        while (true){
                            j++;
                            if(j<s.length()&&ele==s.charAt(j)){
                                count++;
                            }else {
                                sb.append(count).append(ele);
                                break;
                            }
                        }
                    }
                    s=sb.toString();
                }
                return sb.toString();
            }
        }"
    - 53. Maximum Subarray 最大子序列和
      - 题目
        "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
        
        Example:
        
        Input: [-2,1,-3,4,-1,2,1,-5,4],
        Output: 6
        Explanation: [4,-1,2,1] has the largest sum = 6.
        Follow up:
        
        If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle."
      - 想法
        "经典题目，解法我都背下来了"
      - 我的代码
        "class Solution {
            public int maxSubArray(int[] nums) {
                int maxSum = 0;
                int curSum = 0;
                int max = Integer.MIN_VALUE;
                for (int i = 0; i < nums.length; i++) {
                    curSum+=nums[i];
                    if(curSum<0)
                        curSum=0;
                    if(curSum>maxSum)
                        maxSum=curSum;
                    if(nums[i]>max)
                        max=nums[i];
                }
                
                if(maxSum==0)
                    return max;
                
                return maxSum;
            }
        }"
      - 总结-经典啊
    - 58. Length of Last Word 句子中最后一个单词的长度
      - 题目
        "Given a string s consists of upper/lower-case alphabets and empty space characters ' ', return the length of last word in the string.If the last word does not exist, return 0.Note: A word is defined as a character sequence consists of non-space characters only.Example:Input: "Hello World"
        Output: 5"
      - 我的想法-无
      - 我的代码
        "class Solution {
            public int lengthOfLastWord(String s) {
                if(s.length()==0)
                    return 0;
                
                int i = s.length()-1;
                while(i>0&&s.charAt(i)==' ')
                    i--;
                int j = i;
                while (j>0&&s.charAt(j)!=' ')
                    j--;
                
                if(s.charAt(j)!=' ')
                    return i-j+1;
        
                return i-j;
            }
        }"
      - 总结-有点恶心
  - 61-90
    - 66. Plus One 数组表示的数{4,2,9}，加1 = {4,3,0}
      - 题目
        "Given a non-empty array of digits representing a non-negative integer, plus one to the integer.
        
        The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.
        
        You may assume the integer does not contain any leading zero, except the number 0 itself.
        
        Example 1:
        
        Input: [1,2,3]
        Output: [1,2,4]
        Explanation: The array represents the integer 123.
        Example 2:
        
        Input: [4,3,2,1]
        Output: [4,3,2,2]
        Explanation: The array represents the integer 4321."
      - 我的想法：注意进位
      - 我的代码
        "class Solution {
            public int[] plusOne(int[] digits) {
                int carry = 0;
                int add = 1;
                for (int i = digits.length-1; i >= 0; i--) {
                    digits[i] = digits[i]+add+carry;
                    add=0;carry=0;
                    if(digits[i]>=10){
                        digits[i]-=10;
                        carry=1;
                    }
                }
        
                if(carry==1){
                    int[] a = new int[digits.length+1];
                    a[0]=1;
                    return a;
                }
                return digits;
            }
        }"
    - 67. Add Binary 字符串表示的二进制数，相加，返回字符串
      - 题目
        "Given two binary strings, return their sum (also a binary string).
        
        The input strings are both non-empty and contains only characters 1 or 0.
        
        Example 1:
        
        Input: a = "11", b = "1"
        Output: "100"
        Example 2:
        
        Input: a = "1010", b = "1011"
        Output: "10101""
      - 我的代码
        "class Solution {
            public String addBinary(String a, String b) {
                int[] arr = new int[Math.max(a.length(),b.length())+1];
                int[] brr = new int[Math.max(a.length(),b.length())+1];
        
                int j = arr.length-1;
                for (int i = a.length()-1; i >= 0; i--) {
                    arr[j--] = a.charAt(i) - '0';
                }
        //        Tools.printIntArr(arr);
                j = arr.length-1;
                for (int i = b.length()-1; i >= 0; i--) {
                    brr[j--] = b.charAt(i) - '0';
                }
        //        Tools.printIntArr(brr);
        
                int carry = 0;
        
                for (int i = arr.length-1; i >= 0; i--) {
                    arr[i]+=brr[i]+carry;
                    if(arr[i]>=2){
                        arr[i]-=2;
                        carry=1;
                    }else
                        carry=0;
                }
        
                int i = 0;
                while(i<arr.length&&arr[i]==0)
                    i++;
        
                StringBuilder stringBuilder = new StringBuilder(arr.length-i);
                for (; i < arr.length; i++) {
                    stringBuilder.append(arr[i]);
                }
        
                
                
                return stringBuilder.length()==0?"0":stringBuilder.toString();
            }
        }"
      - 总结-恶心恶心真恶心
    - 69. Sqrt(x) 实现开方算法
      - 题目
        "Implement int sqrt(int x).
        
        Compute and return the square root of x, where x is guaranteed to be a non-negative integer.
        
        Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.
        
        Example 1:
        
        Input: 4
        Output: 2
        Example 2:
        
        Input: 8
        Output: 2
        Explanation: The square root of 8 is 2.82842..., and since 
                     the decimal part is truncated, 2 is returned."
      - 不想做了
        "class Solution {
            public int mySqrt(int x) {
                return (int)Math.sqrt((double)x);
            }
        }"
    - 70. Climbing Stairs 爬梯子，一次可以走1/2台阶，问多少种走法
      - 题目
        "You are climbing a stair case. It takes n steps to reach to the top.
        
        Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
        
        Note: Given n will be a positive integer.
        
        Example 1:
        
        Input: 2
        Output: 2
        Explanation: There are two ways to climb to the top.
        1. 1 step + 1 step
        2. 2 steps
        Example 2:
        
        Input: 3
        Output: 3
        Explanation: There are three ways to climb to the top.
        1. 1 step + 1 step + 1 step
        2. 1 step + 2 steps
        3. 2 steps + 1 step"
      - 我的想法
        "1 递归
        2 动态规划"
      - 我的代码
        "class Solution {
            int[] temp = new int[50];
            {
                temp[1] = 1;
                temp[2] = 2;
            }
        
            public int climbStairs(int n) {
                if(temp[n]!=0)
                    return temp[n];
        
                temp[n] = climbStairs(n-1)+climbStairs(n-2);
        
                return temp[n];
            }
        }"
    - 83. Remove Duplicates from Sorted List 移除链表重复项
      - 题目
        "Given a sorted linked list, delete all duplicates such that each element appear only once.
        
        Example 1:
        
        Input: 1->1->2
        Output: 1->2
        Example 2:
        
        Input: 1->1->2->3->3
        Output: 1->2->3"
      - 我的想法-不难，但是一定坑很多
      - 我的代码
        "/**
         * Definition for singly-linked list.
         * public class ListNode {
         *     int val;
         *     ListNode next;
         *     ListNode(int x) { val = x; }
         * }
         */
        class Solution {
            public ListNode deleteDuplicates(ListNode head) {
        if (head == null)
                    return head;
        
                ListNode currtentNode = head.next;
                ListNode pastNode = head;
                while (currtentNode != null) {
                    if (currtentNode.val == pastNode.val) {
                        if(currtentNode.next==null){
                            pastNode.next=null;
                        }
                    } else {
                        pastNode.next = currtentNode;
                        pastNode = pastNode.next;
                    }
        
        
                    currtentNode = currtentNode.next;
                }
        
                return head;
            }
        }"
      - 总结--确实费了精神
    - 88. Merge Sorted Array 合并有序数组
      - 题目
        "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
        
        Note:
        
        The number of elements initialized in nums1 and nums2 are m and n respectively.
        You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
        Example:
        
        Input:
        nums1 = [1,2,3,0,0,0], m = 3
        nums2 = [2,5,6],       n = 3
        
        Output: [1,2,2,3,5,6]"
      - 想法--应该很简单
        "一次通过!"
      - 我的代码
        "class Solution {
            public void merge(int[] nums1, int m, int[] nums2, int n) {
                int[] nums = new int[m+n];
                int i = 0;
                int j = 0;
                int k = 0;
                while (i < m && j < n) {
                    if(nums1[i]>nums2[j]){
                        nums[k] = nums2[j];
                        k++;
                        j++;
                    }else{
                        nums[k] = nums1[i];
                        k++;
                        i++;
                    }
                }
                //剩余项目
                while (i<m){
                    nums[k] = nums1[i];
                    k++;
                    i++;
                }
                while (j<n){
                    nums[k] = nums2[j];
                    k++;
                    j++;
                }
        
                for(i=0;i<nums.length;i++){
                    nums1[i]=nums[i];
                }
            }
        }"
  - 91-120
    - 100. Same Tree 判断两颗二叉树是否一样
      - 题目
        "Given two binary trees, write a function to check if they are the same or not.
        
        Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
        
        Example 1:
        
        Input:     1         1
                  / \       / \
                 2   3     2   3
        
                [1,2,3],   [1,2,3]
        
        Output: true
        Example 2:
        
        Input:     1         1
                  /           \
                 2             2
        
                [1,2],     [1,null,2]
        
        Output: false
        Example 3:
        
        Input:     1         1
                  / \       / \
                 2   1     1   2
        
                [1,2,1],   [1,1,2]
        
        Output: false"
      - 我的想法 - 一个个找即可
      - 我的代码
        "/**
         * Definition for a binary tree node.
         * public class TreeNode {
         *     int val;
         *     TreeNode left;
         *     TreeNode right;
         *     TreeNode(int x) { val = x; }
         * }
         */
        class Solution {
            public boolean isSameTree(TreeNode p, TreeNode q) {
                if(p==null||q==null)
                    return p==q;
                
                Stack<TreeNode> ps = new Stack<>();
                Stack<TreeNode> qs = new Stack<>();
                ps.push(p);
                qs.push(q);
                
                TreeNode pi;
                TreeNode qi;
                
                while ((!ps.empty())&&(!qs.empty())){
                    pi = ps.pop();
                    qi = qs.pop();
                    if(pi.val!=qi.val)
                        return false;
                    if(pi.left!=null){
                        if(qi.left==null)
                            return false;
                        ps.push(pi.left);
                        qs.push(qi.left);
                    }else if(qi.left!=null)
                        return false;
                    if(pi.right!= null){
                        if(qi.right==null)
                            return false;
                        ps.push(pi.right);
                        qs.push(qi.right);
                    }else if(qi.right!=null)
                        return false;
                }
                
                if(ps.empty()&&qs.empty())
                    return true;
                
                return false;
            }
        }"
    - 101. Symmetric Tree 判断二叉树是否对称
      - 题目
        "Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
        
        For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
        
            1
           / \
          2   2
         / \ / \
        3  4 4  3
         
        
        But the following [1,2,2,null,3,null,3] is not:
        
            1
           / \
          2   2
           \   \
           3    3
         
        
        Note:
        Bonus points if you could solve it both recursively and iteratively."
      - 我的想法 - 把上面的100题目 改一下就可以了
      - 我的代码
        "/**
         * Definition for a binary tree node.
         * public class TreeNode {
         *     int val;
         *     TreeNode left;
         *     TreeNode right;
         *     TreeNode(int x) { val = x; }
         * }
         */
        class Solution {
            public boolean isSymmetric(TreeNode root) {
                if(root==null)
                    return true;
                
                return isSameTree(root.left,root.right);
            }
        
            public boolean isSameTree(TreeNode p, TreeNode q) {
                if(p==null||q==null)
                    return p==q;
        
                Stack<TreeNode> ps = new Stack<>();
                Stack<TreeNode> qs = new Stack<>();
                ps.push(p);
                qs.push(q);
        
                TreeNode pi;
                TreeNode qi;
        
                while ((!ps.empty())&&(!qs.empty())){
                    pi = ps.pop();
                    qi = qs.pop();
                    if(pi.val!=qi.val)
                        return false;
                    if(pi.left!=null){
                        if(qi.right==null)
                            return false;
                        ps.push(pi.left);
                        qs.push(qi.right);
                    }else if(qi.right!=null)
                        return false;
                    if(pi.right!= null){
                        if(qi.left==null)
                            return false;
                        ps.push(pi.right);
                        qs.push(qi.left);
                    }else if(qi.left!=null)
                        return false;
                }
        
                if(ps.empty()&&qs.empty())
                    return true;
        
                return false;
            }
        }"
    - 104. Maximum Depth of Binary Tree 二叉树最大深度
      - 题目
        "Given a binary tree, find its maximum depth.
        
        The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
        
        Note: A leaf is a node with no children.
        
        Example:
        
        Given binary tree [3,9,20,null,null,15,7],
        
            3
           / \
          9  20
            /  \
           15   7
        return its depth = 3."
      - 我的想法-带着当前深度遍历树
      - 我的代码
        "/**
         * Definition for a binary tree node.
         * public class TreeNode {
         *     int val;
         *     TreeNode left;
         *     TreeNode right;
         *     TreeNode(int x) { val = x; }
         * }
         */
        class Solution {
            public int maxDepth(TreeNode root) {
                if (root == null)
                    return 0;
        
                ArrayList<Integer> list = new ArrayList<>();
        
                postorderTraversal2(root, list, 0);
                int maxDeep = 0;
                for (int t : list) {
                    if (t > maxDeep)
                        maxDeep = t;
                }
                return maxDeep;
            }
        
            private void postorderTraversal2(TreeNode t, ArrayList<Integer> list, int deep) {
                deep++;
                if (t.left != null)
                    postorderTraversal2(t.left, list, deep);
                if (t.right != null)
                    postorderTraversal2(t.right, list, deep);
                list.add(deep);
            }
        }"
    - 107. Binary Tree Level Order Traversal II 层序遍历二叉树
      - 题目
        "Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).For example:Given binary tree [3,9,20,null,null,15,7],    3
           / \
          9  20
            /  \
           15   7
        return its bottom-up level order traversal as:[
          [15,7],
          [9,20],
          [3]
        ]"
      - 我的想法 - 把104题目结合起来就好
      - 我的代码
        "/**
         * Definition for a binary tree node.
         * public class TreeNode {
         *     int val;
         *     TreeNode left;
         *     TreeNode right;
         *     TreeNode(int x) { val = x; }
         * }
         */
        class Solution {
            public List<List<Integer>> levelOrderBottom(TreeNode root) {
                List list = levelOrder(root);
                System.out.println(list);
                Collections.reverse(list);
                
                return list;
            }
            
            public static List<List<Integer>> levelOrder(TreeNode root){
                if (root == null)
                    return new ArrayList<>();
        
                List<Integer> list = new ArrayList<>();
                List<Integer> dlist = new ArrayList<>();
                inorderTraversal0(root, list);
                inorderTraversal0(root,dlist,0);
        
                List<List<Integer>> listList = new ArrayList<>(maxList(dlist)-1);
                System.out.println(dlist);
                for (int i = 0; i < maxList(dlist); i++) {
                    listList.add(new ArrayList<>());
                }
        
                for (int i = 0; i < list.size(); i++) {
                    int deep = dlist.get(i);
                    int val = list.get(i);
        
                    listList.get(deep-1).add(val);
                }
                return listList;
            }
            public static int maxList(List<Integer> list){
                int max = Integer.MIN_VALUE;
                for (int t : list) {
                    if (t > max)
                        max = t;
                }
                return max;
            }
            
            private static void inorderTraversal0(TreeNode t, List list) {
                list.add(t.val);
                if (t.left != null)
                    inorderTraversal0(t.left, list);
                if (t.right != null)
                    inorderTraversal0(t.right, list);
            }
        
            private static void inorderTraversal0(TreeNode t, List list, int deep) {
                deep++;
                list.add(deep);
                if (t.left != null)
                    inorderTraversal0(t.left, list, deep);
                if (t.right != null)
                    inorderTraversal0(t.right, list, deep);
            }
            
        }"
    - 108. Convert Sorted Array to Binary Search Tree
      - 题目
        "Given an array where elements are sorted in ascending order, convert it to a height balanced BST.
        
        For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
        
        Example:
        
        Given the sorted array: [-10,-3,0,5,9],
        
        One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:
        
              0
             / \
           -3   9
           /   /
         -10  5"
    - 110. Balanced Binary Tree
      - 题目
        "Given a binary tree, determine if it is height-balanced.
        
        For this problem, a height-balanced binary tree is defined as:
        
        a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
        
        Example 1:
        
        Given the following tree [3,9,20,null,null,15,7]:
        
            3
           / \
          9  20
            /  \
           15   7
        Return true.
        
        Example 2:
        
        Given the following tree [1,2,2,3,3,null,null,4,4]:
        
               1
              / \
             2   2
            / \
           3   3
          / \
         4   4
        Return false."
- 2019年4月前
  - 健身
    - 動作
      - 清早
        - 俯臥撐
          - 上斜俯臥撐 20181215-20181222
            "20181215-20181222 108cm臺子 光學平臺上進行 兩組40個沒有問題 但是呼吸控制需要加强
            計劃20181223- 在76cm小會議桌上進行
            之後在42cm 固定椅子進行"
          - 膝蓋俯臥撐-20181223-
        - 深蹲
          - 標準深蹲 20181215-20181222
          - 窄距深蹲-等待20181223-
        - 韧带
          - 触地前行5次20181218-20181224
          - 触地不前行，每次两次触地
          - 練習腰部力量
      - 睡前
        - 拉彈力繩
          - 練二頭肌又不傷手腕的好動作
        - 橋
          - 短橋 20181218-20181224
        - 韌帶
          - 坐臥體前屈
    - 囚徒健身
      - 俯臥撐
        "胸大肌、胸小肌、三角肌前束、肱三頭肌，另外身體軀幹很多肌肉得到靜力鍛煉
        身體直綫、雙腿并攏、最高點肘部不要鎖定
        呼吸：擡起呼氣，下降吸氣
        速度：先慢速"
        - 一、墻壁俯臥撐
        - 二、上斜俯臥撐-升級40*3
        - 三、膝蓋俯臥撐
      - 深蹲
        "三個關節彎曲，涉及的肌肉：
        髖關節：臀大肌、臀小肌、臀中肌
        膝蓋：股四頭肌（股外側肌、股中間肌、股直肌、股内側肌）
        脚踝"
        - 一、肩倒立深蹲
        - 二、摺刀深蹲
        - 三、支撐深蹲
        - 四、半身蹲
        - 五、標準深蹲-升級30*2
        - 六、窄距深蹲
        - 七、偏重深蹲
      - 橋
        "待補充"
    - 肌肉分佈
      - 手腕+手掌+手指
        - 手腕疼？
          "可能動作不對
          做前需要熱身？
          現在改成拉彈力繩，不再需要手腕力量"
      - 小臂
        "小臂的动作大多数都是通过腕关节来完成，这是一个小肌群，耐力性非常好。训练中我们一般不会用大重量，而是多次数接近力竭的来训练刺激我们的小臂。每个动作建议大家4组，每组15-20次，也可以到力竭。
        一種是手腕前彎曲，後彎曲；一種是手腕旋轉。
        從小重量開始。不要太重。"
      - 後臂
        - 肱二頭肌
          "小重量 力竭 身體不晃
          「肱二头肌作为一个小肌肉群，因此不需要像练胸、背、腿等大肌肉群那样，使用过大的重量。使用较轻的重量，只要确保动作规范和每组做到力竭其实更有利于肱二头肌的增长。」
          
          手腕不內扣 和小臂平行
          「一旦手腕内扣，手腕与小臂不平行。一方面，会导致小臂受力，并让小臂出现酸胀的感觉。小臂受力以后，则可能变粗；另一方面，肱二头肌受力被分散，训练效果会大大降低。最关键的是影响力量的传递，这样会增加手腕、肘部的伤病风险。」
          
          反復多次
          「肱二头肌作为典型的记吃不记打，歇会儿就有劲儿的小肌肉群。如果你想更快的增肌，你就必须把每组动作都做到力竭！」"
        - 肱三頭肌
        - 三角肌(見肩膀)
      - 肩膀+肩關節
        - 三角肌
      - 背部
      - 胸部
      - 腹部
        "鍛煉方法。上側腹肌：捲腹，左右觸脚踝；下側：擡腿，空中自行車。仰臥起坐損傷脊椎，禁止。"
      - 腰部
      - 臀部
      - 大腿
      - 膝關節
      - 小腿
      - 脚足
    - 跑步姿勢
      "怎麽輕鬆怎麽來。但是注意落地時不能直接腿直直的用膝蓋去緩衝。"
  - 20181224
    - 上午
      - JAVA多綫程OK
    - 下午
      - 矩陣論ok
      - 極簡醫學史ok
    - 晚上
      - 上课 单词 矩阵论
      - java 编程思想
      - java多线程OK
  - !俯臥撐——掌握呼吸 擡起呼氣，下降吸氣
  - 20181223晚上
    - 日記OK
    - 玩trinoline感受OK
    - java10页以上 输入输出 多线程OK
    - 背单词OK
    - java300集到这里OK
    - 不跑步OK
    - 轻度锻炼
  - !【報名失敗】2019年上半年全国计算机等级考试（湖北考区）将于3月30日—4月1日举行
  - 作息
    - 朝
      - 6時半起床（試試5點起床洗澡）
      - 7點半-鍛煉
      - 8點早餐
    - 午前-實驗室
      - JAVA和另外需要在電腦上完成的工作
      - 每小時休息一次
      - 11點半-西一蘇菜放題
    - 午後-圖書館
      - 計算機基礎等學習，看雜書（心理學、經濟學、哲學等）。
      - 每小時休息一次
    - 夜-實驗室
      - JAVA和老師的任務
      - 每小時休息一次
    - 寝る前
      - 10點半跑步，（引體向上？）
      - 11點半之前開鋪睡覺
  - !數字信號處理 報告論文20181218
    "交三個東西 電子版論文 電子版代碼 紙質版論文
    下學期開學前交2.16前
    多方案對比
    文檔很詳細
    1基波加上高次諧波加上噪聲
    設計濾波器 多方案對比
    
    2心電圖中去除工頻信號(原始測量信號老師會給)
    定位干擾信號的頻率 60Hz
    原始的 心電圖的 干擾信號的三個信號分開
    畫圖
    不同方案 比較效率 快速 精度 計算量 等
    高通 低通 帶通 陷波器 設定指標 一次二次高次
    可以用matlab裡面的庫函數 但是不能用FADtool
    
    3譜分析 確定太陽黑子週期
    譜分析方法 有各種方法 比較不同方法
    大波動 小波動 大小週期(先做原始信號分析 設計濾波)
    繞後再做譜分析
    
    4數字鎖相環
    啥東西？
    
    5其它略 信號提取 振盪譜分析"
  - !重裝電腦 備份之——等數字信號處理和弱信號檢測論文寫了再説
  - java particle simulation 開發任務&日誌
    - 20181201 解決實空間繪圖問題
      "隊列畫圖 坐標軸相等和不想等的切換"
    - 20181202 顏色
      "今天任務：
      磁場存儲方式重寫，改為最快，最不吃內存的double數組。重寫相關代碼。
      寫粒子起點畫圖
      寫幾何軌道設置和繪製，sampler的设置和绘图
      如果還有時間就移植單粒子運動代碼(多線程)
      還有sampler怎么检测的问题。"
  - !1月組會20180107
  - 20181226
    - 上午
      - OS听课
    - 下午
      - 矩阵论
    - 晚上
      - 翻译作业
      - java 线程10页
  - 20181225
    - 上午
      - JAVA noi 10页OK
      - mooc 1小时以上 操作系統3個OK
    - 下午
      - 矩陣論OK
    - 晚上
      - mooc 1小时以上OFF
        "进程"
  - !弱信號檢測 論文-1月組會結束後開始20181217
    "紙制版電子版 開學前交
    利用微弱信號檢測的理論和技術，詳細設計一種微弱信號檢測的具體應用》。下續期開學第一周上交即可。記得引用了參考文獻的，需要寫明。
    剩下几节课留给大家查资料，写论文或报告。论文电子文档请发至我的邮箱：likaich62@163.com，纸质文件交至西三楼214王孟昊。谢谢王孟昊！
    论文下学期开学第一周交，电子档发到老师邮箱，纸质档交至上图两个实验室之一。"
- 2019年4月
  - スケジュール 四月
    "清早：蛋白粉/豆浆，提书包10kg、俯卧撑20、半程单腿深蹲10
    上午：在实验室学习，需要用电脑的课程，老师的任务
    中午：背单词，写日记，记录昨天的工作
    下午：图书馆，看文献，文言文，看书，暂时看Java基础视频。以后图书馆带ipad和笔记本
    晚上：实验室。anki录入（包括软考背记），束流匹配，整理文献，CS"
    - フィットネス・鍛え
      "0423"
    - ダイエット
    - ユメ
    - 卒業するため
    - 他
  - 
  - default void forEach(Consumer<? super T> action)
  - default Spliterator<T> spliterator()
  - 这个学期只学 计算机原理 数据结构 Java
  - web不学了炉石传说 卸载！
  - 明天加入iterable接口学习
    "Interface Iterable<E>  
    boolean hasNext();
    default void remove()
    default void forEachRemaining(Consumer<? super E> action)
    @since 1.8"
  - 开始学习java数据结构 我终于来了！
  - 0423工作汇报 研二組
    "陈鹤鸣 cct
    洛伦兹力计算 cct磁场计算 
    研究目的 线圈对槽的作用力情况 大小 方向 
    机械设计
    
    解英才
    电离室
    
    李冠群
    kicker测磁系统
    
    我
    问题 四级铁有两处包络大
    15想办法降低一点点 间隔之类的 n值
    明天先把 包络打印写出来"
  - 整理 workflowy
  - 【日记改革】日记只包含 昨日感想 流水线 今日感想三部分
    "锻炼 学习 梦想放到单独项目中流水记录！"
  - 001文献 135度 20接受度 必读！！
    "嘘つかれた！😠"
  - ![計算機等級考試]准考证打印开始时间为：2019年3月17日08：00
  - 0321任务
    "情况：数据库紧急，MOOC紧急，秦老师紧急！！
    上午，图书馆
    	数据库2套3级
    	操作系统
    中午洗澡
    下午，图书馆
    	数据库2级2套
    	计算机网络
    晚上
    	秦老师！
    	整理
    
    必成！！！！
    "
  - !3月25日至4月1日期间登录游戏，炉石送卡包
  - 練筆
    - レム・ガレウ[異世界魔王と召喚少女の奴隷魔術]
    - 黒木智子[私がモテないのはどう考えてもお前らが悪い!]
  - 中国语文考试地点 8:30-11点
    "S301 S302 S303"
  - 任务
    - 20190405
      "上午 网络笔记的慕课 编程 数据结构
      下午 操作系统 网络
      晚上 程序员 htmlcss
      夜间 cosy"
    - 20190406
      "上午 计算机基础mooc--真的难
      下午 操作系统 网络
      晚上 程序员 数据结构mooc纸上谈兵"
  - 读1000页书计划
    - 日志
      - 2019年4月3日
        "26/1000
        程序员教程14P
        论文--[0]PSI_OpticsConceptForSCGantry_BasedonG2超导机架8P
        慕课程序的表示和转换4"
      - 2019年4月4日
        "69=43+26/1000
        程序员 9页
        java技术手册 32页
        英语阅读2页"
      - 2019年4月5日
        "199=130+69/1000
        少有人走的路10
        Java数据结构3
        mooc-IA-32指令系统概述20
        mooc操作系统4×5  20页
        慕课网络 三×五 15页
        程序员17页0
        headfirst html css 39P
        疯狂Java 6页"
      - 2019年4月6日
        "258=59+199/1000
        mooc计算机基础 4*5=20
        操作系统3*4=12
        网络4*4=16
        软考11页"
      - 2019年4月7日
        "325.5=67.5+258/1000
        mooc计算机基础 5*5=25
        慕课 操作系统 5*5=25
        慕课 网络 3.5*5=17.5"
      - 2019年4月8日
        "338.5=325.5+13/1000
        程序员 13P"
      - 2019年4月9日
        "373.5=338.5+35/1000
        程序员 20P
        mooc计算机原理3*5=15"
      - 2019年4月10日
        "408.5=35+373.5/1000
        mooc 计算机系统 2页
        程序员 33页
        MAP文献 6页"
      - 2019年4月11日
        "439.5=408.5+31
        软考 31页"
      - 2019年4月12日
        "454.5=439.1+15
        软考 15页"
      - 2019年4月13日
        "489.5=454.5+25+10
        软考 25
        慕课计算机系统 10"
      - 2019年4月17日
        "629
        程序员 140页"
    - 读书计划
      "程序员教程499P--四月份读完
      程序员考试同步辅导452P
      程序员12至17年试题分析545P
      //程序员考试5月25日考试
      MOOC课程，笔记一面==5P"
    - MOOC学习计划
      "1.计算机系统基础(一)：程序的表示、转换与链接
      	0402--第三周考试
      2.操作系统原理
      	4进程
      	5死锁
      3.数据结构
      	2线性表
      4.计算机网络技术
      	1234开课了
      5.Web前端开发
      	0325 HTML 等待
      6.Java核心技术——讨论区（10%）
      	等待 --第三章结束
      7.Java应用开发基础 课程讨论   得分占总评分数的5%。    参与讨论5次，此项可得满分。
      	开课了"
    - 历史啊历史。我在平板上已经花了3200块钱了
      "试错而已"
  - 聊齋誌異
    - 考城隍
      "宋公諱燾，邑庠生。一日，病臥，見吏人持牒，牽白顛馬來，云：「請赴試。」公言：「文宗未臨，何遽得考？」吏不言，但敦促之。公力疾乘馬從去。路甚生疏。至一城郭，如王者都。移時入府廨，宮室壯麗。上坐十餘官，都不知何人，惟關壯繆可識。檐下設几、墩各二，先有一秀才坐其末，公便與連肩。几上各有筆札。俄題紙飛下。視之，八字云：「一人二人，有心無心。」二公文成，呈殿上。公文中有云：「有心為善，雖善不賞；無心為惡，雖惡不罰。」諸神傳讚不已。召公上，諭曰：「河南缺一城隍，君稱其職。」公方悟，頓首泣曰：「辱膺寵命，何敢多辭？但老母七旬，奉養無人，請得終其天年，惟聽錄用。」上一帝王像者，即命稽母壽籍。有長鬚吏，捧冊翻閱一過，白：「有陽算九年。」共躊躇間，關帝曰：「不妨令張生攝篆九年，瓜代可也。」乃謂公：「應即赴任；今推仁孝之心，給假九年，及期當復相召。」又勉勵秀才數語。二公稽首並下。秀才握手，送諸郊野，自言長山張某。以詩贈別，都忘其詞，中有「有花有酒春常在，無燭無燈夜自明」之句。公既騎，乃別而去，及抵里，豁若夢寤。時卒已三日。母聞棺中呻吟，扶出，半日始能語。問之長山，果有張生，於是日死矣。後九年，母果卒。營葬既畢，浣濯入室沒。其岳家居城中西門內，忽見公鏤膺朱幩，輿馬甚眾，登其堂，一拜而行。相共驚疑，不知其為神。奔詢鄉中，則已歿矣。公有自記小傳，惜亂後無存，此其略耳。"
  - leetcode
    - 1. Two Sum(hash)
      "Given an array of integers, return indices of the two numbers such that they add up to a specific target.
      一个整数数列，返回两个索引，其值之和等于给定目标
      You may assume that each input would have exactly one solution, and you may not use the same element twice.
      可以认为解唯一，不能把同一个元素用两次
      
      Example:
      Given nums = [2, 7, 11, 15], target = 9,
      Because nums[0] + nums[1] = 2 + 7 = 9,
      return [0, 1]."
      - 20190218暴力枚举解法
        "class Solution {
            public int[] twoSum(int[] nums, int target) {
                int[] a = new int[2];
                for(int i = 0;i<nums.length;i++)
                {
                    for(int j = i+1;j<nums.length;j++)
                        if(nums[i]+nums[j]==target)
                        {
                            a[0]=i;
                            a[1]=j;
                            return a;
                        }
                }
                return a;
            }
        }
        
        标答：
        public int[] twoSum(int[] nums, int target) {
            for (int i = 0; i < nums.length; i++) {
                for (int j = i + 1; j < nums.length; j++) {
                    if (nums[j] == target - nums[i]) {
                        return new int[] { i, j };
                    }
                }
            }
            throw new IllegalArgumentException("No two sum solution");
        }
        
        Complexity Analysis
        
        Time complexity : O(n^2)O(n 
        2
         ). For each element, we try to find its complement by looping through the rest of array which takes O(n)O(n) time. Therefore, the time complexity is O(n^2)O(n 
        2
         ).
        
        Space complexity : O(1)O(1). "
      - 20190218学习
        "Approach 2: Two-pass Hash Table
        To improve our run time complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to look up its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.
        
        We reduce the look up time from O(n) to O(1) by trading space for speed. A hash table is built exactly for this purpose, it supports fast look up in near constant time. I say "near" because if a collision occurred, a look up could degenerate to O(n) time. But look up in hash table should be amortized O(1) time as long as the hash function was chosen carefully.
        
        A simple implementation uses two iterations. In the first iteration, we add each element's value and its index to the table. Then, in the second iteration we check if each element's complement (target - nums[i]) exists in the table. Beware that the complement must not be nums[i] itself!
        
        code:
        public int[] twoSum(int[] nums, int target) {
            Map<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < nums.length; i++) {
                map.put(nums[i], i);
            }
            for (int i = 0; i < nums.length; i++) {
                int complement = target - nums[i];
                if (map.containsKey(complement) && map.get(complement) != i) {
                    return new int[] { i, map.get(complement) };
                }
            }
            throw new IllegalArgumentException("No two sum solution");
        }
        
        
        Complexity Analysis:
        
        Time complexity : O(n). We traverse the list containing nn elements exactly twice. Since the hash table reduces the look up time to O(1), the time complexity is O(n).
        
        Space complexity : O(n). The extra space required depends on the number of items stored in the hash table, which stores exactly n elements. 
        
        
        Approach 3: One-pass Hash Table
        It turns out we can do it in one-pass. While we iterate and inserting elements into the table, we also look back to check if current element's complement already exists in the table. If it exists, we have found a solution and return immediately.
        
        code:
        public int[] twoSum(int[] nums, int target) {
            Map<Integer, Integer> map = new HashMap<>();
            for (int i = 0; i < nums.length; i++) {
                int complement = target - nums[i];
                if (map.containsKey(complement)) {
                    return new int[] { map.get(complement), i };
                }
                map.put(nums[i], i);
            }
            throw new IllegalArgumentException("No two sum solution");
        }
        
        
        Complexity Analysis:
        
        Time complexity : O(n). We traverse the list containing nn elements only once. Each look up in the table costs only O(1) time.
        
        Space complexity : O(n). The extra space required depends on the number of items stored in the hash table, which stores at most n elements."
      - 應該學習map——put、get、containsKey
      - 20180219学习了
        "class Solution {
            public int[] twoSum(int[] nums, int target)
            {
                Map<Integer,Integer> map=new HashMap<Integer,Integer>();
                for(int i=0;i<nums.length;i++)
                    map.put(nums[i],i);
        
                for(int i=0;i<nums.length;i++)
                {
                    if(map.containsKey(target-nums[i]))
                        return new int[] {i, map.get(target-nums[i])};
                }
        
                return nums;
            }
        }"
    - 2.Add Two Numbers(linklist)
      "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
      
      You may assume the two numbers do not contain any leading zero, except the number 0 itself.
      
      Example:
      Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
      Output: 7 -> 0 -> 8
      Explanation: 342 + 465 = 807.
      
      /**
       * Definition for singly-linked list.
       * public class ListNode {
       *     int val;
       *     ListNode next;
       *     ListNode(int x) { val = x; }
       * }
       */
      class Solution {
          public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
              
          }
      }"
      - 20190219好恶心地写出来了
        "犯的错误：
        1.进位忘了
        2.没考虑链表长度不同的情况
        
        Runtime: 21 ms, faster than 92.00% of Java online submissions for Add Two Numbers.
        Memory Usage: 48.2 MB, less than 100.00% of Java online submissions for Add Two Numbers.
        
        /**
         * Definition for singly-linked list.
         * public class ListNode {
         *     int val;
         *     ListNode next;
         *     ListNode(int x) { val = x; }
         * }
         */
        class Solution {
            public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
                int fd = 0;
                int ans = l1.val+l2.val+fd;
                if(ans>=10)
                {
                    ans-=10;
                    fd=1;
                }
                else
                    fd=0;
                
                ListNode l = new ListNode(ans);
                ListNode nl = l;
                while(l1.next!=null||l2.next!=null)
                {
                    if(l1.next!=null)
                        l1 = l1.next;
                    else
                        l1.val = 0;
                    
                    if(l2.next!=null)
                        l2 = l2.next;
                    else
                        l2.val = 0;
                    
                    
                    
                    ans = l1.val+l2.val+fd;
                    if(ans>=10)
                    {
                        ans-=10;
                        fd=1;
                    }
                    else
                        fd=0;
                
                    ListNode t = new ListNode(ans);
                    
                    nl.next = t;
                    nl = nl.next;
                }
                
                if(fd==1)
                {
                    ListNode t = new ListNode(fd);
                    nl.next = t;
                    //nl = nl.next;
                }
                
                return l;
            }
        }"
      - 标答——真的完美
        "Approach 1: Elementary Math
        Intuition
        
        Keep track of the carry using a variable and simulate digits-by-digits sum starting from the head of list, which contains the least-significant digit.
        
        
        
        Figure 1. Visualization of the addition of two numbers: 342 + 465 = 807342+465=807.
        Each node contains a single digit and the digits are stored in reverse order.
        
        Algorithm
        
        Just like how you would sum two numbers on a piece of paper, we begin by summing the least-significant digits, which is the head of l1l1 and l2l2. Since each digit is in the range of 0 \ldots 90…9, summing two digits may "overflow". For example 5 + 7 = 125+7=12. In this case, we set the current digit to 22 and bring over the carry = 1carry=1 to the next iteration. carrycarry must be either 00 or 11 because the largest possible sum of two digits (including the carry) is 9 + 9 + 1 = 199+9+1=19.
        
        The pseudocode is as following:
        
        Initialize current node to dummy head of the returning list.
        Initialize carry to 00.
        Initialize pp and qq to head of l1l1 and l2l2 respectively.
        Loop through lists l1l1 and l2l2 until you reach both ends.
        Set xx to node pp's value. If pp has reached the end of l1l1, set to 00.
        Set yy to node qq's value. If qq has reached the end of l2l2, set to 00.
        Set sum = x + y + carrysum=x+y+carry.
        Update carry = sum / 10carry=sum/10.
        Create a new node with the digit value of (sum \bmod 10)(summod10) and set it to current node's next, then advance current node to next.
        Advance both pp and qq.
        Check if carry = 1carry=1, if so append a new node with digit 11 to the returning list.
        Return dummy head's next node.
        Note that we use a dummy head to simplify the code. Without a dummy head, you would have to write extra conditional statements to initialize the head's value.
        
        Take extra caution of the following cases:
        
        Test case	Explanation
        l1=[0,1]l1=[0,1]
        l2=[0,1,2]l2=[0,1,2]	When one list is longer than the other.
        l1=[]l1=[]
        l2=[0,1]l2=[0,1]	When one list is null, which means an empty list.
        l1=[9,9]l1=[9,9]
        l2=[1]l2=[1]	The sum could have an extra carry of one at the end, which is easy to forget.
        
        Complexity Analysis
        
        Time complexity : O(\max(m, n))O(max(m,n)). Assume that mm and nn represents the length of l1l1 and l2l2 respectively, the algorithm above iterates at most \max(m, n)max(m,n) times.
        
        Space complexity : O(\max(m, n))O(max(m,n)). The length of the new list is at most \max(m,n) + 1max(m,n)+1.
        
        Follow up
        
        What if the the digits in the linked list are stored in non-reversed order? For example:
        
        (3 \to 4 \to 2) + (4 \to 6 \to 5) = 8 \to 0 \to 7(3→4→2)+(4→6→5)=8→0→7"
    - 3. Longest Substring Without Repeating Characters
      "Given a string, find the length of the longest substring without repeating characters.
      
      Example 1:Input: "abcabcbb"
      Output: 3 
      Explanation: The answer is "abc", with the length of 3. 
      
      Example 2:Input: "bbbbb"
      Output: 1
      Explanation: The answer is "b", with the length of 1.
      
      Example 3:Input: "pwwkew"
      Output: 3
      Explanation: The answer is "wke", with the length of 3. 
      
      Note that the answer must be a substring, "pwke" is a subsequence and not a substring."
      - 不难20190221
        "class Solution {
            public int lengthOfLongestSubstring(String s) {
                if(s==null||s.length()==0)
                    return 0;
                
                int maxLength = 1;
                int currentLength;
                int post = 0;
                int pre = 0;
        
                Map<Character,Integer> map = new HashMap<>();
                char[] chars = s.toCharArray();
        
                for(char c:chars)
                {
                    if(map.containsKey(c))
                    {
                        int newPost = map.get(c) + 1;
                        for(; post < newPost; post++)
                            map.remove(chars[post]);
                    }
        
                    map.put(c,pre);
        
                    currentLength = pre - post + 1;
                    if(currentLength>maxLength)
                        maxLength=currentLength;
        
                    pre++;
                }
        
                return maxLength;
            }
        }"
      - 标答
        "Solution
        Approach 1: Brute Force
        Intuition
        
        Check all the substring one by one to see if it has no duplicate character.
        
        Algorithm
        
        Suppose we have a function boolean allUnique(String substring) which will return true if the characters in the substring are all unique, otherwise false. We can iterate through all the possible substrings of the given string s and call the function allUnique. If it turns out to be true, then we update our answer of the maximum length of substring without duplicate characters.
        
        Now let's fill the missing parts:
        
        To enumerate all substrings of a given string, we enumerate the start and end indices of them. Suppose the start and end indices are ii and jj, respectively. Then we have 0 \leq i \lt j \leq n0≤i<j≤n (here end index jj is exclusive by convention). Thus, using two nested loops with ii from 0 to n - 1n−1 and jj from i+1i+1 to nn, we can enumerate all the substrings of s.
        
        To check if one string has duplicate characters, we can use a set. We iterate through all the characters in the string and put them into the set one by one. Before putting one character, we check if the set already contains it. If so, we return false. After the loop, we return true.
        
        code:
        public class Solution {
            public int lengthOfLongestSubstring(String s) {
                int n = s.length();
                int ans = 0;
                for (int i = 0; i < n; i++)
                    for (int j = i + 1; j <= n; j++)
                        if (allUnique(s, i, j)) ans = Math.max(ans, j - i);
                return ans;
            }
        
            public boolean allUnique(String s, int start, int end) {
                Set<Character> set = new HashSet<>();
                for (int i = start; i < end; i++) {
                    Character ch = s.charAt(i);
                    if (set.contains(ch)) return false;
                    set.add(ch);
                }
                return true;
            }
        }
        
        Complexity Analysis
        
        Time complexity : O(n^3)O(n 
        3
         ).
        
        To verify if characters within index range [i, j)[i,j) are all unique, we need to scan all of them. Thus, it costs O(j - i)O(j−i) time.
        
        For a given i, the sum of time costed by each j \in [i+1, n]j∈[i+1,n] is
        
        \sum_{i+1}^{n}O(j - i)∑ 
        i+1
        n
        ​	
         O(j−i)
        
        Thus, the sum of all the time consumption is:
        
        O\left(\sum_{i = 0}^{n - 1}\left(\sum_{j = i + 1}^{n}(j - i)\right)\right) = O\left(\sum_{i = 0}^{n - 1}\frac{(1 + n - i)(n - i)}{2}\right) = O(n^3)O(∑ 
        i=0
        n−1
        ​	
         (∑ 
        j=i+1
        n
        ​	
         (j−i)))=O(∑ 
        i=0
        n−1
        ​	
          
        2
        (1+n−i)(n−i)
        ​	
         )=O(n 
        3
         )
        
        Space complexity : O(min(n, m))O(min(n,m)). We need O(k)O(k) space for checking a substring has no duplicate characters, where kk is the size of the Set. The size of the Set is upper bounded by the size of the string nn and the size of the charset/alphabet mm. 
        
        
        Approach 2: Sliding Window
        Algorithm
        
        The naive approach is very straightforward. But it is too slow. So how can we optimize it?
        
        In the naive approaches, we repeatedly check a substring to see if it has duplicate character. But it is unnecessary. If a substring s_{ij}s 
        ij
        ​	
          from index ii to j - 1j−1 is already checked to have no duplicate characters. We only need to check if s[j]s[j] is already in the substring s_{ij}s 
        ij
        ​	
         .
        
        To check if a character is already in the substring, we can scan the substring, which leads to an O(n^2)O(n 
        2
         ) algorithm. But we can do better.
        
        By using HashSet as a sliding window, checking if a character in the current can be done in O(1)O(1).
        
        A sliding window is an abstract concept commonly used in array/string problems. A window is a range of elements in the array/string which usually defined by the start and end indices, i.e. [i, j)[i,j) (left-closed, right-open). A sliding window is a window "slides" its two boundaries to the certain direction. For example, if we slide [i, j)[i,j) to the right by 11 element, then it becomes [i+1, j+1)[i+1,j+1) (left-closed, right-open).
        
        Back to our problem. We use HashSet to store the characters in current window [i, j)[i,j) (j = ij=i initially). Then we slide the index jj to the right. If it is not in the HashSet, we slide jj further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index ii. If we do this for all ii, we get our answer.
        
        code:
        public class Solution {
            public int lengthOfLongestSubstring(String s) {
                int n = s.length();
                Set<Character> set = new HashSet<>();
                int ans = 0, i = 0, j = 0;
                while (i < n && j < n) {
                    // try to extend the range [i, j]
                    if (!set.contains(s.charAt(j))){
                        set.add(s.charAt(j++));
                        ans = Math.max(ans, j - i);
                    }
                    else {
                        set.remove(s.charAt(i++));
                    }
                }
                return ans;
            }
        }
        
        Complexity Analysis
        
        Time complexity : O(2n) = O(n)O(2n)=O(n). In the worst case each character will be visited twice by ii and jj.
        
        Space complexity : O(min(m, n))O(min(m,n)). Same as the previous approach. We need O(k)O(k) space for the sliding window, where kk is the size of the Set. The size of the Set is upper bounded by the size of the string nn and the size of the charset/alphabet mm. 
        
        
        Approach 3: Sliding Window Optimized
        The above solution requires at most 2n steps. In fact, it could be optimized to require only n steps. Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. Then we can skip the characters immediately when we found a repeated character.
        
        The reason is that if s[j]s[j] have a duplicate in the range [i, j)[i,j) with index j'j 
        ′
         , we don't need to increase ii little by little. We can skip all the elements in the range [i, j'][i,j 
        ′
         ] and let ii to be j' + 1j 
        ′
         +1 directly.
        
        Java (Using HashMap)
        
        
        Java (Assuming ASCII 128)
        
        The previous implements all have no assumption on the charset of the string s.
        
        If we know that the charset is rather small, we can replace the Map with an integer array as direct access table.
        
        Commonly used tables are:
        
        int[26] for Letters 'a' - 'z' or 'A' - 'Z'
        int[128] for ASCII
        int[256] for Extended ASCII
        
        Complexity Analysis
        
        Time complexity : O(n)O(n). Index jj will iterate nn times.
        
        Space complexity (HashMap) : O(min(m, n))O(min(m,n)). Same as the previous approach.
        
        Space complexity (Table): O(m)O(m). mm is the size of the charset."
      - final answer
        "public int lengthOfLongestSubstring(String s)
        {
            Map<Character,Integer> map = new HashMap<>();
            int ans=0;
        
            for(int i=0, j=0; i<s.length(); i++)//i>j [j,i)
            {
                if(map.containsKey(s.charAt(i)))
                    j = Math.max(j, map.get(s.charAt(i))+1);
        
                ans = Math.max(ans, i-j+1);
                map.put(s.charAt(i),i);
        
            }
            return ans;
        }"
      - 感受
        "我一开始也想到了“窗”和map
        但是我想的是，需要一个移除map中映射的过程
        打个比方
        	0 1 2 3 4
        	a b c d b
        一开始窗在abcd，接受下一个b之后，窗应该变成cdb
        这个毫无疑问，但是我认为需要移除map中的(a,0)和(b,1)，然后加入(b,4),最后窗从[0,4)变[2,5)。
        这样才能运用map.containsKey()方法
        
        其实可以不用，只要做出如下变化
        	窗尾 = map.get("a")+1;
        换成
        	窗尾 = Math.max( 窗尾,  map.get("a")+1);
        
        真强！！"
    - 4. Median of Two Sorted Arrays
      "There are two sorted arrays nums1 and nums2 of size m and n respectively.
      
      Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
      
      You may assume nums1 and nums2 cannot be both empty.
      
      Example 1:
      
      nums1 = [1, 3]
      nums2 = [2]
      
      The median is 2.0
      Example 2:
      
      nums1 = [1, 2]
      nums2 = [3, 4]
      
      The median is (2 + 3)/2 = 2.5
      Accepted
      381,067
      Submissions
      1,497,316
      Seen this question in a real interview before?"
      - 有点头晕，有序数列合并的问题呢
        "class Solution {
            public double findMedianSortedArrays(int[] nums1, int[] nums2) {
                int[] m = magitHalf(nums1,nums2);
                int length  = m.length;
                if(length%2==1)
                    return m[length/2];
                else
                    return (m[length/2]+m[length/2-1])/2.0;
            }
            
            public int[] magitHalf(int[] nums1, int[] nums2)
            {
                int[] m = new int[nums1.length+nums2.length];
                int i=0,j=0,k=0;
                while(k<=m.length/2)
                {
                    if(i==nums1.length||(j!=nums2.length&&nums1[i]>=nums2[j]))
                    {
                        m[k++]=nums2[j++];
                    }
                    else if(j==nums2.length||(i!=nums1.length&&nums1[i]<=nums2[j]))
                    {
                        m[k++]=nums1[i++];
                    }
                }
        
                return m;
            }
        }"
      - 网络答案
        "这道题让我们求两个有序数组的中位数，而且限制了时间复杂度为O(log (m+n))，看到这个时间复杂度，自然而然的想到了应该使用二分查找法来求解。但是这道题被定义为Hard也是有其原因的，难就难在要在两个未合并的有序数组之间使用二分法，如果这道题只有一个有序数组，让我们求中位数的话，估计就是个Easy题。那么我们可以将两个有序数组混合起来成为一个有序数组再做吗，图样图森破，这个时间复杂度限制的就是告诉你金坷垃别想啦。那么我们还是要用二分法，而且是在两个数组之间使用，感觉很高端啊。那么回顾一下中位数的定义，如果某个有序数组长度是奇数，那么其中位数就是最中间那个，如果是偶数，那么就是最中间两个数字的平均值。这里对于两个有序数组也是一样的，假设两个有序数组的长度分别为m和n，由于两个数组长度之和 m+n 的奇偶不确定，因此需要分情况来讨论，对于奇数的情况，直接找到最中间的数即可，偶数的话需要求最中间两个数的平均值。为了简化代码，不分情况讨论，我们使用一个小trick，我们分别找第 (m+n+1) / 2 个，和 (m+n+2) / 2 个，然后求其平均值即可，这对奇偶数均适用。加入 m+n 为奇数的话，那么其实 (m+n+1) / 2 和 (m+n+2) / 2 的值相等，相当于两个相同的数字相加再除以2，还是其本身。
        
        好，这里我们需要定义一个函数来在两个有序数组中找到第K个元素，下面重点来看如何实现找到第K个元素。首先，为了避免产生新的数组从而增加时间复杂度，我们使用两个变量i和j分别来标记数组nums1和nums2的起始位置。然后来处理一些corner cases，比如当某一个数组的起始位置大于等于其数组长度时，说明其所有数字均已经被淘汰了，相当于一个空数组了，那么实际上就变成了在另一个数组中找数字，直接就可以找出来了。还有就是如果K=1的话，那么我们只要比较nums1和nums2的起始位置i和j上的数字就可以了。难点就在于一般的情况怎么处理？因为我们需要在两个有序数组中找到第K个元素，为了加快搜索的速度，我们要使用二分法，那么对谁二分呢，数组么？其实要对K二分，意思是我们需要分别在nums1和nums2中查找第K/2个元素，注意这里由于两个数组的长度不定，所以有可能某个数组没有第K/2个数字，所以我们需要先check一下，数组中到底存不存在第K/2个数字，如果存在就取出来，否则就赋值上一个整型最大值。如果某个数组没有第K/2个数字，那么我们就淘汰另一个数字的前K/2个数字即可。有没有可能两个数组都不存在第K/2个数字呢，这道题里是不可能的，因为我们的K不是任意给的，而是给的m+n的中间值，所以必定至少会有一个数组是存在第K/2个数字的。最后就是二分法的核心啦，比较这两个数组的第K/2小的数字midVal1和midVal2的大小，如果第一个数组的第K/2个数字小的话，那么说明我们要找的数字肯定不在nums1中的前K/2个数字，所以我们可以将其淘汰，将nums1的起始位置向后移动K/2个，并且此时的K也自减去K/2，调用递归。反之，我们淘汰nums2中的前K/2个数字，并将nums2的起始位置向后移动K/2个，并且此时的K也自减去K/2，调用递归即可，参见代码如下：
        
        上面的解法一直使用的是原数组，同时用了两个变量来分别标记当前的起始位置。我们也可以直接生成新的数组，这样就不要用起始位置变量了，不过拷贝数组的操作可能会增加时间复杂度，也许会超出限制，不过就算当个思路拓展也是极好的。首先我们要判断数组是否为空，为空的话，直接在另一个数组找第K个即可。还有一种情况是当K = 1时，表示我们要找第一个元素，只要比较两个数组的第一个元素，返回较小的那个即可。这里我们分别取出两个数组的第K/2个数字的位置坐标i和j，为了避免数组没有第K/2个数组的情况，我们每次都和数组长度做比较，取出较小值。这里跟上面的解法有些许不同，上面解法我们直接取出的是值，而这里我们取出的是位置坐标，但是思想都是很类似的。不同在于，上面解法中我们每次固定淘汰K/2个数字，而这里我们由于取出了合法的i和j，所以我们每次淘汰i或j个。评论区有网友提出，可以让 j = k-i，这样也是对的，可能还更好一些，收敛速度可能会更快一些，参见代码如下：
        
        此题还能用迭代形式的二分搜索法来解，是一种相当巧妙的应用，讲解在这个帖子中写的十分清楚，等有时间我再来写写分析过程："
      - O(log(min(m,n)) solution
        "To solve this problem, we need to understand "What is the use of median". In statistics, the median is used for dividing a set into two equal length subsets, that one subset is always greater than the other. If we understand the use of median for dividing, we are very close to the answer.
        
        First let's cut A into two parts at a random position i:
        
              left_A             |        right_A
        A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]
        Since A has m elements, so there are m+1 kinds of cutting( i = 0 ~ m ). And we know: len(left_A) = i, len(right_A) = m - i . Note: when i = 0 , left_A is empty, and when i = m , right_A is empty.
        
        With the same way, cut B into two parts at a random position j:
        
              left_B             |        right_B
        B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]
        Put left_A and left_B into one set, and put right_A and right_B into another set. Let's name them left_part and right_part :
        
              left_part          |        right_part
        A[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]
        B[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]
        If we can ensure:
        
        1) len(left_part) == len(right_part)
        2) max(left_part) <= min(right_part)
        then we divide all elements in {A, B} into two parts with equal length, and one part is always greater than the other. Then median = (max(left_part) + min(right_part))/2.
        
        To ensure these two conditions, we just need to ensure:
        
        (1) i + j == m - i + n - j (or: m - i + n - j + 1)
            if n >= m, we just need to set: i = 0 ~ m, j = (m + n + 1)/2 - i
        (2) B[j-1] <= A[i] and A[i-1] <= B[j]
        ps.1 For simplicity, I presume A[i-1],B[j-1],A[i],B[j] are always valid even if i=0/i=m/j=0/j=n . I will talk about how to deal with these edge values at last.
        
        ps.2 Why n >= m? Because I have to make sure j is non-nagative since 0 <= i <= m and j = (m + n + 1)/2 - i. If n < m , then j may be nagative, that will lead to wrong result.
        
        So, all we need to do is:
        
        Searching i in [0, m], to find an object `i` that:
            B[j-1] <= A[i] and A[i-1] <= B[j], ( where j = (m + n + 1)/2 - i )
        And we can do a binary search following steps described below:
        
        <1> Set imin = 0, imax = m, then start searching in [imin, imax]
        
        <2> Set i = (imin + imax)/2, j = (m + n + 1)/2 - i
        
        <3> Now we have len(left_part)==len(right_part). And there are only 3 situations
             that we may encounter:
            <a> B[j-1] <= A[i] and A[i-1] <= B[j]
                Means we have found the object `i`, so stop searching.
            <b> B[j-1] > A[i]
                Means A[i] is too small. We must `ajust` i to get `B[j-1] <= A[i]`.
                Can we `increase` i?
                    Yes. Because when i is increased, j will be decreased.
                    So B[j-1] is decreased and A[i] is increased, and `B[j-1] <= A[i]` may
                    be satisfied.
                Can we `decrease` i?
                    `No!` Because when i is decreased, j will be increased.
                    So B[j-1] is increased and A[i] is decreased, and B[j-1] <= A[i] will
                    be never satisfied.
                So we must `increase` i. That is, we must ajust the searching range to
                [i+1, imax]. So, set imin = i+1, and goto <2>.
            <c> A[i-1] > B[j]
                Means A[i-1] is too big. And we must `decrease` i to get `A[i-1]<=B[j]`.
                That is, we must ajust the searching range to [imin, i-1].
                So, set imax = i-1, and goto <2>.
        When the object i is found, the median is:
        
        max(A[i-1], B[j-1]) (when m + n is odd)
        or (max(A[i-1], B[j-1]) + min(A[i], B[j]))/2 (when m + n is even)
        Now let's consider the edges values i=0,i=m,j=0,j=n where A[i-1],B[j-1],A[i],B[j] may not exist. Actually this situation is easier than you think.
        
        What we need to do is ensuring that max(left_part) <= min(right_part). So, if i and j are not edges values(means A[i-1],B[j-1],A[i],B[j] all exist), then we must check both B[j-1] <= A[i] and A[i-1] <= B[j]. But if some of A[i-1],B[j-1],A[i],B[j] don't exist, then we don't need to check one(or both) of these two conditions. For example, if i=0, then A[i-1]doesn't exist, then we don't need to check A[i-1] <= B[j]. So, what we need to do is:
        
        Searching i in [0, m], to find an object `i` that:
            (j == 0 or i == m or B[j-1] <= A[i]) and
            (i == 0 or j == n or A[i-1] <= B[j])
            where j = (m + n + 1)/2 - i
        And in a searching loop, we will encounter only three situations:
        
        <a> (j == 0 or i == m or B[j-1] <= A[i]) and
            (i == 0 or j = n or A[i-1] <= B[j])
            Means i is perfect, we can stop searching.
        
        <b> j > 0 and i < m and B[j - 1] > A[i]
            Means i is too small, we must increase it.
        
        <c> i > 0 and j < n and A[i - 1] > B[j]
            Means i is too big, we must decrease it.
        Thank @Quentin.chen , him pointed out that: i < m ==> j > 0 and i > 0 ==> j < n . Because:
        
        m <= n, i < m ==> j = (m+n+1)/2 - i > (m+n+1)/2 - m >= (2*m+1)/2 - m >= 0    
        m <= n, i > 0 ==> j = (m+n+1)/2 - i < (m+n+1)/2 <= (2*n+1)/2 <= n
        So in situation <b> and <c>, we don't need to check whether j > 0 and whether j < n.
        
        Below is the accepted code:
        
         def median(A, B):
            m, n = len(A), len(B)
            if m > n:
                A, B, m, n = B, A, n, m
            if n == 0:
                raise ValueError
        
            imin, imax, half_len = 0, m, (m + n + 1) / 2
            while imin <= imax:
                i = (imin + imax) / 2
                j = half_len - i
                if i < m and B[j-1] > A[i]:
                    # i is too small, must increase it
                    imin = i + 1
                elif i > 0 and A[i-1] > B[j]:
                    # i is too big, must decrease it
                    imax = i - 1
                else:
                    # i is perfect
        
                    if i == 0: max_of_left = B[j-1]
                    elif j == 0: max_of_left = A[i-1]
                    else: max_of_left = max(A[i-1], B[j-1])
        
                    if (m + n) % 2 == 1:
                        return max_of_left
        
                    if i == m: min_of_right = B[j]
                    elif j == n: min_of_right = A[i]
                    else: min_of_right = min(A[i], B[j])
        
                    return (max_of_left + min_of_right) / 2.0"
      - 有点难啊！！！自己写的 很冗余
        "public static int findInTwoOrderArray(int[] a, int[] b, int k)
        {
            if(k>a.length+b.length-1)
                throw new IndexOutOfBoundsException();
        
            if(a.length==0)
                return b[k];
        
            if(b.length==0)
                return a[k];
        
            int lengthA=a.length, lengthB=b.length;
            if(lengthB<lengthA)//lengthA must smaller than lengthB
            {
                int temp=lengthA;
                lengthA=lengthB;
                lengthB=temp;
        
                int[] temp2=a;
                a=b;
                b=temp2;
            }
        
            int numth = k+1;//numth is the number of left
            int maxI,maxJ,minI,minJ;
            if(numth<lengthA)
            {
                maxI=numth;     minI=0;
                maxJ=numth;     minJ=0;
            }
            else if(numth<lengthB)
            {
                maxI=lengthA;       minI=0;
                maxJ=numth;         minJ=numth-lengthA;
            }
            else
            {
                maxI=lengthA;       minI=numth-lengthB;
                maxJ=lengthB;       minJ=numth-lengthA;
            }
        
            //System.out.println("maxI = " + maxI);
            //System.out.println("minI = " + minI);
        
            int i,j;
            while(true)
            {
                i = (maxI+minI)/2;
                j = numth-i;
        
                if(i==lengthA&&j==lengthB)
                    return Math.max(a[i-1],b[j-1]);
        
                if(i==lengthA)
                {
                    if(a[i-1]<=b[j])
                        return Math.max(a[i-1],b[j-1]);
                    else
                        maxI=i;
        
                    continue;
                }
        
                if(j==lengthB)
                {
                    if(b[j-1]<=a[i])
                        return Math.max(a[i-1],b[j-1]);
                    else
                        minI=i-1;
                }
        
                if(i==0)
                {
                    if(b[j-1]<=(a[i]))
                        return b[j-1];
                    else
                        minI=i-1;
        
                    continue;
                }
                if(j==0)
                {
                    if(a[i-1]<=(b[j]))
                        return a[i-1];
                    else
                        maxI=i;
        
                    continue;
                }
        
                if(b[j-1]<=(a[i])&&a[i-1]<=(b[j]))
                    return Math.max(a[i-1],b[j-1]);
        
                if(b[j-1]<=(a[i]))
                    ;
                else
                {
                    minI=i+1;
                    continue;
                }
        
                if(a[i-1]<=(b[j]))
                    ;
                else
                {
                    maxI=i;
                    continue;
                }
            }
        }"
    - 5. Longest Palindromic Substring
      "Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.
      
      Example 1:
      
      Input: "babad"
      Output: "bab"
      Note: "aba" is also a valid answer.
      
      Example 2:
      
      Input: "cbbd"
      Output: "bb""
      - 枚举法 排名5%
        "public String longestPalindrome2(String s) {
            int len = s.length();
            String ans = s;
            int max = 0;
            for (int i = 0; i < len; i++) {
                for (int j = i + 1; j <= len; j++)
                    if (check(s.substring(i, j)) && max < j - i) {
                        max = j - i;
                        ans = s.substring(i, j);
                    }
            }
            return ans;
        }
        
        public boolean check(String s) {
            int len = s.length();
            if (len == 1) return true;
            for (int i = 0; i <= len / 2 - 1; i++) {
                if (s.charAt(i) != s.charAt(len - i - 1)) return false;
            }
            return true;
        }"
      - 左右试探法 排名70%——自己想出来的——已经是比较好的答案了
        "class Solution {
            public String longestPalindrome(String s) {
                int length = s.length();
                int max = 1;
                String ans = (s.length() == 0) ? s : s.substring(0, 1);
        
                for (int i = 1, core; i < 2 * length - 2; i++) {
                    core = i / 2;
                    //i is odd, core is gap
                    if (i % 2 == 1 && s.charAt(core) == s.charAt(core + 1)) {
                        String temp = longestPalindromeAtCore(core, core + 1, s);
                        if (temp.length() > max) {
                            max = temp.length();
                            ans = temp;
                        }
        
                        continue;
                    }
        
                    //i is even, s[core = i/2] is the core, then check s[core-1]==s[core+1]?
                    if (i % 2 == 0 && s.charAt(core - 1) == s.charAt(core + 1)) {
                        String temp = longestPalindromeAtCore(core - 1, core + 1, s);
                        if (temp.length() > max) {
                            max = temp.length();
                            ans = temp;
                        }
        
                        continue;
                    }
                }
        
                return ans;
            }
        
            //return longest Palindrome with core of s[i] and s[j], s[i]==s[j] is already true
            public String longestPalindromeAtCore(int i, int j, String s) {
                while (true) {
                    //walk to the starting point or end point, break
                    if (i == 0 || j == s.length() - 1)
                        break;
        
                    //if extend substring is Palindrome, extend i and j, or break
                    if (s.charAt(i - 1) == s.charAt(j + 1)) {
                        i--;
                        j++;
                    } else
                        break;
                }
        
                return s.substring(i, j + 1);
            }
        }"
      - 标答
        "Summary
        
        This article is for intermediate readers. It introduces the following ideas: Palindrome, Dynamic Programming and String Manipulation. Make sure you understand what a palindrome means. A palindrome is a string which reads the same in both directions. For example, SS = "aba" is a palindrome, SS = "abc" is not.
        
        Solution
        
        ________________________________________
        
        Approach 1: Longest Common Substring
        最大公共字符串
        
        Common mistake
        
        Some people will be tempted to come up with a quick solution, which is unfortunately flawed (however can be corrected easily):
        
        Reverse SS and become S'S′. Find the longest common substring between SSand S'S′, which must also be the longest palindromic substring.
        
        This seemed to work, let’s see some examples below.
        
        For example, SS = "caba", S'S′ = "abac".
        
        The longest common substring between SS and S'S′ is "aba", which is the answer.
        
        Let’s try another example: SS = "abacdfgdcaba", S'S′ = "abacdgfdcaba".
        
        The longest common substring between SS and S'S′ is "abacd". Clearly, this is not a valid palindrome.
        
        Algorithm
        
        We could see that the longest common substring method fails when there exists a reversed copy of a non-palindromic substring in some other part of SS. To rectify this, each time we find a longest common substring candidate, we check if the substring’s indices are the same as the reversed substring’s original indices. If it is, then we attempt to update the longest palindrome found so far; if not, we skip this and find the next candidate.
        
        This gives us an O(n^2)O(n2) Dynamic Programming solution which uses O(n^2)O(n2) space (could be improved to use O(n)O(n) space). Please read more about Longest Common Substring here.
        
         
        
        ________________________________________
        
        Approach 2: Brute Force
        
        The obvious brute force solution is to pick all possible starting and ending positions for a substring, and verify if it is a palindrome.
        
        Complexity Analysis
        
        Time complexity : O(n^3)O(n3). Assume that nn is the length of the input string, there are a total of \binom{n}{2} = \frac{n(n-1)}{2}(2n)=2n(n−1) such substrings (excluding the trivial solution where a character itself is a palindrome). Since verifying each substring takes O(n)O(n) time, the run time complexity is O(n^3)O(n3).
        
        Space complexity : O(1)O(1).
        
         
        
        ________________________________________
        
        Approach 3: Dynamic Programming
        
        To improve over the brute force solution, we first observe how we can avoid unnecessary re-computation while validating palindromes. Consider the case "ababa". If we already knew that "bab" is a palindrome, it is obvious that "ababa" must be a palindrome since the two left and right end letters are the same.
        
        We define P(i,j)P(i,j) as following:
        
        P(i,j) = \begin{cases} \text{true,} &\quad\text{if the substring } S_i \dots S_j \text{ is a palindrome}\\ \text{false,} &\quad\text{otherwise.} \end{cases}P(i,j)={true,false,if the substring Si…Sj is a palindromeotherwise.
        
        Therefore,
        
        P(i, j) = ( P(i+1, j-1) \text{ and } S_i == S_j )P(i,j)=(P(i+1,j−1) and Si==Sj)
        
        The base cases are:
        
        P(i, i) = trueP(i,i)=true
        
        P(i, i+1) = ( S_i == S_{i+1} )P(i,i+1)=(Si==Si+1)
        
        This yields a straight forward DP solution, which we first initialize the one and two letters palindromes, and work our way up finding all three letters palindromes, and so on...
        
        Complexity Analysis
        
        Time complexity : O(n^2)O(n2). This gives us a runtime complexity of O(n^2)O(n2).
        
        Space complexity : O(n^2)O(n2). It uses O(n^2)O(n2) space to store the table.
        
        Additional Exercise
        
        Could you improve the above space complexity further and how?
        
         
        
        ________________________________________
        
        Approach 4: Expand Around Center
        
        In fact, we could solve it in O(n^2)O(n2) time using only constant space.
        
        We observe that a palindrome mirrors around its center. Therefore, a palindrome can be expanded from its center, and there are only 2n - 12n−1 such centers.
        
        You might be asking why there are 2n - 12n−1 but not nn centers? The reason is the center of a palindrome can be in between two letters. Such palindromes have even number of letters (such as "abba") and its center are between the two 'b's.
        
        Complexity Analysis
        
        Time complexity : O(n^2)O(n2). Since expanding a palindrome around its center could take O(n)O(n) time, the overall complexity is O(n^2)O(n2).
        
        Space complexity : O(1)O(1).
        
         
        
        ________________________________________
        
        Approach 5: Manacher's Algorithm
        
        There is even an O(n)O(n) algorithm called Manacher's algorithm, explained here in detail. However, it is a non-trivial algorithm, and no one expects you to come up with this algorithm in a 45 minutes coding session. But, please go ahead and understand it, I promise it will be a lot of fun."
    - 6. ZigZag Conversion
      "The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
      
      P   A   H   N
      A P L S I I G
      Y   I   R
      And then read line by line: "PAHNAPLSIIGYIR"
      
      Write the code that will take a string and make this conversion given a number of rows:
      
      string convert(string s, int numRows);
      Example 1:
      
      Input: s = "PAYPALISHIRING", numRows = 3
      Output: "PAHNAPLSIIGYIR"
      Example 2:
      
      Input: s = "PAYPALISHIRING", numRows = 4
      Output: "PINALSIGYAHRPI"
      Explanation:
      
      P     I    N
      A   L S  I G
      Y A   H R
      P     I"
      - 一次成功 完美
        "class Solution {
            public String convert(String s, int numRows) {
                if(numRows==1)
                    return s;
        
                StringBuilder ans = new StringBuilder();
                int length = s.length();
                int step = 2*(numRows-1);
        
                for(int i=0;true;i+=step){
                    if(i<length)
                        ans.append(s.charAt(i));
                    else
                        break;
                }
        
                int subStep;
                int position;
                for(int i=1;i<numRows-1;i++){
                    subStep=i;
                    position=0;
                    for(int j=0;true;j++){
                        position+=subStep;
                        if(position<length)
                            ans.append(s.charAt(position));
                        else
                            break;
        
                        if(j%2==0)
                            subStep = step-2*i;
                        else
                            subStep = 2*i;
                    }
                }
        
                for(int i=step/2;true;i+=step){
                    if(i<length)
                        ans.append(s.charAt(i));
                    else
                        break;
                }
        
                return ans.toString();
            }
        }"
    - 7. Reverse Integer
      "Given a 32-bit signed integer, reverse digits of an integer.
      
      Example 1:
      
      Input: 123
      Output: 321
      Example 2:
      
      Input: -123
      Output: -321
      Example 3:
      
      Input: 120
      Output: 21
      Note:
      Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows."
      - 乱来
        "package leetcode;
        
        public class Solution7 {
            public static void main(String[] args) {
                System.out.println(new Solution7().reverse(-2147483648));
            }
        
            public int reverse(int x) {
                long sig = x>0? 1:-1;
                long y=x;
                y = Math.abs(y);
        
                String s = String.valueOf(y);
                int len = s.length();
                StringBuilder sb = new StringBuilder(len);
                for(int i=0;i<len;i++){
                    sb.append(s.charAt(len-1-i));
                }
        
                long ans = Long.parseLong(sb.toString())*sig;
                if((long)((int)ans)==ans)
                    return (int)ans;
                else
                    return 0;
            }
        }"
    - 8. String to Integer (atoi)
      "Implement atoi which converts a string to an integer.
      
      The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.
      
      The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.
      
      If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.
      
      If no valid conversion could be performed, a zero value is returned.
      
      Note:
      
      Only the space character ' ' is considered as whitespace character.
      Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.
      Example 1:
      
      Input: "42"
      Output: 42
      Example 2:
      
      Input: "   -42"
      Output: -42
      Explanation: The first non-whitespace character is '-', which is the minus sign.
                   Then take as many numerical digits as possible, which gets 42.
      Example 3:
      
      Input: "4193 with words"
      Output: 4193
      Explanation: Conversion stops at digit '3' as the next character is not a numerical digit.
      Example 4:
      
      Input: "words and 987"
      Output: 0
      Explanation: The first non-whitespace character is 'w', which is not a numerical 
                   digit or a +/- sign. Therefore no valid conversion could be performed.
      Example 5:
      
      Input: "-91283472332"
      Output: -2147483648
      Explanation: The number "-91283472332" is out of the range of a 32-bit signed integer.
                   Thefore INT_MIN (−231) is returned.
      "
      - 弄了很久
        "class Solution {
            public int myAtoi(String str) {
                //null or empty
                if(str==null||str.length()==0)
                    return 0;
        
                int ans = 0;
                int sig = 1;
                int num;
                boolean isBegin = false;
                boolean isOver = false;
                for(char c:str.toCharArray()){
                    //System.out.println("c = " + c);
                    
                    num = c-'0';
        
                    //System.out.println("num = " + num);
        
                    if(num==' '-'0'){
                        if(isBegin)
                            break;
                        else
                            continue;
                    }
        
                    //System.out.println("1");
        
                    if(num=='-'-'0'){
                        if(isBegin)
                            break;
        
                        isBegin=true;
                        sig*=-1;
        
                        continue;
                    }
                    //System.out.println("2");
        
                    if(num=='+'-'0'){
                        if(isBegin)
                            break;
        
                        isBegin=true;
        
                        continue;
                    }
        
                    //System.out.println("3");
        
                    if(num>9||num<0)
                        break;
                    else{
        
                        //System.out.println("4");
        
                        isBegin=true;
        
                        if(ans>Integer.MAX_VALUE/10)
                            isOver=true;
        
                        int temp = ans;
                        ans = ans * 10 + num;
                        if(ans<0||ans<temp)
                            isOver=true;
                    }
                }
        
                if(isOver){
                    if(sig==1)
                        return Integer.MAX_VALUE;
                    else
                        return Integer.MIN_VALUE;
                }
        
                return ans*sig;
            }
        }"
    - 9. Palindrome Number
      "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.
      
      Example 1:
      
      Input: 121
      Output: true
      Example 2:
      
      Input: -121
      Output: false
      Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
      
      
      Example 3:
      
      Input: 10
      Output: false
      Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
      Follow up:
      
      Coud you solve it without converting the integer to a string?"
      - 数组方法——不好！
        "public boolean isPalindrome(int x) {
            if(x<0)
                return false;
            if(x==0)
                return true;
        
            Map<Integer,Integer> map = new HashMap<>(String.valueOf(Integer.MAX_VALUE).length());
            for(int i=0;i<String.valueOf(Integer.MAX_VALUE).length();i++) {
                if (x > 0) {
                    map.put(i, x % 10);
                    x = x / 10;
                }
                else
                    break;
            }
            int size = map.size();
            for(int i=0;i<size/2;i++){
                if(map.get(i)!=map.get(size-1-i))
                    return false;
            }
        
            return true;
            }"
      - 标答
        "方法：反转一半数字
        思路
        
        映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。
        
        第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于 \text{int.MAX}int.MAX，我们将遇到整数溢出问题。
        
        按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转 \text{int}int 数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。
        
        例如，输入 1221，我们可以将数字“1221”的后半部分从“21”反转为“12”，并将其与前半部分“12”进行比较，因为二者相同，我们得知数字 1221 是回文。
        
        让我们看看如何将这个想法转化为一个算法。
        
        算法
        
        首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。
        
        现在，让我们来考虑如何反转后半部分的数字。 对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以10的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。 如果继续这个过程，我们将得到更多位数的反转数字。
        
        现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？
        
        我们将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于反转后的数字时，就意味着我们已经处理了一半位数的数字。"
    - 10.Regular Expression Matching
      "给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。
      
      '.' 匹配任意单个字符。
      '*' 匹配零个或多个前面的元素。
      匹配应该覆盖整个字符串 (s) ，而不是部分字符串。
      
      说明:
      
      s 可能为空，且只包含从 a-z 的小写字母。
      p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
      示例 1:
      
      输入:
      s = "aa"
      p = "a"
      输出: false
      解释: "a" 无法匹配 "aa" 整个字符串。
      示例 2:
      
      输入:
      s = "aa"
      p = "a*"
      输出: true
      解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。
      示例 3:
      
      输入:
      s = "ab"
      p = ".*"
      输出: true
      解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。
      示例 4:
      
      输入:
      s = "aab"
      p = "c*a*b"
      输出: true
      解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
      示例 5:
      
      输入:
      s = "mississippi"
      p = "mis*is*p*."
      输出: false"
      - 
  - 周總結/計劃
    - 20181202-20181208 開始在實驗室睡覺
      "今天把這一周的作息狀態總結分析一下呢。
      這周，周日12月2日，到今天周六12月8日。一直都在實驗室睡覺。
      首先這周睡覺時間一共是：63小時，這是躺著的時間。也就是說，我平均每天睡了9個小時。
      ——吃驚訝。這不和在寢室沒有區別麽？不過至少有一點，那就是我每天都吃到了早餐，買到了煮鷄蛋。可是總是偷偷摸摸的溜回寢室補覺。究其原因有二。
      一，確實到了中午午飯後想睡覺。但是我覺得完全沒有必要睡這麽長的時間。
      二、本以爲不回寢室就好了，可是這一天實驗室都有人，趙澤峰在實驗室，我有點點坐立不安。（這的確是事實）。所以每次吃過午飯就不想去實驗室了。
      ——這麽一來，要不下午就選擇去圖書館吧。圖書館六樓人應該不多，趴著睡覺的場所應該是有的。
      
      所以總結結果是，以後回寢睡覺改爲去圖書館睡覺。"
    - 20181209-201811215 杜絕回寢室補覺 作息開始規範 健身
      "杜絕回寢補覺->睡眠時間偏少
      小説寫作->日記篇幅/雜文/仿寫
      矩陣論復習
      
      這周成功杜絕了回寢室補覺，睡眠時間大大較少。但有點過於偏少，估計平均每天睡眠時間大約8小時，晚上7小時，加上下午趴的不到1小時。
      1209周日。研究小説寫作，下載了小黑屋軟件。不過最後得出結論，現在寫我的後宮小説爲時尚早，有很多需要思考的問題，所以現在是多讀書，多思考，而不是自己創作；仿寫有想法，但是沒有開始。另外日記，有時候日記寫得太詳細了，我現在覺得意義不大，不如用來寫思考性文章。
      1211周二。改試卷，勞人費力地一天。
      1212周三。矩陣論結課，復習已經開始。
      1213周四。看了《囚徒健身》，開始了鍛煉之路。
      1213~1215 養成了清早鍛煉，早餐，實驗室JAVA，下午圖書館，晚上JAVA的作息安排。
      
      還有一點，這周几乎沒有去做老師的任務，内心有點不安。"
    - 20181216-20181222
      "計劃：增加睡眠時間，增加跑步項。10點跑步壓腿，11點回實驗室開鋪，11點半入睡。
      增肌粉已到，但是覺得鷄蛋還是必須的。
      清早6點半起床，7點半完成鍛煉。之後去食堂采購鷄蛋，6個->中飯、晚飯、夜宵各兩個，分開吃。（現在12節課都已經結束了）
      每天的中飯，11點半之前離開實驗室，在西二食堂，因爲裏面有大量的便宜素菜，現在有增肌粉，鷄蛋蛋白，缺的是素菜。
      研究人體肌肉分佈，韌帶情況。
      研究飲食。
      研究跑步姿勢。"
  - 桎梏•束縛
  - 人生哲思錄 周國平
    - 生活態度
      - 真性情
        "只有來自真性情的愛好才能帶來幸福
        
        【原文】
        我的人生观若要用一句话概括，就是真性情。我从来不把成功看作人生的主要目标，觉得只有活出真性情才是没有虚度了人生。所谓真性情，一面是对个性和内在精神价值的看重，另一面是对外在功利的看轻。
        一个人在衡量任何事物时，看重的是它们在自己生活中的意义，而不是它们能给自己带来多少实际利益，这样一种生活态度就是真性情。
        //真性情定義。重精神，輕物質。
        
            一个人活在世上，必须有自己真正爱好的事情，才会活得有意思。这爱好完全是出于他的真性情的，而不是为了某种外在的利益，例如为了金钱、名声之类。他喜欢做这件事情，只是因为他觉得事情本身非常美好，他被事情的美好所吸引。这就好像一个园丁，他仅仅因为喜欢而开辟了一块自己的园地，他在其中培育了许多美丽的花木，为它们倾注了自己的心血。当他在自己的园地上耕作时，他心里非常踏实。无论他走到哪里，他也都会牵挂着那些花木，如同母亲牵挂着自己的孩子。这样一个人，他一定会活得很充实的。相反，一个人如果没有自己的园地，不管他当多大的官，做多大的买卖，他本质上始终是空虚的。这样的人一旦丢了官，破了产，他的空虚就暴露无遗了，会惶惶然不可终日，发现自己在世界上无事可做，也没有人需要他，成了一个多余的人。
         在我看来，所谓成功是指把自己真正喜欢的事情做好，其前提是首先要有自己真正的爱好，即自己的真性情，舍此便只是名利场上的生意经。而幸福则主要是一种内心体验，是心灵对于生命意义的强烈感受，因而也是以心灵的感受力为前提的。所以，比成功和幸福都更重要的是，一个人必须有一个真实的自我 ，一颗饱满的灵魂，它决定了一个人争取成功和体验幸福的能力。
        //真正的愛好即真性情。幸福的來源。
        
            人做事情，或是出于利益，或是出于性情。出于利益做的事情，当然就不必太在乎是否愉快。我常常看见名利场上的健将一面叫苦不迭，一面依然奋斗不止，对此我完全能够理解。我并不认为他们的叫苦是假，因为我知道利益是一种强制力量，而就他们所做的事情的性质来说，利益的确比愉快更加重要。相反，凡是出于性情做的事情，亦即仅仅为了满足心灵而做的事情，愉快就都是基本的标准。属于此列的不仅有读书，还包括写作、艺术创作、艺术欣赏、交友、恋爱、行善等等，简言之，一切精神活动。如果在做这些事情时不感到愉快，我们就必须怀疑是否有利益的强制在其中起着作用，使它们由性情生活蜕变成了功利行为。
        //功利行為不愉快，但有利益驅使。
        
            “君子喻以义，小人喻以利。”中国人的人生哲学总是围绕着义利二字打转。可是，假如我既不是君子，也不是小人呢?
             我相信，在义和利之外，还有别样的人生态度。在君子和小人之外，还有别样的人格。套孔于的句式，不妨说：“至人喻以情。”
            义和利，貌似相反，实则相通。“义”要求人献身抽象的社会实体，“利”驱使人投身世俗的物质利益，两者都无视人的心灵生活，遮蔽了人的真正的“自我”。“义”教人奉献，“利”诱人占有，前者把人生变成一次义务的履行，后者把人生变成一场权利的争夺，殊不知人生的真价值是超乎义务和权利之外的。义和利都脱不开计较，所以，无论义师讨伐叛臣，还是利欲支配众生，人与人之间的关系总是紧张。
        如果说“义”代表一种伦理的人生态度，“利”代表一种功利的人生态度，那么，我所说的“情”便代表一种审美的人生态度。它主张率性而行，适情而止，每个人都保持自己的真性情。你不是你所信奉的教义，也不是你所占有的物品，你之为你仅在于你的真实“自我”。生命的意义不在奉献或占有，而在创造，创造就是人的真性情的积极展开，是人在实现其本质力量时所获得的情感上的满足。
        //君子和小人之外的生活方式。義和利的同質性。
        
        你说，得活出个样儿来。我说，得活出个味儿来。名声地位是衣裳，不妨弄件穿穿。可是，对人对己都不要衣帽取人。衣裳换来换去，我还是我。脱尽衣裳，男人和女人更本色。
            人生中一切美好的事情，报酬都在眼前。爱情的报酬就是相爱时的陶醉和满足，而不是有朝一日缔结良缘。创作的报酬就是创作时的陶醉和满足，而不是有朝一日名扬四海。如果事情本身不能给人以陶醉和满足，就不足以称为美好。
        //美好的事情，是在做事的時候就趕到愉快。而非為了將來而痛苦的做某件事。如寫作是為了此刻的美好，而非日後的成名。
        
            我的确感到，读书、写作以及享受爱情、亲情和友情是天下最快乐的事情。“定力”不是修炼出来的，它直接来自所做的事情对你的吸引力。人生有两大幸运，一是做自己喜欢做的事，另一是和自己喜欢的人在一起。所以，也可以说，我的“定力”来自我的幸运。
        此生此世，当不当思想家或散文家，写不写得出漂亮文章，真是不重要。我唯愿保持住一份生命的本色，一份能够安静聆听别的生命也使别的生命愿意安静聆听的纯真，此中的快乐远非浮华功名可比。
        //能沈下來做事，是因為事情本身的吸引力。找到喜歡做的事，喜歡的人，是真正的成功和幸福，更是人生的幸運。"
      - 簡單
        " ①過分追求物質，就會妨礙精神生活。②現代人享受多，卻不幸福；方便多，卻不覺得自由。簡單才能通向幸福，適當捨去無用的物質、無用的日程。
           在五光十色的现代世界中，让我们记住一个古老的真理：活得简单才能活得自由。
            自古以来，一切贤哲都主张过一种简朴的生活，以便不为物役，保持精神的自由。
            事实上，一个人为维持生存和健康所需要的物品并不多，超乎此的属于奢侈品。它们固然提供享受，但更强求服务，反而成了一种奴役。
        !!现代人是活得愈来愈复杂了，结果得到许多享受，却并不幸福，拥有许多方便，却并不自由。
        
        【原文】
            如果一个人太看重物质享受，就必然要付出精神上的代价。人的肉体需要是很有限的，无非是温饱，超于此的便是奢侈，而人要奢侈起来却是没有尽头的。温饱是自然的需要，奢侈的欲望则是不断膨胀的市场刺激起来的。富了总可以更富，事实上也必定有人比你富，于是你永远不会满足，不得不去挣越来越多的钱。这样，赚钱便成了你的唯一目的。即使你是画家，你哪里还顾得上真正的艺术追求；即使你是学者，你哪里还会在乎科学的良心?
            仔细想一想，我们便会发现，人的肉体需要是有被它的生理构造所决定的极限的，因而由这种需要的满足而获得的纯粹肉体性质的快感差不多是千古不变的，无非是食色温饱健康之类。殷纣王“以酒为池，悬肉为林”，但他自己只有一只普通的胃。秦始皇筑阿房宫，“东西五百步，南北五十丈”，但他自己只有五尺之躯。多么热烈的美食家，他的朵颐之快也必须有间歇，否则会消化不良。多么勤奋的登徒子，他的床笫之乐也必须有节制，否则会肾虚。每一种生理欲望都是会餍足的，并且严格地遵循着过犹不足的法则。山珍海味，挥金如土，更多的是摆阔气。藏娇纳妾，美女如云，更多的是图虚荣。万贯家财带来的最大快乐并非直接的物质享受，而是守财奴清点财产时的那份欣喜，败家子挥霍财产时的那份痛快。凡此种种，都已经超出生理满足的范围了，但称它们为精神享受未免肉麻，它们至多只是一种心理满足罢了。
        //過分追求物質，精神生活就被忽視了
        
            一切奢侈品都给精神活动带来不便。
        人活世上，有时难免要有求于人和违心做事。但是，我相信，一个人只要肯约束自己的贪欲，满足于过比较简单的生活，就可以把这些减少到最低限度。远离这些麻烦的交际和成功，实在算不得什么损失，反而受益无穷。我们因此获得了好心情和好光阴，可以把它们奉献给自己真正喜欢的人，真正感兴趣的事，而首先是奉献给自己。对于一个满足于过简单生活的人，生命的疆域是更加宽阔的。 
        
        许多东西，我们之所以觉得必需，只是因为我们已经拥有它们。当我们清理自己的居室时，我们会觉得每一样东西都有用处，都舍不得扔掉。可是，倘若我们必须搬到一个小屋去住，只允许保留很少的东西，我们就会判断出什么东西是自己真正需要的了。那么，我们即使有一座大房子，又何妨用只有一间小屋的标准来限定必需的物品，从而为美化居室留出更多的自由空间？
        许多事情，我们之所以认为必须做，只是因为我们已经把它们列入了日程。如果让我们凭空从其中删除某一些，我们会难做取舍。可是，倘若我们知道自己已经来日不多，只能做成一件事情，我们就会判断出什么事情是自己真正想做的了。那么，我们即使还能活很久，又何妨用来日不多的标准来限定必做的事情，从而为享受生活留出更多的自由时间？
        在人的生活中，有一些东西是可有可无的，有了也许增色，没有也无损本质，有一些东西则是不可缺的，缺了就不复是生活。什么东西不可缺，谁说都不算数，生养人类的大自然是唯一的权威。自然规定了生命离不开阳光和土地，规定了人类必须耕耘和繁衍。最基本的生活内容原是最平凡的，但正是它们构成了人类生活的永恒核心。"
      - 不占有
        "所謂占有，不僅僅是貪欲，還有把人生看得很重的人。而實際上生命只是偶然的贈禮，我們只需要玩味它。
        人生有得有失，但人往往認爲“得”是正常的，“失”是不正常的。這還沒有悟道。
        “一个只求得到不肯失去的人，表面上似乎富于进取心，实际上是很脆弱的，很容易在遭到重大失去之后一蹶不振”
        “我们总是以为，已经到手的东西便是属于自己的，一旦失去，就觉得蒙受了损失。”
        “肖伯纳说：“人生有两大悲剧，一是没有得到你心爱的东西，另一是得到了你心爱的东西。”我曾经深以为然，并且佩服他把人生的可悲境遇表述得如此轻松俏皮。但仔细玩味，发现这话的立足点仍是占有，所以才会有占有欲未得满足的痛苦和已得满足的无聊这双重悲剧。如果把立足点移到创造上，以审美的眼光看人生，我们岂不可以反其意而说：人生有两大快乐，一是没有得到你心爱的东西，于是你可以去寻求和创造；另一是得到了你心爱的东西，于是你可以去品味和体验?”
        
        【原文】
            所谓对人生持占有的态度，倒未必专指那种唯利是图、贪得无厌的行径。据我的理解，凡是过于看重人生的成败、荣辱、福祸、得失，视成功和幸福为人生第一要义和至高目标者，即可归入此列。因为这样做实质上就是把人生看成了一种占有物，必欲向之获取最大效益而后快。
        但人生是占有不了的。毋宁说，它是侥幸落到我们手上的一件暂时的礼物，我们迟早要把它交还。我们宁愿怀着从容闲适的心情玩味它，而不要让过分急切的追求和得失之患占有了我们，使我们不再有玩味的心情。在人生中还有比成功和幸福更重要的东西，那就是凌驾于一切成败福祸之上的豁达胸怀。在终极的意义上，人世间的成功和失败，幸福和灾难，都只是过眼烟云，彼此并无实质的区别。当我们这样想时，我们和我们的身外遭遇保持了一个距离，反而和我们的真实人生贴得更紧了，这真实人生就是?种既包容又超越身外遭遇的丰富的人生阅历和体验。
        
            一般来说，人的天性是习惯于得到，而不习惯于失去的。呱呱坠地，我们首先得到了生命。自此以后，我们不断地得到：从父母得到衣食、玩具、爱和抚育，从社会得到职业的训练和文化的培养。长大成人以后，我们靠着自然的倾向和自己的努力继续得到：得到爱情、配偶和孩子，得到金钱、财产、名誉、地位，得到事业的成功和社会的承认，如此等等。
            当然，有得必有失，我们在得到的过程中也确实不同程度地经历了失去。但是，我们比较容易把得到看作是应该的，正常的，把失去看作是不应该的，不正常的。所以，每有失去，仍不免感到委屈。所失愈多愈大，就愈委屈。我们暗暗下决心要重新获得，以补偿所失。在我们心中的蓝图上，人生之路仿佛是由一系列的获得勾画出来的，而失去则是必须涂抹掉的笔误。总之，不管失去是一种多么频繁的现象，我们对它反正不习惯。
        道理本来很简单：失去当然也是人生的正常现象。整个人生是一个不断地得而复失的过程，就其最终结果看，失去反比得到更为本质。我们迟早要失去人生最宝贵的赠礼??生命，随之也就失去了在人生过程中得到的一切。有些失去看似偶然，例如天灾人祸造成的意外损失，但也是无所不包的人生的题中应有之义。“人有旦夕祸福”，既然生而为人，就得有承受旦夕祸福的精神准备和勇气。至于在社会上的挫折和失利，更是人生在世的寻常遭际了。由此可见，不习惯于失去，至少表明对人生尚欠觉悟。一个只求得到不肯失去的人，表面上似乎富于进取心，实际上是很脆弱的，很容易在遭到重大失去之后一蹶不振。
        
            为了习惯于失去，有时不妨主动地失去。东西方宗教都有布施一说。照我的理解，布施的本义是教人去除贪鄙之心，由不执著于财物，进而不执著于一切身外之物，乃至于这尘世的生命。如此才可明白，佛教何以把布施列为“六度”之首，即从迷惑的此岸渡向觉悟的彼岸的第一座桥梁。俗众借布施积善图报，寺庙靠布施敛财致富，实在是小和尚念歪了老祖宗的经。我始终把佛教看作古今中外最透彻的人生哲学，对它后来不伦不类的演变深不以为然。佛教主张“无我”，既然“我”不存在，也就不存在“我的”这回事了。无物属于自己，连自己也不属于自己，何况财物。明乎此理，人还会有什么得失之患呢?
        当然，佛教毕竟是一种太悲观的哲学，不宜提倡。只是对于入世太深的人，它倒是一帖必要的清醒剂。我们在社会上尽可以积极进取，但是，内心深处一定要为自己保留一份超脱。有了这一份超脱，我们就能更加从容地品尝人生的各种滋味，其中也包括失去的滋味。
        
            我们总是以为，已经到手的东西便是属于自己的，一旦失去，就觉得蒙受了损失。其实，一切皆变，没有一样东西能真正占有。得到了?切的人，死时又交出一切。不如在一生中不断地得而复失，习以为常，也许能更为从容地面对死亡。
        另一方面，对于一颗有接受力的心灵来说，没有一样东西会真正失去。
        
        我失去了的东西，不能再得到了。我还能得到一些东西，但迟早还会失去。我最后注定要无可挽救地失去我自己。既然如此，我为什么还要看重得与失呢?到手的一切，连同我的生命，我都可以拿它们来做试验，至多不过是早一点失去罢了。
        
        一切外在的欠缺或损失，包括名誉、地位、财产等等，只要不影响基本生存，实质上都不应该带来痛苦。如果痛苦，只是因为你在乎，愈在乎就愈痛苦。只要不在乎，就一根毫毛也伤不了。
        
            守财奴的快乐并非来自财产的使用价值，而是来自所有权。所有权带来的心理满足远远超过所有物本身提供的生理满足。一件一心盼望获得的东西，未必要真到手，哪怕它被放到月球上，只要宣布它属于我了，就会产生一种愚蠢的欢乐。
        
        耶稣说：“富人要进入天国，比骆驼穿过针眼还要困难。”对耶稣所说的富人，不妨作广义的解释，凡是把自己所占有的世俗的价值，包括权力、财产、名声等等，看得比精神的价值更宝贵，不肯舍弃的人，都可以包括在内。如果心地不明，我们在尘世所获得的一切就都会成为负担，把我们变成负重的骆驼，而把通往天国的路堵塞成针眼。
        
        肖伯纳说：“人生有两大悲剧，一是没有得到你心爱的东西，另一是得到了你心爱的东西。”我曾经深以为然，并且佩服他把人生的可悲境遇表述得如此轻松俏皮。但仔细玩味，发现这话的立足点仍是占有，所以才会有占有欲未得满足的痛苦和已得满足的无聊这双重悲剧。如果把立足点移到创造上，以审美的眼光看人生，我们岂不可以反其意而说：人生有两大快乐，一是没有得到你心爱的东西，于是你可以去寻求和创造；另一是得到了你心爱的东西，于是你可以去品味和体验?
        
        有一个人因为爱泉水的歌声，就把泉水灌进瓦罐，藏在柜子里。我们常常和这个人一样傻。我们把女人关在屋子里，便以为占有了她的美。我们把事物据为己有，便以为占有了它的意义。可是，意义是不可占有的，一旦你试图占有，它就不在了。无论我们和一个女人多么亲近，她的美始终在我们之外。不是在占有中，而是在男人的欣赏和倾倒中，女人的美便有了意义。我想起了海涅，他终生没有娶到一个美女，但他把许多女人的美变成了他的诗，因而也变成了他和人类的财富。
        
            大损失在人生中的教化作用：使人对小损失不再计较。
        
        “无穷天地，那驼儿用你精细。”张养浩此言可送天下精细人做座右铭。
        数学常识：当分母为无穷大时，不论分子为几，其值均等于零。而你仍在分子上精细，岂不可笑?"
  - 牛津書蟲系類
    - 在月亮下面
      - 簡介
        "　　太阳是一个巨大的燃烧着的火球。没有来自太阳的光和热，我们就不能在地球这颗行星上生存。在这颗行星周围有臭氧层保护着我们免受太阳之火的伤害。但是如果臭氧层破裂，将会怎样呢？现在臭氧层上已经有了小洞，有人说那些小洞会变得越来越大——直到有一天再没有任何东西挡在我们和太阳的火焰之间。 
        　　事情发生在2222年。地球人制造了AOL——人工臭氧层。美丽的地球又有了1000年的生命。树又发芽了，下雨了，河里有了水…… 
        　　但现在是2522年，人工臭氧层已经破裂。幼嫩的树林开始枯萎，河流也逐渐干涸。凯和瑞拉从他们的宇宙飞船里看到了这危险的情景，可他们又能做些什么呢？月亮下面的部族里住着他们的朋友，可是路途遥远，而地球首领高格又不肯听从他们的指挥。 
        　　本书的作者罗维纳·阿金耶米是英国人。曾在非洲居住和工作了多年。现在她在剑桥工作和生活。"
      - 1 AOL
        "Kiah he 2m tall
        Rilla she 20 years old
        Captain Seru fat face
        Adai with Sere 曾經船長 現月球殖民地長官
        Gog 地球司令官？
        Commander Zadak 澳大利亞總督
        
        AOL保護地球，現在出了問題。船長彙報過，但是沒有結果。船員想繼續彙報
        
        　　Five hundred kilometres over Europe，Ship OM-45 moved north．In a room at the back of the ship，Kiah watched the numbers on the computer in front of him． 
        　　‘Time for dinner，’Rilla said． 
        　　The numbers changed quickly and Kiah's eyes didn't move．Rilla went across the room to his table．She began to watch the numbers，too． 
        　　‘What's wrong with the satellite？’she asked．She was a beautiful girl，about twenty years old，with long black hair and big eyes． 
        　　‘Nothing's wrong with the satellite，’Kiah answered quietly．‘It's the AOL．’He began to write the numbers in the book on his table． 
        　　Suddenly，the numbers stopped changing．Kiah looked at Rilla．‘Over Europe，’he said．‘It's happening．The AOL is breaking up．There are big holes in the AOL and they're getting bigger．’ 
        　　‘You're right！Shall we see Captain Seru now，before dinner？’ 
        　　Kiah stood up．He was nearly two metres tall，with dark eyes and hair．‘Yes，come on，’he said． 
        　　Quickly，they went to Captain Seru's room．They waited at the door． 
        　　‘Come in！’captain Seru called．She was a little woman with a fat face．‘Come in！Would you like a drink？’ 
        　　‘No，thank you，’Kiah answered．‘I'd like you to look at these numbers．’Kiah gave Captain Seru his book． 
        　　Captain Seru looked at the numbers．Suddenly，her face changed．‘No，no， ’she said．‘I don't want to talk．It's late and I'm tired．Sit down and have a drink．’ 
        　　Kiah and Rilla sat down．There was a big window in Captain Seru's room．Kiah looked out of the window at the dark sky．He saw the Moon．It was cold and white in the dark sky． 
        　　‘Captain Seru，’he began．‘It's important．Look at those numbers carefully．The AOL is beginning to—’ 
        　　‘Stop！’captain Seru stood up and put her hands in her pockets．She went to the window and looked at the sky．  
        　　‘Three hundred years ago，Earth nearly died，’Rilla said．‘Earth stopped dying because of the AOL．But now，over Europe，the AOL is breaking up．We would like you to talk to Earth Commander．’ 
        　　Captain Seru did not move．‘Do you remember Adai？’she asked．She didn't wait for an answer．‘I was on his ship，two years ago．One evening，the satellite gave us interesting numbers about the AOL．We went back to Earth and saw Earth Commander．’captain Seru stopped speaking． 
        　　Rilla looked at Kiah．‘And then？’she asked Captain Seru． 
        　　‘Gog was angry，very angry，’captain Seru said．‘In the end，he sent Adai to the Moon． Adai's there now，Commander of the Moon colony，under the Moon．’ 
        　　Kiah waited for a second or two．‘I know about Adai． But we need to talk to Earth Commander again．These numbers are worse．’ 
        　　Captain Seru's face went red．‘You don't understand．I'm not going to talk to Gog．Last time，he sent me to a weather ship in the Antarctic！This is my first Ship for two years！’And Captain Seru began drinking． 
        　　Kiah stood up．‘Thank you，Captain Seru．’ 
        　　Captain Seru said nothing． 
        　　Kiah and Rilla left the room，and walked slowly downstairs．The Ship was dark and quiet．It was eight o'clock and every-body was at dinner． 
        　　‘What are we going to do next？’Rilla asked． 
        　　‘I need to talk to Adai，’Kiah said． 
        　　‘OK，talk to Adai．But he's far away on the Moon colony，’Rilla said．‘Let's visit Commander Zadak．’ 
        　　‘Zadak？Commander of Australia？ He's famous！’ 
        　　‘Yes．He's my father's friend．He worked with my father in Brazil ten years ago．Perhaps he can help us．’ 
        　　Kiah smiled．‘Good！We return to Earth next week．I can phone Adai from Kisangani and then we can go to Australia． But now，I'm hungry！Let's get some dinner．’ "
      - 2 Visit to Australia
        "Kiah and Rilla
        Suddenly，Kiah drove the taxi off the road．
        訪問總督 困難重重 沒有進展
        
        　　On Friday，after three weeks in space，Kiah and Rilla finished work and left Ship OM-45 on a space plane to Kisangani．Kiah phoned Adai and Rilla phoned Commander Zadak in Australia．The next morning they took an aeroplane to Sydney．A taxi took them from the airport to Commander Zadak's office，some kilometres north of Sydney． 
        　　‘Wait for us here，’Kiah said to the taxi driver． 
        　　Kiah and Rilla walked to the gate．About ten guards stood in front of the gate．Across the road，a train waited． 
        　　‘Rilla，OM-45，’Rilla said．‘To see Commander Zadak at four-thirty．’ 
        　　‘Let me call the Commander's office，’the guard said． 
        　　Kiah and Rilla waited．It was hot and Kiah began to feel thirsty． 
        　　The guard came back．‘I'm sorry，’he said．‘The Com-mander can't see you．’ 
        　　‘But I talked to the Commander yesterday，’Rilla said． 
        　　‘He wanted to see us at four-thirty．’ 
        　　‘The Commander is leaving on the train in three minutes，’the guard said． 
        　　‘Can we wait and see him here？’Kiah asked． 
        　　‘No！'the guard shouted．‘Get out of here！’ 
        　　Kiah and Rilla walked back to the taxi． 
        　　‘Where's the driver？’Kiah asked． 
        　　‘Look！He's sitting under that tree，’Rilla said． 
        　　Just then，Commander Zadak came out of the gate．He was a very tall，big man with blue eyes and a lot of white hair．Two guards marched in front of him，and two guards marched be-hind him．They all carried guns． 
        　　‘There he is！’Rilla cried．‘Commander！’And she began to run along the road to him． 
        　　‘Commander Zadak did not stop．A guard opened the door of the train and the Commander got in．Slowly，the train began to move．’ 
        　　Kiah ran to the taxi and jumped in．Then he drove the taxi fast down the road．The taxi driver saw him and ran after him．The train began to move faster．Suddenly，Kiah drove the taxi off the road．He drove in front of the train and stopped． 
        　　The train came nearer．And then the train stopped， very near the taxi，and some guards jumped off．Kiah opened the door and got out of the taxi． 
        　　‘Put up your hands！'the guards shouted． 
        　　Two of the guards began to hit Kiah． 
        　　‘Stop that！’someone shouted．‘Bring him over here！’It was Commander Zadak． 
        　　Kiah stood in front of the Commander．Just then，Rilla ar-rived． 
        　　‘Oh，it's you！’commander Zadak said．He did not smile．‘Rilla，your father's going to be angry．’ 
        　　‘We want to talk to you，Commander，’Rilla said．‘It's very important．’ 
        　　‘Very well．I'm listening．’ 
        　　Kiah began to talk．‘Two years ago，Adai told you about the holes in the AOL．Now they're worse．The AOL is break-ing up over Europe．Please look at these numbers and this satellite picture．’ 
        　　He gave his book to Commander Zadak and the Commander looked at the numbers． 
        　　‘It's important，Commander，’Kiah said．‘In ten years Earth is going to die．’ 
        　　‘You stopped my train because of this？’commander Zadak asked．‘Two years ago Adai talked to me about the AOL．Then he talked to Earth Commander，and what happened？Where is Adai now？Is the Moon colony helping the AOL？’ 
        　　‘We know about Adai，Commander，’Rilla said．‘But someone needs to talk to Earth Commander again．’ 
        　　‘I'm going to talk to Gog about rain，I can tell you that．Earth needs rain：there was no rain last winter．Half of Australia has no water and my trees here are dying．Without rain，many people are going to die．Is Gog going to understand that？I don't know！’ 
        　　Commander Zadak began to walk back to his train．‘Move that taxi！’he called to his guards． 
        　　Some guards moved the taxi back to the road and then they jumped on to the train again．The train began to move． 
        　　‘OK，’the taxi driver shouted．‘What are you going to do next？Drive my taxi into the river？’ 
        　　Kiah smiled．He took some money from his pocket and gave it to the taxi driver． 
        　　The taxi driver looked at the money．‘OK，OK，’he said．‘Where now？Back to the airport？’ 
        　　Kiah took Rilla's hand，‘Yes，’he said．‘Let's get back to Kisangani．We can phone Adai again tomorrow．’"
      - 3 Earth Commander
        "Kiah and Rilla
        Gog he's going to destroy Earth
        Bel，and she was Gog's wife
        更加失敗 總督不願意為AOL付錢，不相信AOL正在崩潰
        
        　　The next day in Kisangani，Kiah and Rilla waited quietly in an office in Gog's house．Suddenly， Commander Zadak came into the office and gave some letters to the man behind the table．He saw the two young people and stopped in front of them． 
        　　‘You again！’he said．‘What are you doing here？’ 
        　　Kiah stood up．‘Good morning，Commander．We're here because we want to see Earth Commander．’ 
        　　‘I saw Earth Commander some minutes ago and talked to him about rain，’Zadak said quietly．‘But he didn't listen．Your captain，Seru，was here earlier this morning and began to tell him about the holes in the AOL．But Gog doesn't want to hear about our planet．He's always talking about Mars．In the end，he's going to destroy Earth．’ 
        　　‘Please help us！’Rilla cried．‘Come and see Gog with us！’ 
        　　‘No．’Zadak looked at Kiah and then at Rilla with his blue eyes．‘I'm not talking to Gog again．And you—Gog isn't going to listen to you．Be careful—and good luck！’ 
        　　Commander Zadak opened the door and left the office． 
        　　Rilla looked at Kiah．‘Earth Commander is a difficult man．I don't understand him．’ 
        　　‘Everyone is afraid of him，’Kiah said．‘And Commander Zadak isn't going to help us．’ 
        　　Kiah and Rilla waited．They waited and waited．At nearly twelve o'clock，a guard came into the office． 
        　　‘Come！’he said． 
        　　Kiah and Rilla went with the guard．The house was big and old，with big windows and many doors．The guard went downstairs and opened one of the doors．There was nobody in the room． 
        　　‘Wait here，'the guard said，and left． 
        　　Kiah and Rilla sat down on the expensive green and black chairs and looked at the expensive flowers on the tables．There were no windows in this room．Suddenly，the door opened and a tall，fat woman came in．Her name was Bel，and she was Gog's wife．She had a lot of long red hair and she wore an expensive blue dress．Bel liked expensive things．She carried a cat．The cat was black and white：half its face was black and half was white；half its body was black and half was white．  
        　　‘Why are you here？ Why do you want to see Earth Commander？’she asked． 
        　　Rilla stood up．‘How do you do？’she said．‘We want to talk to Earth Commander about the AOL．We have new numhers from the satellite．’ 
        　　Bel's face was red．‘The AOL！Earth Commander knows about the AOL，and he is the best man—’ 
        　　‘Excuse me，’Kiah said quietly．‘We want to help Earth Commander．’ 
        　　Bel began to laugh．‘Help？You？’the cat jumped down and walked across the room．‘How can you help？Why can't you understand？ Listen．Earth Commander is working on the spaceship for Mars．It's difficult and expensive work．’the cat jumped on to Rilla's chair and looked at her with its yellow eyes．‘Two years ago，Adai wanted more money for the AOL—and Earth Commander sent him to the colony under the Moon．Now you're talking about the AoL．Do you want to go to the Moon，too？’ 
        　　The door opened again and a different guard came in．‘Excuse me．Earth Commander is ready now．’ 
        　　Bel stood up．‘You can see Earth Commander now，'she said coldly．‘But you're going to be sorry！’ 
        　　The guard opened a different door，and Bel and the cat went into a beautiful room with expensive，very old tables and chairs．Rilla and Kiah went in behind them．There were no windows in the room，but a lot of pictures．There was Gog！The richest man on Earth；and the worst man on Earth．He was tall and fat，and without much hair．He sat behind a big table with a television，three computers and five telephones．He watched the television and didn't look at Kiah or Rilla．Two guards with guns stood behind him and two more guards stood near the door． 
        　　‘Here they are！’Bel said．‘They aren't friends，oh no！They want to talk about the AOL，of course．No one under-stands about Mars—’ 
        　　‘That's all right，that's all right，’Gog said quickly．And then he looked up，first at Rilla and then at Kiah．His eyes were cold and green．‘I know about you two，’he said．‘Your captain told me about you．You're famous！Two children！You want to help planet Earth，is that right？’He waited．The cat jumped on to his table and sat down in front of the television． 
        　　‘Yes，Commander，’Kiah began．‘The AOL is breaking up—’ 
        　　‘When？Tonight？Tomorrow？’Gog said angrily．‘I heard this old story two years ago，from Adai．Everyone comes here and wants money-money for the AOL，money for rain，money for the Moon colony．But I am Earth Commander，and you are nobody！I know about the AOL and the AOL is good for a hundred years！’ 
        　　‘But the satellite—’Kiah began again． 
        　　‘Be quiet！’Gog cried．‘I am Earth Commander！I'm not going to give money for the AOL！Or for rain！Or for the Moon！’Gog looked at the guards near the door．‘Take them —take them away．I don't want to hear them．’ 
        　　The guards moved behind Kiah and Rilla，and Bel began to laugh．‘Goodbye！'she said．‘You're not going to the Moon，you're going to prison！You can talk about the holes in the AOL there！’"
      - 4 Prison 888
        "Zadak I'm going to stop Gog：I'm going to kill him
        刺殺失敗
        
        　　Commander Zadak was in his room at the biggest hotel in Kisangani．Suddenly，he heard the phone． 
        　　‘Commander？’someone said，very quietly．‘A man and a woman—from Ship OM-45—in prison 888．’the phone went dead．Zadak put the phone down，stood up，and left his room． 
        　　Prison 888 was a big white building without windows，near Gog's house．There were a lot of guards at the gate，and some more guards marched past the bulding．All the guards carried guns． 
        　　Commander Zadak walked across the road to the prison．‘I want to visit someone．My name is Commander Zadak．’ 
        　　‘I'm sorry，Commander，’a guard said．‘We can't open the gate．Nobody can go in without a letter from Earth Commander．’ 
        　　‘That's all right，’Zadak said，and walked along the road，past the prison． 
        　　A guard ran behind him．‘Excuse me，Commander，’he said quickly．‘Please come back tonight．I can open the back gate at midnight．You can see the two people from Ship OM-45．’ 
        　　Zadak looked at the guard．‘Your captain's going to kill you．’ 
        　　The guard smiled．‘My captain phoned you about the two people from OM-45．He's the brother of Captain Seru．’ 
        　　Zadak didn't smile．‘The prison commander is going to kill you and your captain．’ 
        　　‘It doesn't matter，’the guard said．‘We want to help．’ 
        　　‘Midnight，’Zadak said，and walked away． 
        　　At midnight there were four guards at the front gate of prison 888，and there was one guard at the back gate．The guard opened the gate and Zadak went in．The guard said nothing．They walked downstairs into a big room．A lot of prisoners slept on the floor because there were no beds or chairs．Kiah and Rilla sat on the floor near the door． 
        　　‘You can talk for five minutes，’the guard said quietly． 
        　　‘The next guard arrives at 12．15．’ 
        　　Kiah and Rilla stood up．‘Good evening，Commander，’they said． 
        　　Zadak looked at the prisoners．‘Why are all these people here？’he said to Kiah and Rilla．‘They're in prison because Gog doesn't like them．I talk to Gog about rain，I talk to him about the AOL，but he never listens．Today，someone told me about some fires in the new forest here in Africa；but Gog doesn't want to hear about those fires．’Zadak laughed angrily．‘And he doesn't want to hear about my trees in Australia．He never listens to me．He's always thinking about Mars，Not about our beautiful planet Earth．’ 
        　　Kiah listened carefully．‘Take it easy，Commander，’he said quietly．‘Please talk to Adai．Adai wants to help．He can come back from the Moon and help you．’ 
        　　‘No，’Zadak said．‘I phoned Adai this afternoon． He's a good man and he wants to help．But I don't need help．I'm going to stop Gog：I'm going to kill him．’ 
        　　Kiah closed his eyes for a minute．‘Gog's guards have guns．They can kill you，Commander，’he said．‘You need more people to help．Wait for Adai．He can help you to look for more people．’ 
        　　‘No，Kiah’，Zadak said quietly．‘I don't want more people．Adai can come back to Earth after Gog is dead—after I am dead，perhaps．I don't want Adai to die，too．’ 
        　　‘Excuse me，Commander，’the guard said．He looked at the clock near the door． 
        　　‘OK．Let's go，’Zadak said to the guard．He looked at Rilla and then at Kiah．His eyes were very blue．‘Goodbye，’ he said． 
        　　‘Goodbye，Commander，’Kiah said． 
        　　‘Be careful！’Rilla cried．‘And good luck！’ 
        　　Early that morning，Earth Commander's house was quiet．A guard opened the door． 
        　　‘Good morning， Commander Zadak，’he said．‘Earth Commander isn't in his office．’ 
        　　‘That's all right，’Zadak said．‘I can wait．’ 
        　　Zadak went upstairs and waited． 
        　　At eight o'clock Bel came into the room．‘Good morning，Commander，'she said．‘You're early this morning．Are you happier today？Earth Commander was very angry with you yesterday．Don't begin talking about rain or the AOL today．’ 
        　　Zadak smiled，but his blue eyes were cold．‘No，’he said．‘I'm not going to talk about rain today．’ 
        　　Just then，Gog came into the room．He looked at Zadak．‘What's wrong？Why are you here at eight o'clock in the morning？’ 
        　　Zadak took his gun from his pocket．Gog saw the gun and his face went white．His eyes were dark and afraid．For a sec-ond nobody moved． 
        　　Suddenly，Bel's black and white cat ran into the room． 
        　　‘Guards！Guards！’Bel shouted． 
        　　The cat jumped at Zadak，and Zadak hit the cat away from him．Bel ran across the room to Gog and Zadak，at that second，shot at Gog．But Bel was between him and Gog．She gave a cry and fell to the floor．Her hair looked very red on the black floor． 
        　　‘No！’Gog cried．‘You shot Bel！’ 
        　　Three guards ran into the room with their big guns and stood in front of Gog． 
        　　‘Kill him！’Gog shouted，and began to help Bel． 
        　　Zadak looked at the guards and then at Bel and Gog．Kiah was right：he was going to die． 
        　　‘I'm sorry，Kiah．I'm sorry，Adai，’he said quietly．The guards shot Zadak．Slowly，he fell to the floor"
      - 5 Forest fires
        "　　Later that morning，four guards took Rilla to Gog's of-fice．His face looked tired and his eyes were red． 
        　　‘Leave us，’he said to the guards．Then he looked at Rilla．‘Tell me about Kiah．When did you first meet him？Is Zadak his friend？What do they talk about？’ 
        　　Rilla looked down at the floor and said nothing． 
        　　‘Come on，tell me！’Gog said angrily．He waited，but Rillasaid nothing．‘Tell me about Zadak，then．Your father and Commander Zadak were friends．Now， you're talking to Zadak about the AOL．I know that．What is Zadak saying？’ 
        　　‘Why？Why do you want to know about Commander Zadak？’Rilla asked． 
        　　‘I'm asking the questions，not you，’Gog said．‘Did you see Zadak yesterday？’ 
        　　‘The AOL is important，not Commander Zadak，’Rilla said． 
        　　Gog watched Rilla carefully．‘Zadak is dead．’ 
        　　‘No！’Rilla cried． 
        　　‘He is dead，’Gog said again．‘You lost your friend，here in this building，early this morning．My guards shot him．’ 
        　　Rilla's face went white．‘What happened？Tell me！’ 
        　　‘I'm going to tell you one thing，’Gog said angrily．‘I'm going to destroy Australia．I'm going to burn Zadak's new forest there．You can tell all your friends！Zadak wanted to kill me，but I killed him．He wanted money for rain，money for the AOL，and now he's dead．You can tell all those prisoners in prison 888．They wanted to stop me，but they can't now．I'm going to Mars！Bel always wanted to go to Mars．’He began to hit the table with his hand．‘I'm going to leave this dead planet！Nobody can stop me！’ 
        　　‘You're crazy，’Rilla said．‘You killed Zadak，but one day someone is going to kill you．’ 
        　　Gog stood up．His face was tired and he looked ill．‘Be qui-et！’he said．‘Guards！Take her away．Back to 888．’ 
        　　The guards came in and took Rilla out． 
        　　‘What happened？’she asked them．‘Commander Zadak is dead；why is Gog angry？’ 
        　　The guards said nothing．But after they returned to the gate of 888，a guard said to Rilla，very quietly：‘Bel is dead．Zadak didn't shoot Gog，but he shot Bel，before the guards shot him．’ 
        　　A guard took Rilla into the prison， and soon she was with Kiah again． 
        　　‘What happened？’Kiah asked．‘Tell me．’ 
        　　Rilla put her hands over her face and began to cry．‘Zadak is dead，’she began．‘He didn't kill Gog．He killed Bel before the guards shot him，and now Gog is going to destroy Australia．’ 
        　　Kiah sat down on the floor next to Rilla．His face was sad． 
        　　‘Don't cry，’he said quietly． 
        　　Three or four prisoners came across the room． 
        　　‘What's the matter？’they asked． 
        　　‘Zadak is dead，’Kiah said．‘But Bel is dead，too．’ 
        　　‘What's going to happen next？’someone asked．But nobody answered． 
        　　The next afternoon，Captain Seru's brother took Kiah and Rilla to a little room at the back of the prison．They sat down，and five minutes later Captain Seru arrived．Nobody smiled． 
        　　‘You were right，Captain，’Kiah said．‘Gog sent us to prison because we told him about the holes in the AOL．’ 
        　　Seru smiled．‘You were right，Kiah，’she said．‘Those satellite numbers were very bad．I began to tell Gog，but he didn't listen to me．’ 
        　　‘Would you like some coffee？And some sandwiches？’seru's brother asked． 
        　　‘Yes，please，’seru said．‘I'm hungry．’she looked at Kiah and Rilla．‘Things are very bad．’ 
        　　‘What's happening？’Rilla asked． 
        　　‘You know about Zadak？And Bel？’ 
        　　‘Yes．Gog told Rilla yesterday，’Kiah said． 
        　　Seru smiled，but her eyes were not happy．‘Gog talked to me this morning，'she said．Her brother came in with the coffee and sandwiches and Seru began to eat．‘Gog wants to know about Zadak，and about you，’she said．‘He's going to kill us all，I think，before he goes to Mars．’ 
        　　Suddenly，Rilla felt ill．‘I can't eat now！’she cried．But she took some coffee and began to drink．‘Let's get out of here，’she said．‘Perhaps we can get a plane to Brazil and go to my family．’ 
        　　‘Difficult，’seru said．‘Last night fires began in the new forest in Europe，and they're moving across Europe．The fires in Africa are burning fast．Gog began to destroy Zadak's forest in Australia yesterday．’ 
        　　‘Did you phone Adai？’Kiah asked． 
        　　‘Adai！You never stop talking about Adai．What can he do？’Rilla said．She felt angry． 
        　　Seru looked at Rilla for a minute．‘Yes，I phoned Adai be-fore I came here．I told him about Zadak and Bel，and about the fires．He asked about you，Kiah．He can't come down at Kisangani airport because Gog is there with a lot of his guards．Ship MARS 4 is nearly ready and Gog is watching it．He wants to leave Earth tomorrow．’ 
        　　‘How can Adai help us？’Rilla asked．‘He can't shoot all the guards here．’ 
        　　Captain Seru finished the last sandwich．‘Let's leave that to Adai，’she said．‘We can do nothing．’ 
        　　‘Are you going to stay here？’Kiah asked． 
        　　‘Yes，'seru answered．‘Adai is coming to the prison after he arrives on Earth．’ 
        　　‘Oh yes？’Rilla said tiredly．‘But when？Gog can kill us before Adai comes．’‘No，he can't，’seru's brother said．‘You can stay here，in this room．Gog's guards are all afraid—afraid of the fires，afraid of the people．They aren't going to look for you here．’"
      - 6 Spaceship to the Moon
        "有點莫名其妙的結尾
        
        　　And so they waited．And waited．Rilla slept in her chair．Kiah and Seru talked quietly．Seru's brother came and went．Most of the prison guards ran away with the prisoners．Seven or eight people—some prisoners and some guards—didn't want to run away，so they came into the room and waited，too． 
        　　Ten o'clock came，then eleven o'clock．It was very quiet．Seru walked up and down the room．Kiah sat next to Rilla．Seru's brother came into the room again． 
        　　‘It's after midnight，’he said． 
        　　Just then， they heard the noise of a plane．Kiah stood up．‘Come on，’he said．‘Let's get out of the building．’ 
        　　Quietly，they left the building．It was a dark，hot night．There were no guards in front of the prison，so they went to the gate and waited there．Suddenly，they saw the plane．It was a little plane，and it was going to come down on the road in front of the prison！ 
        　　Rilla took Kiah's hand．‘You were right，’she said．‘I'm sorry．’ 
        　　Kiah smiled．He began to feel happy．‘That's all right．I understand．I know Adai very well，and you don't．’ 
        　　The plane stopped and someone opened the door．Kiah ran across to the plane． 
        　　‘How many can you take？’he called．‘There are twelve of us．’ 
        　　‘That's all right，’someone said．‘Quickly，the spaceship is waiting．’ 
        　　The twelve people got into the little plane，and the plane be-gan to move．Rilla looked at the captain of the plane．He was tall，with brown hair．He looked nice．Was this the famous Commander Adai？ 
        　　‘Where is the spaceship？’Kiah asked． 
        　　‘At the old airport，’the man said．‘One of the fires is moving very quickly across the new forest．It's going to arrive at the west of Kisangani before tomorrow，I think．But the old airport is OK．’then the man looked at Kiah and smiled warmly．‘My brother’，he said．‘My little brother，in prison 888！’ 
        　　‘Your brother？Commander Adai？’Rilla asked．‘But you didn't tell me that！’ 
        　　Kiah smiled．‘Nobody knew，’he said．‘But now—it doesn't matter now．Everyone can know．’ 
        　　The little plane came down at the old airport，south of the town． 
        　　‘Let's be careful，’Adai said．‘We don't want someone to shoot us before we leave．’ 
        　　The spaceship was dark．Quickly，everyone jumped down from the plane and ran across to the spaceship．Soon， the spaceship left Earth，and everyone looked down at the burning planet．They saw the dark smoke over Africa，and here and there，through the smoke，the red，angry fires． 
        　　‘The fires are destroying the forest very quickly，’seru said． 
        　　Adai put his hand on Kiah's arm．‘I'm sorry about Zadak，’he said． 
        　　‘I wanted him to wait，’Kiah said．‘I wanted him to talk to you．’ 
        　　Adai's face was sad．‘He didn't want me to die，’he said quietly．‘He was a good man．And now he's dead．’ 
        　　‘And Gog is going to Mars，’seru said． 
        　　‘Mars？He's crazy！Mars isn't ready for people，’Adai said． 
        　　‘But Gog wants to go，and so he's going，’seru said．‘Tell us about the Moon colony．That isn't ready：you need more money．’ 
        　　‘No，I don't，’Adai said．‘The Moon colony is ready．I asked for more money because of Zadak：I wanted to give him money for rain．But Gog didn't listen；he wanted all Earth's money for the spaceship to Mars．’ 
        　　‘I don't want to leave Earth，’Rilla said sadly．She felt tired and afraid． 
        　　Adai smiled warmly at Rilla．‘Nobody wants to leave Earth，’he said．‘But under the Moon is the best home for us now．Wait and see．The Moon colony is a beautiful，wonderful country，with rivers and rain，forests and flowers，buildings—and the first town．You can visit Earth again soon，and bring more people to the Moon colony．We all want to help Earth，because it's our first home．I know that．At the same time，you are going to be happy under the Moon．’ 
        　　Suddenly，someone cried：‘Look at the Moon！’ 
        　　And through the window of the spaceship they saw the Moon before them，cold，white and beautiful；and under the Moon，there was the Moon colony"
    - 潘德爾的巫師
      - 簡介
        "　　17世纪的时候，英格兰有许多人相信巫术。巫师可能是一个老太婆，或是一个年轻女子——有时甚至会是一个成年男子或小男孩。不过，巫师通常都是女人。人们都害怕巫师，因为巫师仅凭一句诅咒就能使人丧命。 
        　　1612年，在兰开夏郡的潘德尔山附近住着一个名叫詹妮特·迪瓦斯的小女孩。那时她刚9岁，因家里穷时常饿肚子，长得很瘦弱。她缺衣少鞋，有时一连几天吃不上饭。生活对于她来说十分艰难。 
        　　詹妮特的外祖母老德姆代克是一个巫师。她的母亲伊丽莎白和她的姐姐艾丽森也都是巫师。就连她可怜兮兮、傻头傻脑的哥哥詹姆斯也是巫师……不管怎样，村民们是这样认为的。 
        　　本书以女主人公詹妮特的口吻来讲述她一家人的故事。故事从1634年讲起，当时詹妮特被关押在兰开斯特城堡监狱里…… 
        　　　  
        　　作者罗伊娜·艾金耶米是英国人，曾在非洲生活多年，现在在剑桥市工作、生活。她的这一有关潘德尔巫师的故事取材于发生在兰开夏郡的真实事件。 "
      - 1 THE PEDLAR
        "　　The spring of 1634 arrives， but in the prison of Lancaster Castle it stays cold．The twenty women in the prison are dirty， hungry and cold． There are no beds or chairs and so they sleep on the cold floor．There are no windows，so it is al-ways dark．The women want to get out of the prison；they want to go home．Sometimes the guards open the big，old door and put some bread and water on the floor． Then they close the door again． 
        　　My name is Jennet Device， and I am one of the twenty women in prison．Day after day， I sit on the cold floor and wait．I want to feel warm again； I want to see the sky again， and Pen-dle Hill， the beautiful hill near my home． But I am in the dark prison of Lancaster Castle， and I sit on the cold floor and wait． 
        　　One day， something happens． The guards open the big， old door．'Jennet Device！'a guard calls．'Come here at once，witch！Somebody wants to see you．' 
        　　I get up slowly because I'm very cold and I walk across the dark room to the door． Perhaps it' s someone from Read Hall！Perhaps I'm going home！ 'Jennet Device，be quick！'the guard calls again． 
        　　Someone is standing at the door with the guard．'Jennet，'he says quietly． 
        　　I see him then： a tall man with brown hair and tired blue eyes．He is not from Read Hall．It is Mr Webster，from the church at Kild wick．My legs stop moving and suddenly I want to sit down． 
        　　'Come on， come on，' the guard says angrily． He begins to close the door． 
        　　'Come out here for a minute， Jennet，' Mr Webster says quietly．'Sit down and eat something．' 
        　　I sit down at a little table near the door．Mr Webster gives me some bread and some meat and I begin to eat hungrily． 
        　　'Ten minutes，'the guard says．'After ten minutes，she goes in again． 
        　　'Thank you，'Mr Webster says． 
        　　'How is everyone at Read Hall？'I ask at last． 
        　　Mr Webster smiles．'Everyone is well． I was there yesterday．' 
        　　I close my eyes for a minute．' Mr Webster， it' s not true．I'm not a witch， you know．' 
        　　'I know，Jennet，'Mr Webster says．'Last week， I brought Edmund Robinson and his father into my church， and asked them about the boy's story． Many people believed Edmund' s story，but some people didn' t．Edmund Robinson is going to London tomorrow with his father， and a judge is going to ques-tion them．' 
        　　The guard comes back and begins to open the door． 
        　　' Time！' he says． 
        　　Mr Webster stands up．'God is here with you，Jennet．Never forget that．You can be happy，when God is with you．' 
        　　I stand up too， and take the bread from the table．' Yes， Mr Webster． God is with me； I believe that．' But happy？How can I be happy？ 
        　　I go back into the dark prison， and the guard closes the door behind me．The women run to me．'Bread！Give us bread！'they cry． 
        　　Quickly， I put the bread in my shirt．I don't want to lose it．I walk across the room and sit down on the floor． I am crying，but I feel a little better． Edmund Robinson， of Newchurch， is only ten years old． Edmund told lies about me and about many women： he saw us at a witches' meeting at a house called Hoarstones．It's not true，but many people believed him．What is he going to say in London？ The truth？ Or more lies． 
        　　But now， in the prison of Lancaster Castle， I want to tell my story． It is a story about rich men and angry villagers；about old women and hungry children． It is a true story， and it happened to me． 
        　　　 
        　　I was born in 1603． My family was always very poor， and after my father died， we were poorer． In winter， I was often ill and I was always cold and hungry． In summer， I was sometimes ill and I was often cold and hungry．We lived some miles from the village of New church， in an old house called Malkin Tower． It was dirty and cold．The rain came in through the windows and there were no doors． To the west， was the big hill called Pendle．Pendle Hill was beautiful．I loved Pendle Hill because it sat quietly all year and watched me． 
        　　My story begins on the eighteenth day of March in the year 1612． I was nine years old， and my life began to change on that day．My mother and my grandmother were ill and they sat on the floor，with their dogs，near the little fire． 
        　　My sister Alizon wanted to go out．'I'm going to look for bread，'she said． 
        　　My brother James sat near the fire，his mouth open．'Go and look for bread，'he said．'Go and look for bread．'James often said things again and again． 
        　　Alizon ran out of the house and I followed her． 
        　　'Go and look for bread！'James called． 
        　　Alizon began to go east， up the hill and past the big trees be-hind Malkin Tower．Alizon walked fast． She was eighteen years old and she was tall with long，dirty brown hair and a white，hungry face． It was cold， but there was no rain ．Alizon wore a coat and some shoes， but I had no coat and no shoes． 
        　　' Please wait a minute！' I called to my sister．' I want to come with you．' 
        　　'No！'Alizon cried．'Go back， I don't want you．' 
        　　Suddenly， a dog ran in front of Alizon． 
        　　' Good dog， good dog！' Alizon called． The dog ran to her and she put her band on its head． It was my sister' s dog and it liked her． It was a big dog with big teeth and I didn' t like it because it was always hungry． 
        　　I followed Alizon and her dog along the river to Colne．But before we arrived at Colne， we met John Law．John Law was a big fat man， about fifty years old． 
        　　'Can I have some money， please？'Alizon called．'I'm hun-gry· 
        　　John Law didn' t answer． He walked slowly because he was fat and because he carried a big bag on his back．In his bag were a lot of beautiful things．He was a pedlar and he walked across the hills and visited all the villages． 
        　　'Can I have some money？'Alizon called again．'I'm very hungry！' 
        　　John Law stopped．' Stop following me，' he said．' I'm not going to give you money．' 
        　　'Give me money！'Alizon said． 
        　　'I don' t want to give you money，' the pedlar said． He took his hat off．There was not much hair on his head．'I don't like you and I don' t like your family． A lot of bad women， you are，and your father was a bad man， too．' 
        　　Alizon was angry．'Don't talk about my father—he' s dead now！ Give me some money， old man！' 
        　　John Law' s face was red．' No！' he cried． He began to walk up the hill to the village．'Go back to your dirty family！' 
        　　Alizon began to laugh angrily．'A dead man！A dead man！'she called．'Dead before dark，John Law！'She looked down at her dog and put her hand on its head．'Go after him，dog，'she said．'Go after him and get him！' 
        　　The big dog began to run after the pedlar．John Law stopped．He looked afraid and his face was very red．'Call your dog back，you bad girl！'he shouted． 
        　　Suddenly，his mouth opened and his face went white．Slowly，he began to fall，and his big body hit the road．The dog came up to him，but the pedlar did not move． 
        　　Alizon watched John Law for a minute．Then she said to me，'Go and call someone from the village．' 
        　　I felt afraid，but I ran alog the road very quickly．'Help！Help！'I called to the villagers．'The pedlar is ill' 
        　　The villagers came out of their houses and followed me down the hill．A young man looked at John Law carefully． 
        　　'He's not dead，'he said，'but he' s very ill．Let' s move him to the nearest house．Someone must go and call his son．' 
        　　Just then， John Law began to talk very slowly．'I can' t move！' he said．' I 'm alive， but I can' t move！' 
        　　I went back to stand near Alizon．The dog sat at her feet． 
        　　'That Device girl…'John Law said slowly，'she—she cursed me！ She wanted me to die！ And her dog came to get me． 
        　　All the villagers looked at Alizon． 
        　　'I 'm sorry，'Alizon said quickly．'I'm very hungry and I wanted some money，that's all．' 
        　　'Go away！' the villagers cried．'You' re a witch， and we don' t want you in our village．' 
        　　Alizon began to run away down the hill and her dog followed． I watched the villagers．They carried John Law slow-ly up the hill to the nearest house．And then I followed my sis-ter down the hill．I was hungry and tired and Malkin Tower was many miles away． I was nine years old and I was angry． I was angry because the pedlar was ill．I was angry because the villagers didn' t like me ．And I was angry because my sister was a witch．  
        "
      - 2 ROGER NOWELL 
        "　　John Law was ill because Alizon cursed him， and his son wanted Roger Nowell to question Alizon．Roger Nowell was a rich and important man in Lancashire， and he was the judge for all the villages near Pendle Hill．He lived at Read Hall， seven miles from Newchurch． 
        　　On the thirtieth day of March，Mr Nowell's men came to Malkin Tower．Mr Nowell wanted to see Alizon at once． 
        　　We walked from Malkin Tower to Read Hall： my sister Ali-zon，my brother James，and our mother，Elizabeth Device． I fol-lowed them because I didn' t want to stay at home with my grandmother． My grandmother was a difficult old woman， and I didn' t like her． 
        　　Read Hall was an old house with a big garden and many old trees．Mr Nowell's servant opened the door for us． 
        　　'Come in，'Mr Nowell said．He was a tall man with a lot of white hair．His black coat looked warm and expensive． 
        　　Alizon followed Mr Nowell into a room with a big fire．When I saw the fire， I wanted to go in，too！ 
        　　'Are you cold，little one？'Mr Nowell asked me．'Come in，and sit near the fire．' 
        　　I went across the room and sat down on the floor， next to the wonderful， hot fire． 
        　　Mr Nowell sat behind a big fable． Two or three men， in black coats， stood near the window． Alizon stood in front of Mr Nowell． Her long hair was dirty， and her old dress looked dirti-er． 
        　　'Two weeks ago，on the eighteenth day of March， you met John Law near Colne，'Roger Nowell said．His voice was slow and careful．'Tell me about it．' 
        　　'I asked for money，'Alizon said．'The pedlar was very an－gry and I didn' t like him． I was angry， too， and I wanted him to die！' 
        　　' Tell me about your dog．'  
        　　“The dog is my friend．'Alizon said slowly．'I wanted a friend， and I found that dog two months ago． I told my grand－mother， and she liked the dog， too．' 
        　　'Did the dog run after the pedlar？' 
        　　'Yes， of course． I cursed the pedlar， and the dog ran after him！'Alizon said．' I'm sorry now， because Mr Law is ill．' 
        　　'She's a witch！'one of the men said quietly． 
        　　Roger Nowell stood up and walked across the room to the door．'James Device， come in． We want to question you．' 
        　　James came in and stood next to Alizon．James was thirteen years old， nearly a man， but he was afraid of many things． He began to cry． 
        　　'Don't be afraid，'Mr Nowell said．'we want you to talk abut your grandmother，Old Demdike．' 
        　　But Alizon wanted to talk．'Don' t ask him！' she said quick-ly．'I can tell you about my grandmother because I'm with her every minute of the day． I go with her from village to village． I go with her across Pendle Hill．She asks people for money and food， and I help her．'Alizon stopped．She looked at James， and then she looked at Mr Nowell．'She cursed a child once， and the child died later that year．' 
        　　'And you！'James said．'You cursed a child， too！Somebody told me！'James suddenly sat down on the floor and began to laugh loudly． 
        　　'Be quiet！'Roger Nowell said coldly．'Alizon Device，tell me the truth：did you curse a child？' 
        　　'Yes， I did，'Alizon cried．'The child called me a witch， and I was angry． I cursed the child，but I was sorry when the child died．' 
        　　James looked up at Alizon， his mouth open．'The child died，the child died，'he said again and again． 
        　　'Alizon Device，you cannot go home again，'Roger Nowell said slowly．'You must go to the prison at Read．' 
        　　'But I need Alizon！'my mother shouted angrily from the door．'She takes care of Old Demdike，my mother．' 
        　　I looked at my mother， at her red， angry face． I looked at Al-izon in her dirty dress， and at James on the floor with his mouth open．And then I looked at Mr Nowell：his brown eyes were warm， and his face was kind． 
        　　　 
        　　On the second day of April， Roger Nowell and his men came to Ashlar House， near the village of Fence． Mr Nowell wanted to talk to my grandmother， and we all went with her to Ashlar House． Fence was not far from Malkin Tower， and my grand-mother walked there easily． 
        　　Old Demdike was a little old woman with a fat face and no teeth．She was nearly eighty years old and she was a difficult old woman．Without Alizon，she was more difficult because my mother didn' t take care of her． 
        　　When I saw Mr Nowell again at Ashlar House， I felt happy．I looked at his kind face and his warm brown eyes， and I want-ed to be near him． But there were a lot of people in the room，and I was afraid to go to him． 
        　　'Old Demdike ， I'm going to ask you some questions， 'Mr Nowell began． 
        　　Old Demdike was not afraid． She looked at all the men， in their expensive coats and hats． 'What can a poor old woman tell you rich men？'She laughed， and when she laughed I felt afraid．My grandmother was going to tell them everything！ 
        　　And she did！ 
        　　'Twenty years ago，I met the Devil，'Old Demdike said．'He was a boy called Tibb and he was my friend．Then a cat came to visit me—a beautiful cat—and then a dog．They were all my friends．' 
        　　Mr Nowell listened quietly to my grandmother， but some of the men began to talk angrily． 
        　　'Be careful，you rich men！'my grandmother cried．'I can curse you！ I can kill people！ I make clay pictures of people—man，woman or child．And when I break the clay，that man，woman or child dies！' 
        　　People began to shout． 
        　　' She' s a witch！ She must die！' 
        　　'Say no more； she must die， with all her family！' 
        　　Roger Nowell stood up．'Be quiet！'He looked at the guards near the door．'Take her away，'he said．'Old Demdike and her granddaughter Alizon must go to the prison at Lancaster Castle．' 
        　　The guards took my grandmother by the arms and carried her out of the door and put her on a horse．Everyone ran out of Ashlar House．They ran after the horses and shouted：'Kill the witch！' 
        　　I looked for Mr Nowell， but he was on his horse， too， and he followed the guards quickly through the village． 
        　　Slowly， I followed my mother and James．Malkin Tower was my home， but I didn' t want to go back there． I was a little child， and I wanted someone kind to take care of me． 
        　　　 
        　　We stayed at home days， because we were afraid to go out．James sat in front of the fire， with his dog， and talked．'Lan-caster Castle， Lancaster Castle，' he said， again and again． My mother hit me and shouted at me because she was angry with the rich men． 
        　　But after three days，my mother suddenly said，'James！We' re hungry and we must eat！' 
        　　James didn' t answer． 
        　　My mother went across the room to James and pulled his hair．'Get up！'she shouted．'Go out and find food for us！Your father isn' t here now； you must find food for us．' She hit him over the head． 
        　　James stood up slowly．'Go out and find food，'he said．'I must go out and find food．' 
        　　It was dark， and James was out for hours． But in the morn-ing， he came back with a sheep． 
        　　'I went to Barley，'James said happily．'I got this sheep，and now we can eat．' 
        　　'Get up， Jennet！'my mother shouted 'Come and help me！' 
        　　It was Friday， the tenth day of April． My family had some friends， poor people， and on that day they came to Malkin Tower．They came and asked about Old Demdike and Alizon，and they stayed to eat and drink． 
        　　I helped my mother． We cooked the sheep over a big fire，and our visitors ate with us． At the same time， they drank．They sat by the fire and drank，and talked about Lancaster Castle． 
        　　'Let 's go there！'an old woman cried．'Let 's go to Lancast-er Castle and find Old Demdike and Alizon！' 
        　　'We can curse the guards， and break down the door！' my mother said． 
        　　'Let' s bring them home！' said an old man． 
        　　'Jennet，bring the bottle！ We need more drink！'shouted my mother． 
        　　I got up and took more drink to my mother．But I fell over one of the dogs， and the bottle broke on the floor． The drink was gone！ 
        　　' You bad child！' my mother shouted．'You' re a witch， too，you know！'She got up and began to hit me．She hit me over the head and pulled my hair．An old man laughed，and then ev-eryone laughed． 
        　　I ran back across the room．I wasn 't a witch；I was a child，nine years old，and I hated my mother and all her friends！ My face felt very hot because I was angry． I left the room and went out of the house． It was afternoon， but the sky was dark with rain．Pendle Hill was dark，too．It sat quietly and watched me． 
        　　'I'm going to Mr Nowell，' I said quietly， to Pendle Hill．'I'm going to tell him about my mother and her friends．'  
        "
      - 3 A FAMILY OF WITCHES
        "　　I ran from Malkin Tower，down the hill into Newchurch．James followed me． 
        　　'I want to go to Read Hall，too，'he said． 
        　　We ran through the trees to Sabden Brook．The noise of the river was beautiful in my ears．We went along the river to the village of Sabden， and then it began to rain． 
        　　Suddenly，we heard the noise of horses behind us．We got off the road， and watched the horses． It was Roger Nowell with some of his men． They saw us， and Mr Nowell stopped． 
        　　'It' s the Device children，' he said．' What's your name，child？' 
        　　'My name is Jennet，' I said．'We 're going to Read Hall． I want to talk to you．' 
        　　Roger Nowell looked at me with his warm brown eyes．'Very well，'he said．'Come home with me，and we can talk．'He lifted me up on to his horse， and the horse moved quickly a－long the road to the village of Read．James ran along behind us． 
        　　Very soon，we arrived at Read Hall．The servant opened the door for us，and we went into the warm house．James came in，too， and sat down next to me near the fire． 
        　　Mr Nowell put his black hat down on the table．'Bring a hot drink and some food for these children，'he told the servant．' They' re cold and hungry．' 
        　　The servant brought bread and hot milk for us， and James and I ate hungrily． I felt warm and happy in Mr Nowell' s house．I wanted to stay there all my life； I never wanted to go back to Malkin Tower． 
        　　When we finished eating，Mr Nowell looked up from his book．'You wanted to talk to me，'he said quietly．'Well， I'm listening．' 
        　　I got up ，went across the room and stood in front of Mr Nowell．' I'm afraid of my mother，' I began．' I'm afraid be-cause she' s a witch and she can kill people．' 
        　　The room was quiet．Mr Nowell said nothing，but his brown eyes were kind． 
        　　'My mother and her friends are at Malkin Tower，'I told him．'They want to go to Lancaster Castle and kill the guards．They' re going to bring Old Demdike and Alizon home again．' 
        　　Mr Nowell got up and left the room．After some time， he came back with two of his friends．They all sat down at the table． 
        　　'Jennet， I want you to tell me again about your mother and her friends．' 
        　　'They want to kill the guards at Lancaster Castle and bring Old Demdike home to Malkin Tower，'I said．Then I began to cry． 
        　　'Den't cry，'Mr Nowell said kindly．'We can help you，but we must talk to your brother first．James！'he called．'Tell me about your mother． Is she a witch？' 
        　　' She' s a witch． We' re all witches，' James began．' Old Demdike's a witch．One night，she went to the church at Newchurch and got some teeth from dead bodies there．The Devil talked to her and she brought the teeth to Malkin Tower．They're under the ground by our door！' 
        　　' Old Demdike' s a witch； we know that，' Mr Nowell said．'Tell us about your mother．' 
        　　'Mother' s a witch，' James said．' She killed Mr Robinson，from Barley village． She made a clay picture， and then she broke it， and Mr Robinson died a week later．'James smiled at Mr Nowell． He liked Mr Nowell because Mr Nowell didn' t shout at him．'And I'm a witch， too！ I can kill people！' 
        　　'No， James！' I cried．' You' re not a witch！ You don' t kill people！' 
        　　' Yes， I do，'James said angrily． His face went red．' My dog，Dandy， is the Devil and he killed a man for me． I wanted a shirt and Mr Duckworth was going to give me one of his old shirts．But in the end， he didn' t give it to me and I was very angry． I nearly killed Mr Duckworth！But I called Dandy，and he killed Mr Duckworth for me！' 
        　　I began to cry．My brother was a witch，too！ All my family were witches！ 
        　　'Don't cry，Jennet，'Mr Nowell said．'Someone must take care of you．You can stay here at Read Hall with me．' 
        　　When Mr Nowell' s men brought my mother to Read Hall， she said nothing at first． 
        　　'Tell us about the pictures of clay，'Mr Nowell said．'My men found pictures of clay at Malkin Tower．' 
        　　My mother said nothing． 
        　　'Your mother，Old Demdike，is a witch．Your daughter is a witch，'Mr Nowell said．'Your son killed Mr Duckworth be－cause of shirt．Now，tell us about the clay pictures．' 
        　　My mother said nothing． 
        　　'James told us about Mr Robinson of Barley，'Mr Nowell said ．' Did you kill him？' 
        　　Suddenly， my mother' s face went red and she began to shout at James．'A good son，you are！ You told this rich man about Jack Robinson of Barley． Well， you told the truth． I killed him！ I made a clay picture， and then I broke it， and a week later he died．I killed him because I hated him．' 
        　　She stopped and looked at me ． I wanted to run away but Mr Nowell's servant stood in front of the door．Then my mother laughed． 'Jennet Device， witch' s daughter！ You hate us， I know that． Well， it doesn' t matter because you're right： you are different．You 're my daughter，but you're not the daugh-ter of my husband． Your father was a rich man， but he never gave me money．A witch' s child，he called you．And when you were born，he never came near me ngain．Jack Robinson learnt the truth about your father．He told the villagers of Barley and they called me a bad woman， but they didn 't call your father a bad man！ Nobody in Barley gave me food again， because of Jack Robinson．I hated him，and so I killed him！' 
        　　The room was very quiet and my mother laughed again． 
        　　My hands felt cold and my face was hot， but I didn' t cry．When Mr Device died， I cried for days． But he was not my fa-ther．I looked at my mother，at her dirty hair and her ugly face， at her angry eyes． I hated her then， and I hated her for many years．  
        "
      - 4 TRUTH AND LIES 
        "　　On the twenty-seventh day of April， the guards took my mother and James to Lancaster Castle， and my life at Read Hall began．Suddenly，it was spring．The sky was blue and there were beautiful flowers on the hills． From Read Hall，Pendle Hill looked different ： it looked smaller， and it was not so important in my life．Sometimes I walked along Sabden Brook to Sabden， and then to Newchurch， and I felt happy to be near Pendle Hill again．But I never visited Malkin Tower again． 
        　　Spring changed into summer，and in August I went to Lan－caster with Mr Nowell． Lancaster was thirty miles from Read Hall， and I got very tired because I sat on a horse for hours． It was a big， noisy town． I never saw so many people before in my life and I felt afraid． 
        　　The trial of the witches of Pendle began at Lancaster Castle on the eighteenth day of August， and the judge was an impor-tant man from London．Judge Bromley listened to many people on that day， because there were a lot of witches from Lan-cashire in the prison．Old Demdike was not there because she died in May， before the judge arrived． 
        　　I waited with Mr Nowell' s servant， and when a guard called my name， I went through a big door and saw the judge behind a table． Judge Bromley was rich and important， but his eyes were cold．Suddenly， I saw my mother！ She was dirty and very thin．When she saw me，her face went red．My hair was clean now， and I wore shoes and an expensive dress． I saw my mother' s eyes： she hated me！ 
        　　'Are you a witch？'Judge Bromley asked my mother． 
        　　'No， I 'm not，'my mother answered angrily． 
        　　'Did you kill Jack Robinson，of Barley village？' 
        　　' No， I did not．' 
        　　'Jennet Device is here，' a voice said quietly． It was Mr Nowell．'She can tell us the truth about her mother．' 
        　　For a minute， my mother did not move． Then she ran across the room and shouted at me． 'You know nothing， you bad child！ And I'm your mother！Don' t forget that！' 
        　　The guards ran after my mother and pulled her to the floor． 
        　　' I'm no witch！'my mother shouted．' It' s all lies！ Jennet，you' re a witch—a child of the Devil！ You' re my daughter，and I know！' 
        　　I was afraid and I put my hands over my eyes． I didn't want to see my mother' s ugly face． The guards pulled my motherout of the room and the noise stopped． 
        　　'Jennet Device，'the judge said．'Tell us the truth about your mother．' 
        　　Roger Nowell lifted me up and put me on a table in front of the judge． 
        　　'My mother is a witch，'I began．'She has a friend， a dog called Ball． When she wants to kill somebody， she tells Ball…'I talked and talked；I told the judge everything． 
        　　Judge Bromley listened carefully．'My child，is this the truth？' 
        　　'Yes，'I answered．'I'm telling you the truth．' 
        　　The guards brought my mother back into the room again．Her face looked tired and her eyes were red． 
        　　'Elizabeth Device，your daughter told us about your dog，Ball． Your son， too， told us about the clay pictures． We know everything．' 
        　　My mother said nothing．She didn't look at the judge and she didn' t look at me． 
        　　Next， the guards brought my brother James into the room．When I saw James，I wanted to cry．James was thin and dirty and his hair was very long．He looked at the judge and at all the rich and important men in the room and he began to cry．Then he sat down on the floor． 
        　　'Stand up，James Device，'Judge Bromley said． 
        　　The guards pulled James up，but he fell to the floor again． 
        　　'You killed Mr Duckworth，'Judge Bromley said． 
        　　'I wanted a shirt，'James cried． 
        　　'Is your brother a witch？'Judge Bromley asked me． 
        　　' Yes，' I said． My brother sat on the floor， his mouth open．He looked at me，but he didn't know me． I was clean，and fat because of all the good food at Read Hall． 
        　　'James told me about his friend，Dandy，'I began．'Dandy was the Devil and—' 
        　　James heard the name Dandy，and he began to cry again．'I want Dandy！I want to go home！' 
        　　The guards pulled him up from the floor and took him out of the room． I never saw my brother again． 
        　　When the guards brought my sister Alizon in front of the judge， I said nothing．John Law，the pedlar，came into the room．He was a thin man now．He walked slowly and he talked slowly and his face looked ill ．He told the judge about that day near Colne when Alizon cursed him and her dog ran after him． 
        　　'I'm sorry！' Alizon said．' I was angry with you that day，but I'm sorry now．' Alizon 's eyes were dark and afraid， but she had no friends in that room and nobody wanted to listen to her． 
        　　Then Mr Nowell took me out and I waited with his servant in a different room． An hour later， there was the noise of many people shouting and crying． 
        　　The servant smiled．'The trial is finished，' he said 'You' re a good child Jennet．You told the judge the truth about the Witches．' 
        　　Mr Nowell took me home to Read Hall．And on the twen－tieth day of August 1612，the guards took my mother，my sis－ter and my brother out of prison ，and hanged them in front of Lancaster Castle． 
        　　　 
        　　And so I lost my family． 
        　　When I was a child， I wanted to be happy．I wanted to be warm， to wear shoes， to eat good food． I wanted someone to take care of me．That's all． My mother gave me nothing． She gave me no love．She never took care of me．Because my moth－er was a witch，my father ran away and I never knew him．My father was a rich man without a name， and I lived hungry and cold with a witch．And so I told Judge Bromley the truth about my family．Was I wrong？I don't know． 
        　　I was happy for years at Read Hall． For twenty-one years， I forgot my family．I learned to cook for the Nowell family；I worked many hours every day but I was warm and I ate good food．Every Sunday，in my best dress，I went to church；every summer I walked over Pendle Hill．I never thought about my family， because I was happy at Read Hall． 
        　　In August 1612，the guards hanged my family in front of Lancaster Castle． But their dead faces waited for me there； and a year ago， in 1633，when the guards put me in the prison in Lancaster Castle， I met them again． Day after day， I see their ugly， dead faces and hear their cold， angry voices． I think of them all the time． God is with me here，in prison． I believe that． But my dead family is with me too． 
        　　Mr Webster，from the church at Kildwick，visits me again．His blue eyes are tired，but he smiles at me． 
        　　'Edmund Robinson and his father told the truth in London， 'he says quietly．' The child told lies about you be-cause he was afraid of his father． He wanted his father to love him．' 
        　　I say nothing． Mr Webster wants to be kind， but he cannot help me．Mr Nowell cannot help me because he is dead．Ed-mund Robinson is only a child； he tells lies one day， and the truth the next day．But the truth cannot help me．What can I do against hate ，and lies？When Mr Nowell was alive，the Vil-lagers didn't talk about me．But when Mr Nowell died，the lies began．The villagers are all afraid of me——because my name is Device．They hate me——because my name is Device．They say I am a witch—— because my name is Device． 
        　　I come from a family of witches， but I am not a witch． No－body died because I cursed them．I never made clay pictures， I never had a cat or dog．I only wanted to live quietly at Read Hall and watch the changing skies over Pendle Hill． 
        　　When I was a child， I was always cold and hungry， and I hated my family because they were witches． In 1612， I told the truth， and the truth killed my family． Now， twenty－two years later，lies are going to kill me， here in Lancaster Castle， and I am cold and hungry again． 
        　　Mr Webster gives me bread，and I go back into the prison．I can never go back to Read Hall；I know that now．I must stay here in Lancaster Castle， with my dead family． 
        　　They are watching me， and waiting for me． I can never be free of them． 
        This is my true story； and I want to finish it now． "
  - ゆめよ、叶えっ--令和元年四月下/毎日記せ
    "四月末新增5月记录表，此表丢入日记四月下底部"
    - フィットネス
      "俯卧撑 20次换动作
      深蹲 加大角度 10次力竭
      提书包 10kg 能一次20后加重量
      起杠铃片 等肱二头肌不疼后 抓孔起 可能需要10kg片
      卷腹 杠铃片辅助进行
      俄罗斯转体 杠铃片上！"
      - 俯卧撑--一次20个为目标
        "达成后，开始增加难度
        2019年4月21日 10个没问题 15个勉强
        4月22日 前夜 两组10 今朝 三组10 明天目标应为一组11个，直到20"
      - 深蹲--单腿深蹲为目标--实现大腿酸疼
        "平衡练习、短程开始，缓慢进步
        4月22日 今朝 半半程单腿深蹲 三组10次 无法力竭 需要增大下蹲角度"
      - 提书包--10kg开始--两个动作(普通提，平提)--至少早晚两次
        "保护右手小臂。
        4月22日 10kg 三组 右手小臂不疼了 目标一次能20次"
      - 起杠铃片--改成非末端起
        "拒绝轻质量耐力训练
        4月22日 肱二头肌疼 未练习"
      - 腹肌--卷腹每夜至少两组--加上起腿
        "4月22日 前夜 普通卷腹难以力竭，考虑杠铃片辅助！"
    - ダイエット
      - 早餐--蛋白粉
        "吃完后改成豆浆粉
        2019年4月21日 蛋白粉
        上午 咖啡
        4月22日 蛋白粉 豆浆"
      - 中餐/晚餐--1两饭+2小菜+肉随意——晚上不应吃米饭
        "2019年4月21日
        	中午 清真食堂 一两 豆角茄子
        	鸡腿 晚上 小菜 炖胡萝卜 牛肉
        2019年4月22日
        	中午 胡萝卜+鸡腿
        	晚上 70g全麦面包+酸奶 "
      - 夜宵--蛋白粉/豆浆粉
    - ＣＳ
      - 软考程序员--知识点总结&anki录入 5.10前完成
        "完成后 开始刷题
        2019年4月21日 进行中"
      - MOOC计算机系统基础--每天清早
        "2019年4月21日 进行中"
      - MOOCweb技术/数据结构/Linux--晚上？
      - Java视频--晚上？
    - 卒業するため
      - 文献阅读，每日下午空闲时间
      - 束流匹配COSY
    - 他
      - 古文-盐铁论-词汇5个左右
        "2019年4月21日 进行中"
      - 扇贝阅读-背熟悉的单词，总词汇突破1w
        "2019年4月21日 进行中 今日单词9000"
      - anki数量统计
        "2019年4月21日--20531"
      - workflowy--evernote备份
        "2019年4月21日 进行中"
- 2019年5月
  - 0523组会
    "1 陈鹤鸣
      太恐怖了。开机三四个弹窗广告。验证cct受力
    2 "
  - 0508组会
    "快速改变的磁铁的磁场检测。
    测量磁场。
    小线圈 长线圈。
    
    cct应力
    理想情况
    
    
    电离室"
  - 外公的病
  - 问学长实习的事情
  - 秦老师的任务
  - 快递寄爱姨的信+本子(数值分析)
  - !!数值分析 编程题 5月份做完?
    "五月份开始"
  - 减少手机空间 印象笔记备份继续！
  - cosy包络数值数据？
- 2019年6月
  - 时间就是知识
    - 19年6月
      "0610 软考一小时三分
      计算机网络 18分
      java 一小时八分
      
      0611"
  - !!心理健康 考试时间地点? 压力事件完整分析--开卷，所以网上找描述，打印出来，综合起来考试?
  - 凪のあすから
    - 第一話　海と大地のまんなかに
      "[先島の家　光朝ごはん準備中]
      光：仕上げは強火っと
      明里：光、ごはんまだ？
      光：うっせぇ、今そっち持っていくから、静かに待ってろ
      光：あっちちちっ。ほら食え
      明里：おっ、朝のにおい
      光：ごっさん。じゃあ、片づけとけよ
      明里：ういっす。まだはやくない？
      光：愛花呼びに行ってやらねぇとよ
      明里：ああ、はいはい。あんた達、いつまでも懲りずに仲良しだね【四人组以前经常闯祸吗？】
      光：うっせぇ
      光：しゃあねぇんだよ。だってあいつは、[家出]どうしょうもなくヘタレで、俺はついててやらなけりゃ
      光：やっぱ今朝はしょっぱいな。
      光：おはよう。[掃除するおばさんへ]
      子ども：あっ、光お兄ちゃんだ
      おばさん：おはよう
      [登校前待ち合わせ場所　三人待つ]
      千咲：あっ、おはよう、光
      要：おはよう
      光：あっ。愛花、てめえその格好
      光：約束したろう、今日は波中の制服着てくって、何浜中の着てんだよ？
      愛花：で、でも、そういう異分子っぱいのって、反感、買っちゃうかもしれないよ
      光：お前な、廃校になったからって、波中魂は消えねえよ。浜中の奴らにもろ、目に物見せてやろうぜ、な！
      愛花：痛いよ
      千咲：もう、光
      要：朝からテンション高すぎだよ
      愛花：やっ、やっぱ着替えてくるよ
      光：最初からそうしろっての
      愛花：もう怒鳴っちゃ嫌だよ
      光：行こうぜ
      千咲：でも
      光：いいから
      [愛花着替えてきて、三人もう上った]
      愛花：ひいくん？ちいちゃん？...要？[泣き出す]ひーーくん！[漁網で引き上がれる]
      [三人　光岸で座る]
      要：先行くんじゃないの
      光：一休みしてから、服も乾かない
      千咲：[笑]やっぱり愛花が心配なんだ[前行く]
      光：てめえ、千咲！
      要：[千咲について行く]先行ってるよ
      光：[漁船現れる]あいつら、また勝手に漁場広げようとしやがって
      [漁船　木原勇と紡]
      木原勇：でかそうだな　
      [愛花吊り上がれた]
      千咲：[岸で見た]愛花？
      光：[ぼうっとしてる]俺は見てしまったんだ。誰かは誰かと特別な出会いをした、その瞬間を
      
      [OP　lull～そして僕らは]
      
      [並んだ漁船　沿岸道　浜中校門]
      [教室]
      先生：うぇぇぇ。波路(なみじ)中学は廃校になってね。うちの美浜(みはま)中学と統合されることになったんだけど。まぁ、みんな仲良くできるようね。さあ、挨拶してちょうだい
      千咲：はっ、はい。ひ、比良平千咲(ひらだいら ちさき)です。地上の生活に早くなれることはできたらいいだなあって思ってます。よろしくお願いします
      要：伊佐木要(いさきかなめ)です。どうも
      [他の生徒たち我慢できないように笑い出す　紡ずっと窓の外見てる]
      狭山旬：[鼻つまむ]なんか、魚臭くねえ？
      江川岳：やっぱ海の奴ら、だせえよな
      光：[怒る]ああ、くせえくせえ。先島光、地上の奴ら豚臭いっすね。よろしく、ペギー
      愛花：ひいくん。
      光：愛花、お前もかましてやれ
      愛花：か、かますって。で、できないよ、そんなの
      光：[殴りそう]やれっていうの
      千咲：ちょっと光
      愛花：もう、ひいくんとおしゃべりしないよ
      光：じょうとう
      女子生徒：何あれ
      男子生徒：痴話げんかよ
      女子生徒：朝早々何やってんの
      
      [女子更衣室]
      千咲：ほら、ジャージーだたったら、そんなに悪目立ちしないから。ねえ
      愛花：これ、ちいちゃんのジャージー？
      千咲：私は体育休むから、使って
      愛花：ありがと、ちいちゃん
      千咲：[優しく]光は愛花のこと守らなきゃって思ってるんだよ
      愛花：うーん、ひいくんにごめんねって言わなきゃ、だよね
      千咲：[愛花の頭撫でる]愛花は悪いことしてないでしょう。その代わり、光は謝ってきたら、きちんと許してあげて
      愛花：うん。
      [口笛音 千咲がカーテン引く　窓の外　海見える運動場　男子生徒だち走ってる]
      体育先生：ほらとろとろ走ってんじゃねえぞ
      愛花：[紡見て]あの人、速いね。陸の上を泳いでるみたい[目キラキラして]
      愛花：おっ、光だ。
      
      光：[紡の後ろで必死に走る]地上の奴らに負けてたまるかよ。負けて[自分の足につまずいて紡に当てる]
      紡：おっ。[二人転んだ]
      千咲：ああ！
      体育先生：お前ら、何やってんだ
      
      [放課後　光一人　帰る道　サヤマート　明里バイトしてる]
      光：くそ！
      明里：あれ、光？どうしたの、愛花ちゃんは？
      光：行きも帰りも一緒なんて、子供じゃねぇんだよ
      明里：[光の鼻をつまんで笑う]ははは、子供がよく言うよ
      光：うっせぇ。おっ
      [マートの塀　ビール箱の中　小学生二人しゃがんでなにかをしてて、気づいたらすぐ逃げた]
      明里：ああ、またやられたかな
      光：やられたって？[どっかいと書いてある]ガム文字？
      明里：まぁ、眼立たないところだから。最初的に何て書くつもりなのか、ちょっと気になってね。[文字見る]どっかいか、どっかいけかな。ここまでくると、やっぱり…
      光：知ってるガキなのか
      明里：何でもない。ほら、そろそろ帰んな。今日はあんたが食事当番なんだから。あっ、夜はあっさり潮汁がいいな
      光：今夜は豚の生姜焼き！
      明里：えええ？
      
      [光一人　シオシシオに入る]
      青年会の男：おお、光、こっち来い。
      光：うん？
      青年会の男：なんでも愛花がつられたっていうじゃねぇか
      光：うおっ！
      青年会の男：あいつら、漁場まで侵略してやがって(ぎょって)、うちの畑の魚まで引っ掛かっちまう。塩害のせいで、こっちだっての生活が苦しいっていうのに。しかもあいつら、お船引きをやらないって言い出してんだ
      光：[ビックリ]えっ、お船引きを
      青年会の男：信じられねぇだろう
      光：[傍白]昔、人はみんな海に住んでいた。でも、陸に憧れた人間が海を捨てた。海で暮らせてように海神様がくれた特別な羽衣を脱ぎ捨てて、陸上がった人間たちは数々な苦難を待ち受けていた。日照が続き、水を求めて争い合う。これを海神様が怒ってると考えた人間たちは、少女を生贄として船に載せ、海に流した。これがお船引きの始まり。今じゃ生贄じゃなく、米やら菓子やらだけど…海に住む俺らは海神様と生贄の女がやらかした、その子孫らしい
      青年会の男：お船引きをやめて、海神様がお怒りになったらどうすんだい。これだから人間は…
      光：俺らだって人間じゃんすか、一応
      青年会の男：エナ守ってねえ奴らと一緒にすんな
      青年会の男：格が違う。格が
      光：[溜息]俺、そろそろ帰ります
      青年会の男：宮司様に言っといてくれ、これからどうっすかって、うろこ様にも伺いを立てねえと
      光：はいはい
      青年会の男：おい。気のない返事困っぞ。鳴波神社の跡取り
      光：ふいふい
      
      [元気ない光　鳴波神社への階段で　右手碗、左手鉄の籠の愛花と出会った]
      光：[愛花を見た　小声で]うお
      愛花：ああっ[見えないふりして]
      光：[怒る]チっ[見えないふりして　愛花を通り過ぎる]
      愛花：うわっ
      光：なんだよ
      愛花：うええ
      光：俺とおしゃべり、しないじゃねぇの。[後ろの愛花を見て]御霊火か。そっちは煮物？
      愛花：[うなずく]
      光：うろこ様に？
      愛花：[うなずく]
      光：[溜息]うはい。悪かったよ、今日
      愛花：[笑顔浮かべて]うん！
      光：[ビックリ]おっ[顔赤く]
      
      [鳴波神社]
      光：よーす。うろこ様、愛花
      愛花：こにちは
      うろこ様：よう来たな、向井戸の
      愛花：あ、あのう。御霊火が切れたので、もらいに来ました
      うろこ様：[いやがるよう]うう[火を引く]
      愛花：あ、ありがとうございます。これ、おばあちゃんがうろこ様好きだから、筍(たけのこ)って
      うろこ様：[嗅ぐ]ううん。ええ匂いじゃの
      愛花：はい。筍と人参と鳥とちゃんと別々に炊いて、味を混ざらないように…
      うろこ様：お前じゃ[手から腕沿いて嗅ぐ]
      愛花：[怖がる]えええ！
      うろこ様：雌の匂いがする
      愛花：いやああああ！[碗でうろこ様の顔を覆いつき　外逃げ]
      うろこ様：なんつうことするんじゃ。呪うぞ
      光：[何も分からないように]うろこ様、雌の匂いって？
      うろこ様：発情期じゃ
      光：[ビックリ]ああ！
      うろこ様：それよりどうじゃった、地上は
      光：あーあー
      うろこ様：お船引きはどうなるんかなの
      光：もういいんじゃ。[1239]
      
      
      －－－－－－－－－－－－－－－－－－－－－－－－
      仕上げ：最後にすること
      強火：つよび
      ごっさん：ごちそうさま
      懲りずに：「こりる―ある事をした際にいやな目にあって、再び同じことをする気力がなくなる」
      ヘタレ：俗に、弱々しく気力にとぼしいさま。また、そのような人。語源については、動詞「へたる」の変形、「屁垂れ」の意など諸説ある。
      しょっぱい：塩ぱい
      反感を買う：自分のしたことがもとになって、好ましくないことを身に負う。招く。
      もろ：「諸」、みんな、全面的。
      諸に負ける：みんな負ける。
      テンション：精神的な緊張。転じて、不安。
      怒鳴る：「どなる」大声で言う
      でかす：「出来す」
      つまむ：指先ではさむ。指先や箸(はし)などではさみもつ。「鼻を―む」
      
      だせえ：「ダサい」「恰好悪い」「野暮ったい」「垢抜けない」などといった意味を持つ俗語・若者語である
      かます：草包，草袋；紧紧插入，塞进，顶回去，杀住对方的威风
      痴話：「ちわ」情话,枕边话
      痴話げんか：因争风吃醋而吵架
      ジャージー：紧身运动套衫，运动服，平针织物
      悪目立ち：「わるめだち」人目に立つが、見る人は良くないと感じること
      たまる：「堪る」
      しゃがむ：ひざを曲げ、腰を落として姿勢を低くする
      塀：「へい」壁
      ここまでくると、やっぱり：都做到这份上了，果然...
      あっさり：〔味が〕清淡
      潮汁・塩汁：「しおじる」１ 塩味だけで調味した汁もの。うしおじる。２ 海水。塩水。
      生姜：「しょうが」
      生姜焼き：「しょうがやき」
      陸に憧れた：「に」
      羽衣：はごろも
      日照：「ひてり」
      生贄：いけにえ
      やらかした：搞,干,办.
      宮司様：ぐうじさま
      跡取り：「あととり」
      小声：こごえ
      ～を通り過ぎる：走过，经过
      煮物：にもの
      御霊火：みたまび
      竹の子：筍　竹笋
      嗅ぐ：かぐ
      腕：手臂的意思"
    - いつもあの音が
      "0：50あまつかぜ
      3：30結ばれる絆
      4：47どこまでも深く
      6：46
      
      "
  - 软考57
    "试题二
    试题五"
  - 日记模板
    "[昨日への話]
    [一日流]
    [一番記したいこと・世の美しさとか]
    [感想]"
  - 計算機
  - 自然辩证法
    - 一 科学与技术的观念辨析
      "什么是科学。系统性
      694876091 qq邮箱 熊老师"
  - 健身
    - 201906
      "20190607 提书包10.65kg 可以做10个 过于轻松
      20190607 11.28kg 还行 10 个 勉强坚持
      20190608 11.80kg 5个/二头  10个/三角 结论:二头到10个再加重
      20190609 12.20kg
      20190611 12.8kg 很重的 二头肌只能5个 三头肌还可以
      提书包分为两个动作
      	1-肱二头肌
      	2-三角肌"
- 2019年7月
  - 手紙
  - 寫作
  - 吃糖所帶來的，性別的思考
  - 性別
  - 50min 基础
  - 40min 网络
  - 网络 20min 0727
  - 20190728 42min Internet
  - 20190728 55min Java
  - 文字の力
  - 2018年12月12日--长时间高烈度的战争中，普通人的生活是一番怎样的景象
  - 0713 59min java
  - 数据结构  1:25
  - 0720 48min Java
  - 0720 1h07 基础
  - 規則
    - 日記每次洋洋灑灑寫了上千字，所以需要概述，一句話的【概述】。
    - 鍛煉身體是常態，需要有記錄。【健身】
    - 采用模板日记法 2019年4月21日
  - 软考1小时
  - 2019年7月10日 网络 1:4
  - 2019年7月9日 网络 1：4
  - anki待录入
    "动词第一人称复数主动式词尾 -mus
    动词第二人称复数主动式词尾 -tis
    动词第三人称复数主动式词尾 -nt
    
    软件能力成熟度模型
    第三级 已定义√ 做到了标准化√
    第四级 已管理√ 做到主动进行√ 
    第五级 优化级√  可以改进、优化
    
    RUP统一软件开发过程
    四阶段之三 构建√ 产品：可以使用的产品√
    四阶段之四 移交 产品：最终产品
    
    软考
    可维护性
    系统设计阶段 模块化
    系统实施 代码风格
    
    
    类间的聚合关系√
    弱的整体部分关系
    整体死了，部分不会消亡
    比喻：公司与员工
    
    类间的组合关系√
    强的整体部分关系
    整体死了，部分也没了
    比喻：人与大脑
    "
- 草稿
  - 5 2 7 3 9 1 5
  - p 5
  - pivot - 5 j - 2
  - 没有变化 pi-2 j-7
  - pi2 j3 pi7
  - 5 2 3 7 9 1 5
  - pi3 j9 1
  - 5 2 3 1 9 7 5
  - pi1 j7
  - 1 2 3 5 9 7 5
