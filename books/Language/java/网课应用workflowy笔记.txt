项目

- 尚硅谷2020 谷粒商城
  "很可能是一生中，第一次、也是最后一次从零开始搭建完整的，大型web项目"
  - 项目介绍
    "用到的技术
    	后端
    	springboot mybatis
    	springcloud
    	docker
    
    	前端
    	vue + element ui
    
    	k8s集群
    	运维 部署 发布
    
    电商模式
    	B2C 供应商卖给消费者
    
    	c2c 淘宝
    
    基础要求
    	熟悉 springboot 开发流程
    	了解 springcloud
    	熟悉 git maven
    	熟悉 linux mysql redis docker 基本操作
    	了解 html css js vue
    
    服务
    	商品 支付 优惠 用户 仓储 秒杀 订单 检索 认证 购物车 后台
    	第三方服务 物流 短信 金融 身份认证"
  - 项目文档
    - gateway 网关 20088/api/
    - 后台服务 /api
      - /product 商品服务 35200
        - /category 商品三级分类
          "查询全部，以树形结构返回
          	GET /api/product/category/list/tree
          	2020年5月8日
          
          删除
          	POST /product/category/delete + JSON
          	传入catId数组，例如 [1,2,3]
          
          新增
          	POST /product/category/save + JSON
          
          修改
          	POST /product/category/update + JSON"
      - ware 仓储服务 35300
      - order 订单服务 35400
      - coupon 优惠券服务 35500
      - member 用户服务 35600
      - thirdParty 第三方服务 35700
      - search ES检索服务 35800
      - renren-fast 后台管理 28080
  - 分布式基础 全栈开发
    - 初始化
      - 环境搭配
        - Linux centos7
          "工作目录 /var/grainmall"
        - MySQL 23306
          - docker mysql:5.7
            "docker run -p 23306:3306 --name mysqlGrain \
            -v /var/grainmall/docker/mysql57/mysqlGrain/conf:/etc/mysql \
            -v /var/grainmall/docker/mysql57/mysqlGrain/logs:/var/log/mysql \
            -v /var/grainmall/docker/mysql57/mysqlGrain/data:/var/lib/mysql \
            -e MYSQL_ROOT_PASSWORD=123456 \
            -d mysql:5.7"
          - MySQL 配置默认编码
            "进入 /var/grainmall/docker/mysql57/mysqlGrain/conf
            创建文件 vi my.cnf
            写入 
            ---------------
            [mysqld]
            character-set-server=utf8
            [client]
            default-character-set=utf8
            [mysql]
            default-character-set=utf8
            ----------------
            重启容器 docker restart 5e96c8f4a291 // 最后一个是容器id
            
            验证 MySQL命令 show variables like '%char%';
            可以看到
            -----------------
            character_set_client	utf8mb4
            character_set_connection	utf8mb4
            character_set_database	utf8
            character_set_filesystem	binary
            character_set_results	utf8mb4
            character_set_server	utf8
            character_set_system	utf8
            character_sets_dir	/usr/share/mysql/charsets/
            "
        - redis 26379
          - 先创建 redis.conf 文件
            "mkdir -p /var/grainmall/docker/redis5/redisGrain/conf
            touch /var/grainmall/docker/redis5/redisGrain/conf/redis.conf"
          - docker redis:5
            "docker run -p 26379:6379 --name redisGrain \
            -v /var/grainmall/docker/redis5/redisGrain/data:/data \
            -v /var/grainmall/docker/redis5/redisGrain/conf/redis.conf:/etc/redis/redis.conf \
            -d redis:5 redis-server /etc/redis/redis.conf
            
            最后一行指的是启动容器后，执行 redis-server /etc/redis/redis.conf "
          - 配置持久化
            "vi redis.conf
            新增一行
            appendonly yes
            
            重启 docker restart redisGrain"
        - 开发环境
          - JDK1.8
          - maven 配置1.8编译
            "<profile>
                <id>jdk-1.8</id>
            
                <activation>
                    <activeByDefault>true</activeByDefault>
                    <jdk>1.8</jdk>
                </activation>
                <properties>
                    <maven.compilier.source>1.8</maven.compilier.source>
                    <maven.compilier.target>1.8</maven.compilier.target>
                    <maven.compilier.compilierVersion>1.8</maven.compilier.compilierVersion>
                </properties>
            </profile>"
          - git
            -  ssh-keygen -t rsa -C "578562554@qq.com"
            -  cat ~/.ssh/id_rsa.pub
            - 到 github 设置 sshkey
            - 测试 ssh -T git@github.com
              "Hi madokast! You've successfully authenticated, but GitHub does not provide shell access."
          - vscode
            - 插件
              "auto close tag
              auto renaming tag
              chinese
              eslint
              html css support
              html snippets
              javascript(es6)
              live server
              open in broser
              veter
              Vue 2 Snippets"
      - 初始化后端项目
        - github 新建仓库 grainmall2020
        - ideaj 克隆仓库
        - 创建5个模块
          "商品服务 product                              端口 35200
          仓储服务 ware                                  端口 35300
          订单服务 order                                 端口 35400
          优惠券服务 coupon                          端口 35500
          用户服务 member                            端口 35600
          
          使用spring.io初始化项目，引入 web openfeign"
        - 编写父POM文件
          - 将模块内一个pom复制出来，然后修改
            "<?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
                <modelVersion>4.0.0</modelVersion>
                <groupId>com.atguigu.gulimall</groupId>
                <artifactId>gulimall</artifactId>
                <version>0.0.1-SNAPSHOT</version>
                <name>gulimall</name>
                <description>谷粒商城-总POM</description>
            
                <packaging>pom</packaging>
            
                <modules>
                    <module>gulimall-product</module>
                    <module>gulimall-ware</module>
                    <module>gulimall-order</module>
                    <module>gulimall-coupon</module>
                    <module>gulimall-member</module>
                </modules>
            </project>"
        - 设置 .gitingore
          "target/
          pom.xml.tag
          pom.xml.releaseBackup
          pom.xml.versionsBackup
          pom.xml.next
          release.properties
          dependency-reduced-pom.xml
          buildNumber.properties
          .mvn/timing.properties
          # https://github.com/takari/maven-wrapper#usage-without-binary-jar
          .mvn/wrapper/maven-wrapper.jar
          
          
          **/mvnw
          **/mvnw.cmd
          **/.mvn
          **/target/
          .idea
          **/.gitignore"
        - 第一次commit push
      - 初始化数据库
        - gulimall_pms 商品
          "drop table if exists pms_attr;
          
          drop table if exists pms_attr_attrgroup_relation;
          
          drop table if exists pms_attr_group;
          
          drop table if exists pms_brand;
          
          drop table if exists pms_category;
          
          drop table if exists pms_category_brand_relation;
          
          drop table if exists pms_comment_replay;
          
          drop table if exists pms_product_attr_value;
          
          drop table if exists pms_sku_images;
          
          drop table if exists pms_sku_info;
          
          drop table if exists pms_sku_sale_attr_value;
          
          drop table if exists pms_spu_comment;
          
          drop table if exists pms_spu_images;
          
          drop table if exists pms_spu_info;
          
          drop table if exists pms_spu_info_desc;
          
          /*==============================================================*/
          /* Table: pms_attr                                              */
          /*==============================================================*/
          create table pms_attr
          (
             attr_id              bigint not null auto_increment comment '属性id',
             attr_name            char(30) comment '属性名',
             search_type          tinyint comment '是否需要检索[0-不需要，1-需要]',
             icon                 varchar(255) comment '属性图标',
             value_select         char(255) comment '可选值列表[用逗号分隔]',
             attr_type            tinyint comment '属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]',
             enable               bigint comment '启用状态[0 - 禁用，1 - 启用]',
             catelog_id           bigint comment '所属分类',
             show_desc            tinyint comment '快速展示【是否展示在介绍上；0-否 1-是】，在sku中仍然可以调整',
             primary key (attr_id)
          );
          
          alter table pms_attr comment '商品属性';
          
          /*==============================================================*/
          /* Table: pms_attr_attrgroup_relation                           */
          /*==============================================================*/
          create table pms_attr_attrgroup_relation
          (
             id                   bigint not null auto_increment comment 'id',
             attr_id              bigint comment '属性id',
             attr_group_id        bigint comment '属性分组id',
             attr_sort            int comment '属性组内排序',
             primary key (id)
          );
          
          alter table pms_attr_attrgroup_relation comment '属性&属性分组关联';
          
          /*==============================================================*/
          /* Table: pms_attr_group                                        */
          /*==============================================================*/
          create table pms_attr_group
          (
             attr_group_id        bigint not null auto_increment comment '分组id',
             attr_group_name      char(20) comment '组名',
             sort                 int comment '排序',
             descript             varchar(255) comment '描述',
             icon                 varchar(255) comment '组图标',
             catelog_id           bigint comment '所属分类id',
             primary key (attr_group_id)
          );
          
          alter table pms_attr_group comment '属性分组';
          
          /*==============================================================*/
          /* Table: pms_brand                                             */
          /*==============================================================*/
          create table pms_brand
          (
             brand_id             bigint not null auto_increment comment '品牌id',
             name                 char(50) comment '品牌名',
             logo                 varchar(2000) comment '品牌logo地址',
             descript             longtext comment '介绍',
             show_status          tinyint comment '显示状态[0-不显示；1-显示]',
             first_letter         char(1) comment '检索首字母',
             sort                 int comment '排序',
             primary key (brand_id)
          );
          
          alter table pms_brand comment '品牌';
          
          /*==============================================================*/
          /* Table: pms_category                                          */
          /*==============================================================*/
          create table pms_category
          (
             cat_id               bigint not null auto_increment comment '分类id',
             name                 char(50) comment '分类名称',
             parent_cid           bigint comment '父分类id',
             cat_level            int comment '层级',
             show_status          tinyint comment '是否显示[0-不显示，1显示]',
             sort                 int comment '排序',
             icon                 char(255) comment '图标地址',
             product_unit         char(50) comment '计量单位',
             product_count        int comment '商品数量',
             primary key (cat_id)
          );
          
          alter table pms_category comment '商品三级分类';
          
          /*==============================================================*/
          /* Table: pms_category_brand_relation                           */
          /*==============================================================*/
          create table pms_category_brand_relation
          (
             id                   bigint not null auto_increment,
             brand_id             bigint comment '品牌id',
             catelog_id           bigint comment '分类id',
             brand_name           varchar(255),
             catelog_name         varchar(255),
             primary key (id)
          );
          
          alter table pms_category_brand_relation comment '品牌分类关联';
          
          /*==============================================================*/
          /* Table: pms_comment_replay                                    */
          /*==============================================================*/
          create table pms_comment_replay
          (
             id                   bigint not null auto_increment comment 'id',
             comment_id           bigint comment '评论id',
             reply_id             bigint comment '回复id',
             primary key (id)
          );
          
          alter table pms_comment_replay comment '商品评价回复关系';
          
          /*==============================================================*/
          /* Table: pms_product_attr_value                                */
          /*==============================================================*/
          create table pms_product_attr_value
          (
             id                   bigint not null auto_increment comment 'id',
             spu_id               bigint comment '商品id',
             attr_id              bigint comment '属性id',
             attr_name            varchar(200) comment '属性名',
             attr_value           varchar(200) comment '属性值',
             attr_sort            int comment '顺序',
             quick_show           tinyint comment '快速展示【是否展示在介绍上；0-否 1-是】',
             primary key (id)
          );
          
          alter table pms_product_attr_value comment 'spu属性值';
          
          /*==============================================================*/
          /* Table: pms_sku_images                                        */
          /*==============================================================*/
          create table pms_sku_images
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             img_url              varchar(255) comment '图片地址',
             img_sort             int comment '排序',
             default_img          int comment '默认图[0 - 不是默认图，1 - 是默认图]',
             primary key (id)
          );
          
          alter table pms_sku_images comment 'sku图片';
          
          /*==============================================================*/
          /* Table: pms_sku_info                                          */
          /*==============================================================*/
          create table pms_sku_info
          (
             sku_id               bigint not null auto_increment comment 'skuId',
             spu_id               bigint comment 'spuId',
             sku_name             varchar(255) comment 'sku名称',
             sku_desc             varchar(2000) comment 'sku介绍描述',
             catalog_id           bigint comment '所属分类id',
             brand_id             bigint comment '品牌id',
             sku_default_img      varchar(255) comment '默认图片',
             sku_title            varchar(255) comment '标题',
             sku_subtitle         varchar(2000) comment '副标题',
             price                decimal(18,4) comment '价格',
             sale_count           bigint comment '销量',
             primary key (sku_id)
          );
          
          alter table pms_sku_info comment 'sku信息';
          
          /*==============================================================*/
          /* Table: pms_sku_sale_attr_value                               */
          /*==============================================================*/
          create table pms_sku_sale_attr_value
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             attr_id              bigint comment 'attr_id',
             attr_name            varchar(200) comment '销售属性名',
             attr_value           varchar(200) comment '销售属性值',
             attr_sort            int comment '顺序',
             primary key (id)
          );
          
          alter table pms_sku_sale_attr_value comment 'sku销售属性&值';
          
          /*==============================================================*/
          /* Table: pms_spu_comment                                       */
          /*==============================================================*/
          create table pms_spu_comment
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             spu_id               bigint comment 'spu_id',
             spu_name             varchar(255) comment '商品名字',
             member_nick_name     varchar(255) comment '会员昵称',
             star                 tinyint(1) comment '星级',
             member_ip            varchar(64) comment '会员ip',
             create_time          datetime comment '创建时间',
             show_status          tinyint(1) comment '显示状态[0-不显示，1-显示]',
             spu_attributes       varchar(255) comment '购买时属性组合',
             likes_count          int comment '点赞数',
             reply_count          int comment '回复数',
             resources            varchar(1000) comment '评论图片/视频[json数据；[{type:文件类型,url:资源路径}]]',
             content              text comment '内容',
             member_icon          varchar(255) comment '用户头像',
             comment_type         tinyint comment '评论类型[0 - 对商品的直接评论，1 - 对评论的回复]',
             primary key (id)
          );
          
          alter table pms_spu_comment comment '商品评价';
          
          /*==============================================================*/
          /* Table: pms_spu_images                                        */
          /*==============================================================*/
          create table pms_spu_images
          (
             id                   bigint not null auto_increment comment 'id',
             spu_id               bigint comment 'spu_id',
             img_name             varchar(200) comment '图片名',
             img_url              varchar(255) comment '图片地址',
             img_sort             int comment '顺序',
             default_img          tinyint comment '是否默认图',
             primary key (id)
          );
          
          alter table pms_spu_images comment 'spu图片';
          
          /*==============================================================*/
          /* Table: pms_spu_info                                          */
          /*==============================================================*/
          create table pms_spu_info
          (
             id                   bigint not null auto_increment comment '商品id',
             spu_name             varchar(200) comment '商品名称',
             spu_description      varchar(1000) comment '商品描述',
             catalog_id           bigint comment '所属分类id',
             brand_id             bigint comment '品牌id',
             weight               decimal(18,4),
             publish_status       tinyint comment '上架状态[0 - 下架，1 - 上架]',
             create_time          datetime,
             update_time          datetime,
             primary key (id)
          );
          
          alter table pms_spu_info comment 'spu信息';
          
          /*==============================================================*/
          /* Table: pms_spu_info_desc                                     */
          /*==============================================================*/
          create table pms_spu_info_desc
          (
             spu_id               bigint not null comment '商品id',
             decript              longtext comment '商品介绍',
             primary key (spu_id)
          );
          
          alter table pms_spu_info_desc comment 'spu信息介绍';
          "
        - gulimall_oms 订单
          "drop table if exists oms_order;
          
          drop table if exists oms_order_item;
          
          drop table if exists oms_order_operate_history;
          
          drop table if exists oms_order_return_apply;
          
          drop table if exists oms_order_return_reason;
          
          drop table if exists oms_order_setting;
          
          drop table if exists oms_payment_info;
          
          drop table if exists oms_refund_info;
          
          /*==============================================================*/
          /* Table: oms_order                                             */
          /*==============================================================*/
          create table oms_order
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             order_sn             char(32) comment '订单号',
             coupon_id            bigint comment '使用的优惠券',
             create_time          datetime comment 'create_time',
             member_username      varchar(200) comment '用户名',
             total_amount         decimal(18,4) comment '订单总额',
             pay_amount           decimal(18,4) comment '应付总额',
             freight_amount       decimal(18,4) comment '运费金额',
             promotion_amount     decimal(18,4) comment '促销优化金额（促销价、满减、阶梯价）',
             integration_amount   decimal(18,4) comment '积分抵扣金额',
             coupon_amount        decimal(18,4) comment '优惠券抵扣金额',
             discount_amount      decimal(18,4) comment '后台调整订单使用的折扣金额',
             pay_type             tinyint comment '支付方式【1->支付宝；2->微信；3->银联； 4->货到付款；】',
             source_type          tinyint comment '订单来源[0->PC订单；1->app订单]',
             status               tinyint comment '订单状态【0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单】',
             delivery_company     varchar(64) comment '物流公司(配送方式)',
             delivery_sn          varchar(64) comment '物流单号',
             auto_confirm_day     int comment '自动确认时间（天）',
             integration          int comment '可以获得的积分',
             growth               int comment '可以获得的成长值',
             bill_type            tinyint comment '发票类型[0->不开发票；1->电子发票；2->纸质发票]',
             bill_header          varchar(255) comment '发票抬头',
             bill_content         varchar(255) comment '发票内容',
             bill_receiver_phone  varchar(32) comment '收票人电话',
             bill_receiver_email  varchar(64) comment '收票人邮箱',
             receiver_name        varchar(100) comment '收货人姓名',
             receiver_phone       varchar(32) comment '收货人电话',
             receiver_post_code   varchar(32) comment '收货人邮编',
             receiver_province    varchar(32) comment '省份/直辖市',
             receiver_city        varchar(32) comment '城市',
             receiver_region      varchar(32) comment '区',
             receiver_detail_address varchar(200) comment '详细地址',
             note                 varchar(500) comment '订单备注',
             confirm_status       tinyint comment '确认收货状态[0->未确认；1->已确认]',
             delete_status        tinyint comment '删除状态【0->未删除；1->已删除】',
             use_integration      int comment '下单时使用的积分',
             payment_time         datetime comment '支付时间',
             delivery_time        datetime comment '发货时间',
             receive_time         datetime comment '确认收货时间',
             comment_time         datetime comment '评价时间',
             modify_time          datetime comment '修改时间',
             primary key (id)
          );
          
          alter table oms_order comment '订单';
          
          /*==============================================================*/
          /* Table: oms_order_item                                        */
          /*==============================================================*/
          create table oms_order_item
          (
             id                   bigint not null auto_increment comment 'id',
             order_id             bigint comment 'order_id',
             order_sn             char(32) comment 'order_sn',
             spu_id               bigint comment 'spu_id',
             spu_name             varchar(255) comment 'spu_name',
             spu_pic              varchar(500) comment 'spu_pic',
             spu_brand            varchar(200) comment '品牌',
             category_id          bigint comment '商品分类id',
             sku_id               bigint comment '商品sku编号',
             sku_name             varchar(255) comment '商品sku名字',
             sku_pic              varchar(500) comment '商品sku图片',
             sku_price            decimal(18,4) comment '商品sku价格',
             sku_quantity         int comment '商品购买的数量',
             sku_attrs_vals       varchar(500) comment '商品销售属性组合（JSON）',
             promotion_amount     decimal(18,4) comment '商品促销分解金额',
             coupon_amount        decimal(18,4) comment '优惠券优惠分解金额',
             integration_amount   decimal(18,4) comment '积分优惠分解金额',
             real_amount          decimal(18,4) comment '该商品经过优惠后的分解金额',
             gift_integration     int comment '赠送积分',
             gift_growth          int comment '赠送成长值',
             primary key (id)
          );
          
          alter table oms_order_item comment '订单项信息';
          
          /*==============================================================*/
          /* Table: oms_order_operate_history                             */
          /*==============================================================*/
          create table oms_order_operate_history
          (
             id                   bigint not null auto_increment comment 'id',
             order_id             bigint comment '订单id',
             operate_man          varchar(100) comment '操作人[用户；系统；后台管理员]',
             create_time          datetime comment '操作时间',
             order_status         tinyint comment '订单状态【0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单】',
             note                 varchar(500) comment '备注',
             primary key (id)
          );
          
          alter table oms_order_operate_history comment '订单操作历史记录';
          
          /*==============================================================*/
          /* Table: oms_order_return_apply                                */
          /*==============================================================*/
          create table oms_order_return_apply
          (
             id                   bigint not null auto_increment comment 'id',
             order_id             bigint comment 'order_id',
             sku_id               bigint comment '退货商品id',
             order_sn             char(32) comment '订单编号',
             create_time          datetime comment '申请时间',
             member_username      varchar(64) comment '会员用户名',
             return_amount        decimal(18,4) comment '退款金额',
             return_name          varchar(100) comment '退货人姓名',
             return_phone         varchar(20) comment '退货人电话',
             status               tinyint(1) comment '申请状态[0->待处理；1->退货中；2->已完成；3->已拒绝]',
             handle_time          datetime comment '处理时间',
             sku_img              varchar(500) comment '商品图片',
             sku_name             varchar(200) comment '商品名称',
             sku_brand            varchar(200) comment '商品品牌',
             sku_attrs_vals       varchar(500) comment '商品销售属性(JSON)',
             sku_count            int comment '退货数量',
             sku_price            decimal(18,4) comment '商品单价',
             sku_real_price       decimal(18,4) comment '商品实际支付单价',
             reason               varchar(200) comment '原因',
             description述         varchar(500) comment '描述',
             desc_pics            varchar(2000) comment '凭证图片，以逗号隔开',
             handle_note          varchar(500) comment '处理备注',
             handle_man           varchar(200) comment '处理人员',
             receive_man          varchar(100) comment '收货人',
             receive_time         datetime comment '收货时间',
             receive_note         varchar(500) comment '收货备注',
             receive_phone        varchar(20) comment '收货电话',
             company_address      varchar(500) comment '公司收货地址',
             primary key (id)
          );
          
          alter table oms_order_return_apply comment '订单退货申请';
          
          /*==============================================================*/
          /* Table: oms_order_return_reason                               */
          /*==============================================================*/
          create table oms_order_return_reason
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(200) comment '退货原因名',
             sort                 int comment '排序',
             status               tinyint(1) comment '启用状态',
             create_time          datetime comment 'create_time',
             primary key (id)
          );
          
          alter table oms_order_return_reason comment '退货原因';
          
          /*==============================================================*/
          /* Table: oms_order_setting                                     */
          /*==============================================================*/
          create table oms_order_setting
          (
             id                   bigint not null auto_increment comment 'id',
             flash_order_overtime int comment '秒杀订单超时关闭时间(分)',
             normal_order_overtime int comment '正常订单超时时间(分)',
             confirm_overtime     int comment '发货后自动确认收货时间（天）',
             finish_overtime      int comment '自动完成交易时间，不能申请退货（天）',
             comment_overtime     int comment '订单完成后自动好评时间（天）',
             member_level         tinyint(2) comment '会员等级【0-不限会员等级，全部通用；其他-对应的其他会员等级】',
             primary key (id)
          );
          
          alter table oms_order_setting comment '订单配置信息';
          
          /*==============================================================*/
          /* Table: oms_payment_info                                      */
          /*==============================================================*/
          create table oms_payment_info
          (
             id                   bigint not null auto_increment comment 'id',
             order_sn             char(32) comment '订单号（对外业务号）',
             order_id             bigint comment '订单id',
             alipay_trade_no      varchar(50) comment '支付宝交易流水号',
             total_amount         decimal(18,4) comment '支付总金额',
             subject              varchar(200) comment '交易内容',
             payment_status       varchar(20) comment '支付状态',
             create_time          datetime comment '创建时间',
             confirm_time         datetime comment '确认时间',
             callback_content     varchar(4000) comment '回调内容',
             callback_time        datetime comment '回调时间',
             primary key (id)
          );
          
          alter table oms_payment_info comment '支付信息表';
          
          /*==============================================================*/
          /* Table: oms_refund_info                                       */
          /*==============================================================*/
          create table oms_refund_info
          (
             id                   bigint not null auto_increment comment 'id',
             order_return_id      bigint comment '退款的订单',
             refund               decimal(18,4) comment '退款金额',
             refund_sn            varchar(64) comment '退款交易流水号',
             refund_status        tinyint(1) comment '退款状态',
             refund_channel       tinyint comment '退款渠道[1-支付宝，2-微信，3-银联，4-汇款]',
             refund_content       varchar(5000),
             primary key (id)
          );
          
          alter table oms_refund_info comment '退款信息';
          "
        - gulimall_sms 营销
          "drop table if exists sms_coupon;
          
          drop table if exists sms_coupon_history;
          
          drop table if exists sms_coupon_spu_category_relation;
          
          drop table if exists sms_coupon_spu_relation;
          
          drop table if exists sms_home_adv;
          
          drop table if exists sms_home_subject;
          
          drop table if exists sms_home_subject_spu;
          
          drop table if exists sms_member_price;
          
          drop table if exists sms_seckill_promotion;
          
          drop table if exists sms_seckill_session;
          
          drop table if exists sms_seckill_sku_notice;
          
          drop table if exists sms_seckill_sku_relation;
          
          drop table if exists sms_sku_full_reduction;
          
          drop table if exists sms_sku_ladder;
          
          drop table if exists sms_spu_bounds;
          
          /*==============================================================*/
          /* Table: sms_coupon                                            */
          /*==============================================================*/
          create table sms_coupon
          (
             id                   bigint not null auto_increment comment 'id',
             coupon_type          tinyint(1) comment '优惠卷类型[0->全场赠券；1->会员赠券；2->购物赠券；3->注册赠券]',
             coupon_img           varchar(2000) comment '优惠券图片',
             coupon_name          varchar(100) comment '优惠卷名字',
             num                  int comment '数量',
             amount               decimal(18,4) comment '金额',
             per_limit            int comment '每人限领张数',
             min_point            decimal(18,4) comment '使用门槛',
             start_time           datetime comment '开始时间',
             end_time             datetime comment '结束时间',
             use_type             tinyint(1) comment '使用类型[0->全场通用；1->指定分类；2->指定商品]',
             note                 varchar(200) comment '备注',
             publish_count        int(11) comment '发行数量',
             use_count            int(11) comment '已使用数量',
             receive_count        int(11) comment '领取数量',
             enable_start_time    datetime comment '可以领取的开始日期',
             enable_end_time      datetime comment '可以领取的结束日期',
             code                 varchar(64) comment '优惠码',
             member_level         tinyint(1) comment '可以领取的会员等级[0->不限等级，其他-对应等级]',
             publish              tinyint(1) comment '发布状态[0-未发布，1-已发布]',
             primary key (id)
          );
          
          alter table sms_coupon comment '优惠券信息';
          
          /*==============================================================*/
          /* Table: sms_coupon_history                                    */
          /*==============================================================*/
          create table sms_coupon_history
          (
             id                   bigint not null auto_increment comment 'id',
             coupon_id            bigint comment '优惠券id',
             member_id            bigint comment '会员id',
             member_nick_name     varchar(64) comment '会员名字',
             get_type             tinyint(1) comment '获取方式[0->后台赠送；1->主动领取]',
             create_time          datetime comment '创建时间',
             use_type             tinyint(1) comment '使用状态[0->未使用；1->已使用；2->已过期]',
             use_time             datetime comment '使用时间',
             order_id             bigint comment '订单id',
             order_sn             bigint comment '订单号',
             primary key (id)
          );
          
          alter table sms_coupon_history comment '优惠券领取历史记录';
          
          /*==============================================================*/
          /* Table: sms_coupon_spu_category_relation                      */
          /*==============================================================*/
          create table sms_coupon_spu_category_relation
          (
             id                   bigint not null auto_increment comment 'id',
             coupon_id            bigint comment '优惠券id',
             category_id          bigint comment '产品分类id',
             category_name        varchar(64) comment '产品分类名称',
             primary key (id)
          );
          
          alter table sms_coupon_spu_category_relation comment '优惠券分类关联';
          
          /*==============================================================*/
          /* Table: sms_coupon_spu_relation                               */
          /*==============================================================*/
          create table sms_coupon_spu_relation
          (
             id                   bigint not null auto_increment comment 'id',
             coupon_id            bigint comment '优惠券id',
             spu_id               bigint comment 'spu_id',
             spu_name             varchar(255) comment 'spu_name',
             primary key (id)
          );
          
          alter table sms_coupon_spu_relation comment '优惠券与产品关联';
          
          /*==============================================================*/
          /* Table: sms_home_adv                                          */
          /*==============================================================*/
          create table sms_home_adv
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(100) comment '名字',
             pic                  varchar(500) comment '图片地址',
             start_time           datetime comment '开始时间',
             end_time             datetime comment '结束时间',
             status               tinyint(1) comment '状态',
             click_count          int comment '点击数',
             url                  varchar(500) comment '广告详情连接地址',
             note                 varchar(500) comment '备注',
             sort                 int comment '排序',
             publisher_id         bigint comment '发布者',
             auth_id              bigint comment '审核者',
             primary key (id)
          );
          
          alter table sms_home_adv comment '首页轮播广告';
          
          /*==============================================================*/
          /* Table: sms_home_subject                                      */
          /*==============================================================*/
          create table sms_home_subject
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(200) comment '专题名字',
             title                varchar(255) comment '专题标题',
             sub_title            varchar(255) comment '专题副标题',
             status               tinyint(1) comment '显示状态',
             url                  varchar(500) comment '详情连接',
             sort                 int comment '排序',
             img                  varchar(500) comment '专题图片地址',
             primary key (id)
          );
          
          alter table sms_home_subject comment '首页专题表【jd首页下面很多专题，每个专题链接新的页面，展示专题商品信息】';
          
          /*==============================================================*/
          /* Table: sms_home_subject_spu                                  */
          /*==============================================================*/
          create table sms_home_subject_spu
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(200) comment '专题名字',
             subject_id           bigint comment '专题id',
             spu_id               bigint comment 'spu_id',
             sort                 int comment '排序',
             primary key (id)
          );
          
          alter table sms_home_subject_spu comment '专题商品';
          
          /*==============================================================*/
          /* Table: sms_member_price                                      */
          /*==============================================================*/
          create table sms_member_price
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             member_level_id      bigint comment '会员等级id',
             member_level_name    varchar(100) comment '会员等级名',
             member_price         decimal(18,4) comment '会员对应价格',
             add_other            tinyint(1) comment '可否叠加其他优惠[0-不可叠加优惠，1-可叠加]',
             primary key (id)
          );
          
          alter table sms_member_price comment '商品会员价格';
          
          /*==============================================================*/
          /* Table: sms_seckill_promotion                                 */
          /*==============================================================*/
          create table sms_seckill_promotion
          (
             id                   bigint not null auto_increment comment 'id',
             title                varchar(255) comment '活动标题',
             start_time           datetime comment '开始日期',
             end_time             datetime comment '结束日期',
             status               tinyint comment '上下线状态',
             create_time          datetime comment '创建时间',
             user_id              bigint comment '创建人',
             primary key (id)
          );
          
          alter table sms_seckill_promotion comment '秒杀活动';
          
          /*==============================================================*/
          /* Table: sms_seckill_session                                   */
          /*==============================================================*/
          create table sms_seckill_session
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(200) comment '场次名称',
             start_time           datetime comment '每日开始时间',
             end_time             datetime comment '每日结束时间',
             status               tinyint(1) comment '启用状态',
             create_time          datetime comment '创建时间',
             primary key (id)
          );
          
          alter table sms_seckill_session comment '秒杀活动场次';
          
          /*==============================================================*/
          /* Table: sms_seckill_sku_notice                                */
          /*==============================================================*/
          create table sms_seckill_sku_notice
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             sku_id               bigint comment 'sku_id',
             session_id           bigint comment '活动场次id',
             subcribe_time        datetime comment '订阅时间',
             send_time            datetime comment '发送时间',
             notice_type          tinyint(1) comment '通知方式[0-短信，1-邮件]',
             primary key (id)
          );
          
          alter table sms_seckill_sku_notice comment '秒杀商品通知订阅';
          
          /*==============================================================*/
          /* Table: sms_seckill_sku_relation                              */
          /*==============================================================*/
          create table sms_seckill_sku_relation
          (
             id                   bigint not null auto_increment comment 'id',
             promotion_id         bigint comment '活动id',
             promotion_session_id bigint comment '活动场次id',
             sku_id               bigint comment '商品id',
             seckill_price        decimal comment '秒杀价格',
             seckill_count        decimal comment '秒杀总量',
             seckill_limit        decimal comment '每人限购数量',
             seckill_sort         int comment '排序',
             primary key (id)
          );
          
          alter table sms_seckill_sku_relation comment '秒杀活动商品关联';
          
          /*==============================================================*/
          /* Table: sms_sku_full_reduction                                */
          /*==============================================================*/
          create table sms_sku_full_reduction
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'spu_id',
             full_price           decimal(18,4) comment '满多少',
             reduce_price         decimal(18,4) comment '减多少',
             add_other            tinyint(1) comment '是否参与其他优惠',
             primary key (id)
          );
          
          alter table sms_sku_full_reduction comment '商品满减信息';
          
          /*==============================================================*/
          /* Table: sms_sku_ladder                                        */
          /*==============================================================*/
          create table sms_sku_ladder
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'spu_id',
             full_count           int comment '满几件',
             discount             decimal(4,2) comment '打几折',
             price                decimal(18,4) comment '折后价',
             add_other            tinyint(1) comment '是否叠加其他优惠[0-不可叠加，1-可叠加]',
             primary key (id)
          );
          
          alter table sms_sku_ladder comment '商品阶梯价格';
          
          /*==============================================================*/
          /* Table: sms_spu_bounds                                        */
          /*==============================================================*/
          create table sms_spu_bounds
          (
             id                   bigint not null auto_increment comment 'id',
             spu_id               bigint,
             grow_bounds          decimal(18,4) comment '成长积分',
             buy_bounds           decimal(18,4) comment '购物积分',
             work                 tinyint(1) comment '优惠生效情况[1111（四个状态位，从右到左）;0 - 无优惠，成长积分是否赠送;1 - 无优惠，购物积分是否赠送;2 - 有优惠，成长积分是否赠送;3 - 有优惠，购物积分是否赠送【状态位0：不赠送，1：赠送】]',
             primary key (id)
          );
          
          alter table sms_spu_bounds comment '商品spu积分设置';
          "
        - gulimall_ums 用户
          "drop table if exists ums_growth_change_history;
          
          drop table if exists ums_integration_change_history;
          
          drop table if exists ums_member;
          
          drop table if exists ums_member_collect_spu;
          
          drop table if exists ums_member_collect_subject;
          
          drop table if exists ums_member_level;
          
          drop table if exists ums_member_login_log;
          
          drop table if exists ums_member_receive_address;
          
          drop table if exists ums_member_statistics_info;
          
          /*==============================================================*/
          /* Table: ums_growth_change_history                             */
          /*==============================================================*/
          create table ums_growth_change_history
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             create_time          datetime comment 'create_time',
             change_count         int comment '改变的值（正负计数）',
             note                 varchar(0) comment '备注',
             source_type          tinyint comment '积分来源[0-购物，1-管理员修改]',
             primary key (id)
          );
          
          alter table ums_growth_change_history comment '成长值变化历史记录';
          
          /*==============================================================*/
          /* Table: ums_integration_change_history                        */
          /*==============================================================*/
          create table ums_integration_change_history
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             create_time          datetime comment 'create_time',
             change_count         int comment '变化的值',
             note                 varchar(255) comment '备注',
             source_tyoe          tinyint comment '来源[0->购物；1->管理员修改;2->活动]',
             primary key (id)
          );
          
          alter table ums_integration_change_history comment '积分变化历史记录';
          
          /*==============================================================*/
          /* Table: ums_member                                            */
          /*==============================================================*/
          create table ums_member
          (
             id                   bigint not null auto_increment comment 'id',
             level_id             bigint comment '会员等级id',
             username             char(64) comment '用户名',
             password             varchar(64) comment '密码',
             nickname             varchar(64) comment '昵称',
             mobile               varchar(20) comment '手机号码',
             email                varchar(64) comment '邮箱',
             header               varchar(500) comment '头像',
             gender               tinyint comment '性别',
             birth                date comment '生日',
             city                 varchar(500) comment '所在城市',
             job                  varchar(255) comment '职业',
             sign                 varchar(255) comment '个性签名',
             source_type          tinyint comment '用户来源',
             integration          int comment '积分',
             growth               int comment '成长值',
             status               tinyint comment '启用状态',
             create_time          datetime comment '注册时间',
             primary key (id)
          );
          
          alter table ums_member comment '会员';
          
          /*==============================================================*/
          /* Table: ums_member_collect_spu                                */
          /*==============================================================*/
          create table ums_member_collect_spu
          (
             id                   bigint not null comment 'id',
             member_id            bigint comment '会员id',
             spu_id               bigint comment 'spu_id',
             spu_name             varchar(500) comment 'spu_name',
             spu_img              varchar(500) comment 'spu_img',
             create_time          datetime comment 'create_time',
             primary key (id)
          );
          
          alter table ums_member_collect_spu comment '会员收藏的商品';
          
          /*==============================================================*/
          /* Table: ums_member_collect_subject                            */
          /*==============================================================*/
          create table ums_member_collect_subject
          (
             id                   bigint not null auto_increment comment 'id',
             subject_id           bigint comment 'subject_id',
             subject_name         varchar(255) comment 'subject_name',
             subject_img          varchar(500) comment 'subject_img',
             subject_urll         varchar(500) comment '活动url',
             primary key (id)
          );
          
          alter table ums_member_collect_subject comment '会员收藏的专题活动';
          
          /*==============================================================*/
          /* Table: ums_member_level                                      */
          /*==============================================================*/
          create table ums_member_level
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(100) comment '等级名称',
             growth_point         int comment '等级需要的成长值',
             default_status       tinyint comment '是否为默认等级[0->不是；1->是]',
             free_freight_point   decimal(18,4) comment '免运费标准',
             comment_growth_point int comment '每次评价获取的成长值',
             priviledge_free_freight tinyint comment '是否有免邮特权',
             priviledge_member_price tinyint comment '是否有会员价格特权',
             priviledge_birthday  tinyint comment '是否有生日特权',
             note                 varchar(255) comment '备注',
             primary key (id)
          );
          
          alter table ums_member_level comment '会员等级';
          
          /*==============================================================*/
          /* Table: ums_member_login_log                                  */
          /*==============================================================*/
          create table ums_member_login_log
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             create_time          datetime comment '创建时间',
             ip                   varchar(64) comment 'ip',
             city                 varchar(64) comment 'city',
             login_type           tinyint(1) comment '登录类型[1-web，2-app]',
             primary key (id)
          );
          
          alter table ums_member_login_log comment '会员登录记录';
          
          /*==============================================================*/
          /* Table: ums_member_receive_address                            */
          /*==============================================================*/
          create table ums_member_receive_address
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment 'member_id',
             name                 varchar(255) comment '收货人姓名',
             phone                varchar(64) comment '电话',
             post_code            varchar(64) comment '邮政编码',
             province             varchar(100) comment '省份/直辖市',
             city                 varchar(100) comment '城市',
             region               varchar(100) comment '区',
             detail_address       varchar(255) comment '详细地址(街道)',
             areacode             varchar(15) comment '省市区代码',
             default_status       tinyint(1) comment '是否默认',
             primary key (id)
          );
          
          alter table ums_member_receive_address comment '会员收货地址';
          
          /*==============================================================*/
          /* Table: ums_member_statistics_info                            */
          /*==============================================================*/
          create table ums_member_statistics_info
          (
             id                   bigint not null auto_increment comment 'id',
             member_id            bigint comment '会员id',
             consume_amount       decimal(18,4) comment '累计消费金额',
             coupon_amount        decimal(18,4) comment '累计优惠金额',
             order_count          int comment '订单数量',
             coupon_count         int comment '优惠券数量',
             comment_count        int comment '评价数',
             return_order_count   int comment '退货数量',
             login_count          int comment '登录次数',
             attend_count         int comment '关注数量',
             fans_count           int comment '粉丝数量',
             collect_product_count int comment '收藏的商品数量',
             collect_subject_count int comment '收藏的专题活动数量',
             collect_comment_count int comment '收藏的评论数量',
             invite_friend_count  int comment '邀请的朋友数量',
             primary key (id)
          );
          
          alter table ums_member_statistics_info comment '会员统计信息';
          "
        - gulimall_wms 库存
          "drop table if exists wms_purchase;
          
          drop table if exists wms_purchase_detail;
          
          drop table if exists wms_ware_info;
          
          drop table if exists wms_ware_order_task;
          
          drop table if exists wms_ware_order_task_detail;
          
          drop table if exists wms_ware_sku;
          
          /*==============================================================*/
          /* Table: wms_purchase                                          */
          /*==============================================================*/
          create table wms_purchase
          (
             id                   bigint not null auto_increment comment '采购单id',
             assignee_id          bigint comment '采购人id',
             assignee_name        varchar(255) comment '采购人名',
             phone                char(13) comment '联系方式',
             priority             int(4) comment '优先级',
             status               int(4) comment '状态',
             ware_id              bigint comment '仓库id',
             amount               decimal(18,4) comment '总金额',
             create_time          datetime comment '创建日期',
             update_time          datetime comment '更新日期',
             primary key (id)
          );
          
          alter table wms_purchase comment '采购信息';
          
          /*==============================================================*/
          /* Table: wms_purchase_detail                                   */
          /*==============================================================*/
          create table wms_purchase_detail
          (
             id                   bigint not null auto_increment,
             purchase_id          bigint comment '采购单id',
             sku_id               bigint comment '采购商品id',
             sku_num              int comment '采购数量',
             sku_price            decimal(18,4) comment '采购金额',
             ware_id              bigint comment '仓库id',
             status               int comment '状态[0新建，1已分配，2正在采购，3已完成，4采购失败]',
             primary key (id)
          );
          
          /*==============================================================*/
          /* Table: wms_ware_info                                         */
          /*==============================================================*/
          create table wms_ware_info
          (
             id                   bigint not null auto_increment comment 'id',
             name                 varchar(255) comment '仓库名',
             address              varchar(255) comment '仓库地址',
             areacode             varchar(20) comment '区域编码',
             primary key (id)
          );
          
          alter table wms_ware_info comment '仓库信息';
          
          /*==============================================================*/
          /* Table: wms_ware_order_task                                   */
          /*==============================================================*/
          create table wms_ware_order_task
          (
             id                   bigint not null auto_increment comment 'id',
             order_id             bigint comment 'order_id',
             order_sn             varchar(255) comment 'order_sn',
             consignee            varchar(100) comment '收货人',
             consignee_tel        char(15) comment '收货人电话',
             delivery_address     varchar(500) comment '配送地址',
             order_comment        varchar(200) comment '订单备注',
             payment_way          tinyint(1) comment '付款方式【 1:在线付款 2:货到付款】',
             task_status          tinyint(2) comment '任务状态',
             order_body           varchar(255) comment '订单描述',
             tracking_no          char(30) comment '物流单号',
             create_time          datetime comment 'create_time',
             ware_id              bigint comment '仓库id',
             task_comment         varchar(500) comment '工作单备注',
             primary key (id)
          );
          
          alter table wms_ware_order_task comment '库存工作单';
          
          /*==============================================================*/
          /* Table: wms_ware_order_task_detail                            */
          /*==============================================================*/
          create table wms_ware_order_task_detail
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             sku_name             varchar(255) comment 'sku_name',
             sku_num              int comment '购买个数',
             task_id              bigint comment '工作单id',
             primary key (id)
          );
          
          alter table wms_ware_order_task_detail comment '库存工作单';
          
          /*==============================================================*/
          /* Table: wms_ware_sku                                          */
          /*==============================================================*/
          create table wms_ware_sku
          (
             id                   bigint not null auto_increment comment 'id',
             sku_id               bigint comment 'sku_id',
             ware_id              bigint comment '仓库id',
             stock                int comment '库存数',
             sku_name             varchar(200) comment 'sku_name',
             stock_locked         int comment '锁定库存',
             primary key (id)
          );
          
          alter table wms_ware_sku comment '商品库存';
          "
        - 注：以上所有表都没有外键
      - 搭建后台管理系统
        - 使用 人人开源 系列框架 https://www.renren.io/
          "https://gitee.com/renrenio/renren-fast 后台管理系统的的后端 采用 springboot mybatis
          https://gitee.com/renrenio/renren-fast-vue 后台管理系统的前端 采用vue
          https://gitee.com/renrenio/renren-security 前后端不分离的管理系统
          
          https://gitee.com/renrenio/renren-generator 代码生成器 可在线生成entity、xml、dao、service、vue、sql代码"
        - 克隆 renren-fast  和 renren-fast-vue
        - renren-fast 相关处理
          - 把  renren-fast 复制到刚初始化的后端项目文件夹中，删除.git，在父POM中关联
          - 根据 renren-fast/bd/mysql.sql 在数据库中建立 gulimall_admin 库
          - 修改 application.yml 文件 端口 28080
        - renren-fast-vue 相关处理
          - 用 vscode 打开文件夹 执行安装 npm install
            "遇到错误，百度即可"
          - npm run dev 启动应用
          - 注：若端口冲突，全局搜一下改了就行
      - 利用renren-generator自动生成增删改查代码
        - 下载 https://gitee.com/renrenio/renren-generator
        - 删除其中的.git文件夹，并复制到工程中
        - 添加到父POM文件
          "<modules>
              <module>gulimall-product</module>
              <module>gulimall-ware</module>
              <module>gulimall-order</module>
              <module>gulimall-coupon</module>
              <module>gulimall-member</module>
              <module>renren-fast</module>
              <module>renren-generator</module>
          </modules>"
        - 修改application.yml 中数据库信息，改成gulimall_pms
          "url: jdbc:mysql://192.168.2.3:23306/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&useSSL=false
          username: root
          password: 123456"
        - 修改 generator.properties
          "mainPath=com.atguigu
          #包名
          package=com.atguigu.gulimall
          moduleName=product
          #作者
          author=madokast
          #Email
          email=578562554@qq.com
          #表前缀(类名不会包含表前缀)
          tablePrefix=pms_"
        - 修改 resource/template/Controller.java.vm 文件
          "注释掉全部和注解 @RequiresPermissions 有关的代码"
        - 启动应用 http://localhost/#generator.html 生成代码
        - 复制到项目 product 模块 主要报错是缺少common包
        - 新建 gulimall-common 模块 作为公共模块，解决报错问题
          - POM
            "<?xml version="1.0" encoding="UTF-8"?>
            <project xmlns="http://maven.apache.org/POM/4.0.0"
                     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
                <parent>
                    <artifactId>gulimall</artifactId>
                    <groupId>com.atguigu.gulimall</groupId>
                    <version>0.0.1-SNAPSHOT</version>
                </parent>
                <modelVersion>4.0.0</modelVersion>
            
                <artifactId>gulimall-common</artifactId>
            
            
                <dependencies>
                    <dependency>
                        <groupId>com.baomidou</groupId>
                        <artifactId>mybatis-plus-boot-starter</artifactId>
                        <version>3.2.0</version>
                    </dependency>
            
                    <dependency>
                        <groupId>org.projectlombok</groupId>
                        <artifactId>lombok</artifactId>
                        <version>1.18.8</version>
                    </dependency>
            
                    <dependency>
                        <groupId>org.apache.httpcomponents</groupId>
                        <artifactId>httpcore</artifactId>
                        <version>4.4.12</version>
                    </dependency>
            
                    <dependency>
                        <groupId>commons-lang</groupId>
                        <artifactId>commons-lang</artifactId>
                        <version>2.6</version>
                    </dependency>
            
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>8.0.17</version>
                    </dependency>
            
            
                </dependencies>
            
                <build>
                    <plugins>
                        <plugin>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-maven-plugin</artifactId>
                        </plugin>
                    </plugins>
                </build>
            
            </project>"
          - 其他模块的POM
            "<dependency>
                <groupId>com.atguigu.gulimall</groupId>
                <artifactId>gulimall-common</artifactId>
                <version>${project.version}</version>
            </dependency>"
        - 整合 mybatis-plus https://mybatis.plus/guide/
          - yml文件配置
            "spring:
              datasource:
                username: root
                password: 123456
                url: jdbc:mysql://192.168.2.3:23306/gulimall_pms?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
                driver-class-name: com.mysql.cj.jdbc.Driver
            
            mybatis-plus:
              mapper-locations: classpath:/mapper/**/*.xml
              global-config:
                db-config:
                  # 主键自增
                  id-type: auto
            
            server:
              port: 35200"
          - 测试1
            "  /**
                 * 测试主键自增
                 */
                @Test
                public void testBrandService(){
            
            //        BrandEntity brandEntity = new BrandEntity();
            //        brandEntity.setName("华为");
            //
            //        brandService.save(brandEntity);
            //
            //        LOGGER.info("保存成功");
                }
            
                /**
                 * 查询测试
                 */
                @Test
                public void testQuery(){
                    List<BrandEntity> brand_id = brandService.list(new QueryWrapper<BrandEntity>().eq("brand_id", 1L));
                    LOGGER.info("brand_id = {}", brand_id);
                    // brand_id = [BrandEntity(brandId=1, name=华为, logo=null, descript=null, showStatus=null, firstLetter=null, sort=null)]
                }"
          - 测试2
            "启动服务 访问一下 controller
            
            http://192.168.2.13:35200/product/brand/list"
        - 将其他4个服务的CRUD代码也一一生成复制到项目。配置相关的application.yml
      - 搭建分布式环境
        "nacos 配置中心、注册中心
        ribbon 负载均衡
        openfeign rpc调用
        sentinel 流量控制、熔断
        gateway api网关
        sleuth 调用链监控
        seata 分布式事务"
        - common工程加入alibaba依赖
          "先带入依赖管理器，这样就不用写版本
          <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>com.alibaba.cloud</groupId>
                      <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                      <version>2.1.0.RELEASE</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>
          
          再导入依赖
          "
        - 5个服务增加配置信息等
          - YML 一定要写服务名
            "spring:
              application:
                name: gulimall-coupon//各自的服务名
              cloud:
                nacos:
                  discovery:
                    server-addr: 192.168.2.13:8848"
          - bootstrap.yml
          - 主启动类
            "@EnableDiscoveryClient
            @EnableFeignClients"
        - nacos 服务注册测试
          "只要打开nacos web页面，看到了服务就行"
        - nacos 配置中心测试 （简单使用）
          - bootstrap.yml 配置
            "spring:
              application:
                name: gulimall-coupon
              profiles:
                active: dev # 表示去拉开发环境的配置
              cloud:
                nacos:
                  config:
                    server-addr: 192.168.2.13:8848
                    file-extension: yaml"
          - 要刷新的类 @RefreshScope
          - 在 nacos 新建配置 dataId = 服务名-dev.yaml
          - 写测试方法
            "@Value("${spring.config.version}")
            private String configVersion;
            
            @RequestMapping("/nacosConfigTest")
            public R nacosConfigTest(){
                return R.ok().put("spring.config.version",configVersion);
            }"
        - openfeign远程调用测试（简单使用）
          - coupon服务的couponController创建一个方法
            "/**
             * 2020年5月5日 测试 openfeign 的远程调用
             * 返回某个会员的所有优惠券信息
             * @return 某个会员的所有优惠券信息
             */
            @RequestMapping("/member/list")
            public R memberCoupons(){
                CouponEntity couponEntity = new CouponEntity();
                couponEntity.setCouponName("满100减10");
                return R.ok().put("coupons", Collections.singletonList((Object) couponEntity));
            }"
          - member服务 创建 openfeign 接口
            "@FeignClient("gulimall-coupon")//要调用的服务名
            @Component
            public interface CouponFeignService {
            
                /**
                 * 直接去 coupon controller 里面把选哟调用的方法的签名拿过来
                 * @return 某个会员的所有优惠券信息
                 */
                @RequestMapping("/coupon/coupon/member/list")
                R memberCoupons();
            
            }"
          - member服务的memberController创建方法
            "@RequestMapping("/coupons")
            public R coupons(){
                MemberEntity memberEntity = new MemberEntity();
                memberEntity.setNickname("张三");
            
                R r = couponFeignService.memberCoupons();
                Object coupons = r.get("coupons");
            
                return R.ok().put("menmer",memberEntity).put("coupons",coupons);
            }"
        - gateway网关（简单使用）
          - 新建模块 gulimall-gateway  引入 gateway和自己的common依赖
          - 主启动
            "@EnableDiscoveryClient
            @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
            // exclude 数据源，否则因为找不到数据库配置而出错，也可以在pom中去除相关依赖"
          - bootstrap.yml 仅仅包括 服务名、nacos配置
            "spring:
              application:
                name: gulimall-gateway
              profiles:
                active: dev # 表示去拉开发环境的配置
              cloud:
                nacos:
                  discovery:
                    server-addr: 192.168.2.13:8848
                  config:
                    server-addr: 192.168.2.13:8848
                    file-extension: yaml
                    namespace: gateway"
          - 在nacos中新建namespace gateway，建立配置文件 gulimall-gateway-dev.yaml
            "spring:
              cloud:
                gateway:
                  routes:
                    - id: route_baidu
                      uri: https://www.baidu.com
                      predicates:
                        - Query=url,baidu
                    - id: route_qq
                      uri: https://www.qq.com
                      predicates:
                        - Query=url,qq
            server:
              port: 20088"
          - 测试 192.168.2.13:20088/aaa?url=qq
            "即跳转到 www.qq.com/aaa"
    - 前端基础
      - VSCode 使用
      - ES6
        - let 能定义一次、作用域、禁止变量提升
        - const
        - 解构表达式 数组&对象
          "	[a,b] = [1,2]
          	name = {name:'mdk'}"
        - 字符串对象扩展
          "	str.startWith()
          	str.includes()"
        - 反引号
        - 字符串插值 ${varname}
        - 函数默认值 funcation fun(a=1)
        - 函数不定参数 function fun(...vals)
        - 箭头函数
        - 箭头函数+结构表达式
          "	({name})=>log(name);
          	就是传输obj的name属性"
        - 对象API
          "Objcet.keys(person)
          	拿到person对象的所有属性名
          Objcet.values(person)
          	拿到person对象的所有属性的值
          Objcet.entries(person)
          	拿到person对象的所有[key, value]
          Objcet.assign(target, source1...)
          	将source123...中的属性值放入target中"
        - 对象声明简写
          "const name = "mdk";
          const obj = {name};"
        - 对象深拷贝
          "const obj2 = {...obj1};"
        - 合并对象
          "const c = {...a, ...b};"
        - 数组API
          "map reduce"
        - Promise
        - 模块化 ⭐
          "export
          	export {obj1,obj2} // 写在最后
          	export const obj = {...} //命名并导出
          	export default {...}  // 不取名，常用
          import
          	import xx from './aa.js'"
      - Node.js
      - Vue
        - MVVM ( M模型 V视图 VM模型视图双向操作 
        - 全局安装 webpack
          "npm install webpack -g"
        - 全局安装 vue 脚手架
          "npm install -g @vue/cli-init"
        - demo学习
          - 新建应用 vue init webpack vue-demo
            "选择
            
            Project name vue-demo
            ? Project description wue-demo
            ? Author madokast <578562554@qq.com>
            ? Vue build standalone
            ? Install vue-router? Yes
            ? Use ESLint to lint your code? No
            ? Set up unit tests No
            ? Setup e2e tests with Nightwatch? No
            ? Should we run `npm install` for you after the project has been created? (recommended) npm"
          - 用vscode打开 npm run dev 启动
          - 项目结构
            "build 文件夹 webpack 相关文件
            config 文件夹 vue的配置信息 如监听端口
            node_modules 文件夹 各种依赖文件
            src 代码
            static 静态资源
            .barbelrc es6编译成js
            .editorconfig 定义代码格式
            .postcassrc.js CSS转换
            index.html 首页
            package.json 依赖简单信息
            package-lock.json 依赖详细信息"
          - 应用运行流程
            "入口
            -> index.html (一个#app)
            -> main.js  (挂载app，路由，这个#app内只有一个组件App.vue)
            -> App.vue 这里就能看懂了"
        - ⭐ vscode 配置 vue 模板代码
          "文件 - 首选项 - 用户代码片段
          
          粘贴上
          -----------------------------------------------------
          {
              "vue模板": {
                  "prefix": "vue",
                  "body": [
                      "<template>",
                      "<div></div>",
                      "</template>",
                      "",
                      "<script>",
                      "export default {",
                      "//import 引入的组件需要注入到对象中才能使用",
                      "components:{},",
                      "props:{},",
                      "data(){",
                      "//这里存数据",
                      "return{};",
                      "},",
                      "//计算属性",
                      "computed: {",
                      "",
                      "},",
                      "//监控data中数据变化",
                      "watch: {",
                      "",
                      "},",
                      "//方法",
                      "methods: {",
                      "",
                      "},",
                      "//声明周期 - 创建完成（可以访问当前this实例）",
                      "created() {",
                      "",
                      "},",
                      "//生命周期 - 挂载完成（可以访问DOM元素）",
                      "mounted() {",
                      "",
                      "},",
                      "beforeCreate() {},//生命周期 - 创建之前",
                      "beforeMount() {},//生命周期 - 挂载之前",
                      "beforeUpdate() {},//声明周期 - 更新之前",
                      "updated() {},//生命周期 - 更新之后",
                      "beforeDestroy() {},//生命周期 - 销毁之前",
                      "destroyed() {},//生命周期 - 销毁之后",
                      "activated() {},//缓存keep-alive",
                      "};",
                      "</script>",
                      "",
                      "<style scoped>",
                      "</style>",
                  ],
                  "description": "生成vue模板"
              }
          }"
      - element ui
        "https://element.eleme.cn/#/zh-CN/component/installation"
        - 安装 npm i element-ui -s
        - 在vue main.js中引入
          "import Vue from 'vue';
          import ElementUI from 'element-ui';
          import 'element-ui/lib/theme-chalk/index.css';
          import App from './App.vue';
          
          Vue.use(ElementUI);
          
          new Vue({
            el: '#app',
            render: h => h(App)
          });"
        - 简单使用 单选框
          "template
          ---------------
              <el-radio v-model="radio" label="1">选择1</el-radio>
              <el-radio v-model="radio" label="2">选择2</el-radio>
          ---------------
          script
          ---------------
            data() {
              return {
                radio: "1"
              };"
        - 导航栏开启路由
          "router
          
          示例
          ---------------
          <el-menu :default-openeds="['1', '3']" router="true">"
        - 表格数据渲染
          "data 传入 array数据，内部是json
          prop   json属性名，这样就会渲染出值
          
          
              <el-table :data="tableData">
                <el-table-column prop="date" label="日期" width="140"></el-table-column>
                <el-table-column prop="name" label="姓名" width="120"></el-table-column>
                <el-table-column prop="address" label="地址"></el-table-column>
              </el-table>"
      - Babel
      - Webpack
    - 商品服务API
      - 接口文档地址 https://easydoc.xyz/s/78237135= 
        - 后台管理系统接口
          - 公共模块
            - 分页请求参数
              "{
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字——全字段模糊查询
              }"
            - 分页返回数据
              "{
              	"msg": "success",
              	"code": 0,
              	"page": { 
              		"totalCount": 0, //总记录数
              		"pageSize": 10,  //每页大小
              		"totalPage": 0,  //总页码
              		"currPage": 1, //当前页码
              		"list": [{  //当前页所有数据
              			"brandId": 1,
              			"name": "aaa",
              			"logo": "abc",
              			"descript": "华为",
              			"showStatus": 1,
              			"firstLetter": null,
              			"sort": null
              		}]
              	}
              }"
          - 商品系统
            - 01、获取所有分类及子分类
              "01、获取所有分类及子分类ForSum 最后修改于 2019-11-13
              GET
              /product/category/list/tree
              接口描述
              01、获取所有分类以及子分类，并返回json树形结构
              响应参数
              参数名
              参数类型
              描述
              code
              int
              0-成功，其他业务码-失败
              msg
              string
              提示消息
              data
              array
              返回的所有菜单
              catId
              int
              分类id
              name
              string
              分类名字
              parentCid
              int
              父分类id
              catLevel
              int
              分类等级
              showStatus
              int
              是否显示，0-不显示，1-显示
              sort
              int
              排序
              icon
              string
              图标
              productUnit
              string
              计量单位
              productCount
              int
              当前分类下商品总量
              children
              array
              所有子分类
              响应示例
              {
              	"code": 0,
              	"msg": "success",
              	"data": [{
              		"catId": 1,
              		"name": "图书、音像、电子书刊",
              		"parentCid": 0,
              		"catLevel": 1,
              		"showStatus": 1,
              		"sort": 0,
              		"icon": null,
              		"productUnit": null,
              		"productCount": 0,
              		"children": []
              	}]
              }"
            - 02、修改分类父子关系以及顺序
              "02、修改分类父子关系以及顺序ForSum 最后修改于 2019-11-13
              POST
              /product/category/update/sort
              请求参数
              [
                {
                  "catId": 0, //菜单id
                  "catLevel": 0, //菜单层级
                  "parentCid": 0, //父菜单id
                  "sort": 0 //排序
                }
              ]
              注意：没有修改的字段无需携带
              
              响应数据
              {
                "msg": "success",
                "code": 0
              }"
            - 03、获取分类属性分组
              "03、获取分类属性分组ForSum 最后修改于 2019-11-15
              GET
              /product/attrgroup/list/{catelogId}
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"attrGroupId": 0, //分组id
              			"attrGroupName": "string", //分组名
              			"catelogId": 0, //所属分类
              			"descript": "string", //描述
              			"icon": "string", //图标
              			"sort": 0 //排序
              			"catelogPath": [2,45,225] //分类完整路径
              		}]
              	}
              }"
            - 04、获取属性分组详情
              "04、获取属性分组详情ForSum 最后修改于 2019-11-16
              GET
              /product/attrgroup/info/{attrGroupId}
              响应数据
              {
              	"code": 0,
              	"msg": "success",
              	"attrGroup": {
              		"attrGroupId": 1,
              		"attrGroupName": "主体",
              		"sort": 0,
              		"descript": null,
              		"icon": null,
              		"catelogId": 225,
              		"catelogPath": [
              			2,
              			34,
              			225
              		] //完整分类路径
              	}
              }"
            - 05、获取分类规格参数
              "05、获取分类规格参数ForSum 最后修改于 2019-11-16
              GET
              /product/attr/base/list/{catelogId}
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"attrId": 0, //属性id
              			"attrName": "string", //属性名
              			"attrType": 0, //属性类型，0-销售属性，1-基本属性
              			"catelogName": "手机/数码/手机", //所属分类名字
              			"groupName": "主体", //所属分组名字
              			"enable": 0, //是否启用
              			"icon": "string", //图标
              			"searchType": 0,//是否需要检索[0-不需要，1-需要]
              			"showDesc": 0,//是否展示在介绍上；0-否 1-是
              			"valueSelect": "string",//可选值列表[用逗号分隔]
              			"valueType": 0//值类型[0-为单个值，1-可以选择多个值]
              		}]
              	}
              }"
            - 06、保存属性【规格参数，销售属性】
              "06、保存属性【规格参数，销售属性】ForSum 最后修改于 2019-11-16
              POST
              /product/attr/save
              请求参数
              {
                "attrGroupId": 0, //属性分组id
                "attrName": "string",//属性名
                "attrType": 0, //属性类型
                "catelogId": 0, //分类id
                "enable": 0, //是否可用 
                "icon": "string", //图标
                "searchType": 0, //是否检索
                "showDesc": 0, //快速展示
                "valueSelect": "string", //可选值列表
                "valueType": 0 //可选值模式
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 07、查询属性详情
              "07、查询属性详情ForSum 最后修改于 2019-11-16
              GET
              /product/attr/info/{attrId}
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"attr": {
              		"attrId": 4,
              		"attrName": "aad",
              		"searchType": 1,
              		"valueType": 1,
              		"icon": "qq",
              		"valueSelect": "v;q;w",
              		"attrType": 1,
              		"enable": 1,
              		"showDesc": 1,
              		"attrGroupId": 1, //分组id
              		"catelogId": 225, //分类id
              		"catelogPath": [2, 34, 225] //分类完整路径
              	}
              }"
            - 08、修改属性
              "08、修改属性ForSum 最后修改于 2019-11-16
              POST
              /product/attr/update
              请求参数
              {
                "attrId": 0, //属性id
                "attrGroupId": 0, //属性分组id
                "attrName": "string",//属性名
                "attrType": 0, //属性类型
                "catelogId": 0, //分类id
                "enable": 0, //是否可用 
                "icon": "string", //图标
                "searchType": 0, //是否检索
                "showDesc": 0, //快速展示
                "valueSelect": "string", //可选值列表
                "valueType": 0 //可选值模式
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 09、获取分类销售属性
              "09、获取分类销售属性ForSum 最后修改于 2019-11-16
              GET
              /product/attr/sale/list/{catelogId}
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"attrId": 0, //属性id
              			"attrName": "string", //属性名
              			"attrType": 0, //属性类型，0-销售属性，1-基本属性
              			"catelogName": "手机/数码/手机", //所属分类名字
              			"groupName": "主体", //所属分组名字
              			"enable": 0, //是否启用
              			"icon": "string", //图标
              			"searchType": 0,//是否需要检索[0-不需要，1-需要]
              			"showDesc": 0,//是否展示在介绍上；0-否 1-是
              			"valueSelect": "string",//可选值列表[用逗号分隔]
              			"valueType": 0//值类型[0-为单个值，1-可以选择多个值]
              		}]
              	}
              }"
            - 10、获取属性分组的关联的所有属性
              "10、获取属性分组的关联的所有属性ForSum 最后修改于 2019-11-16
              GET
              /product/attrgroup/{attrgroupId}/attr/relation
              接口描述
              获取指定分组关联的所有属性
              请求参数
              响应数据
              {
                "msg": "success",
                "code": 0,
                "data": [
                  {
                    "attrId": 4,
                    "attrName": "aad",
                    "searchType": 1,
                    "valueType": 1,
                    "icon": "qq",
                    "valueSelect": "v;q;w",
                    "attrType": 1,
                    "enable": 1,
                    "catelogId": 225,
                    "showDesc": 1
                  }
                ]
              }"
            - 11、添加属性与分组关联关系
              "11、添加属性与分组关联关系ForSum 最后修改于 2019-11-17
              POST
              /product/attrgroup/attr/relation
              请求参数
              [{
                "attrGroupId": 0, //分组id
                "attrId": 0, //属性id
              }]
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 12、删除属性与分组的关联关系
              "12、删除属性与分组的关联关系ForSum 最后修改于 2019-11-17
              POST
              /product/attrgroup/attr/relation/delete
              请求参数
              [{"attrId":1,"attrGroupId":2}]
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 13、获取属性分组没有关联的其他属性
              "13、获取属性分组没有关联的其他属性ForSum 最后修改于 2019-11-16
              GET
              /product/attrgroup/{attrgroupId}/noattr/relation
              接口描述
              获取属性分组里面还没有关联的本分类里面的其他基本属性，方便添加新的关联
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 3,
              		"pageSize": 10,
              		"totalPage": 1,
              		"currPage": 1,
              		"list": [{
              			"attrId": 1,
              			"attrName": "aaa",
              			"searchType": 1,
              			"valueType": 1,
              			"icon": "aa",
              			"valueSelect": "aa;ddd;sss;aaa2",
              			"attrType": 1,
              			"enable": 1,
              			"catelogId": 225,
              			"showDesc": 1
              		}]
              	}
              }"
            - 14、获取分类关联的品牌
              "14、获取分类关联的品牌ForSum 最后修改于 2019-11-17
              GET
              /product/categorybrandrelation/brands/list
              请求参数
              参数名
              参数类型
              描述
              catId
              long
              分类id
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"data": [{
              		"brandId": 0,
              		"brandName": "string",
              	}]
              }"
            - 15、获取品牌关联的分类
              "15、获取品牌关联的分类ForSum 最后修改于 2019-11-17
              GET
              /product/categorybrandrelation/catelog/list
              请求参数
              参数名
              参数类型
              描述
              brandId
              long
              品牌id
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"data": [{
              		"catelogId": 0,
              		"catelogName": "string",
              	}]
              }"
            - 16、新增品牌与分类关联关系
              "16、新增品牌与分类关联关系ForSum 最后修改于 2019-11-17
              POST
              product/categorybrandrelation/save
              请求参数
              {"brandId":1,"catelogId":2}
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 17、获取分类下所有分组&关联属性
              "17、获取分类下所有分组&关联属性ForSum 最后修改于 2019-11-20
              GET
              /product/attrgroup/{catelogId}/withattr
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"data": [{
              		"attrGroupId": 1,
              		"attrGroupName": "主体",
              		"sort": 0,
              		"descript": "主体",
              		"icon": "dd",
              		"catelogId": 225,
              		"attrs": [{
              			"attrId": 7,
              			"attrName": "入网型号",
              			"searchType": 1,
              			"valueType": 0,
              			"icon": "xxx",
              			"valueSelect": "aaa;bb",
              			"attrType": 1,
              			"enable": 1,
              			"catelogId": 225,
              			"showDesc": 1,
              			"attrGroupId": null
              			}, {
              			"attrId": 8,
              			"attrName": "上市年份",
              			"searchType": 0,
              			"valueType": 0,
              			"icon": "xxx",
              			"valueSelect": "2018;2019",
              			"attrType": 1,
              			"enable": 1,
              			"catelogId": 225,
              			"showDesc": 0,
              			"attrGroupId": null
              			}]
              		},
              		{
              		"attrGroupId": 2,
              		"attrGroupName": "基本信息",
              		"sort": 0,
              		"descript": "基本信息",
              		"icon": "xx",
              		"catelogId": 225,
              		"attrs": [{
              			"attrId": 11,
              			"attrName": "机身颜色",
              			"searchType": 0,
              			"valueType": 0,
              			"icon": "xxx",
              			"valueSelect": "黑色;白色",
              			"attrType": 1,
              			"enable": 1,
              			"catelogId": 225,
              			"showDesc": 1,
              			"attrGroupId": null
              		}]
              	}]
              }"
            - 18、spu检索
              "18、spu检索ForSum 最后修改于 2019-11-27
              GET
              /product/spuinfo/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为',//检索关键字
                 catelogId: 6,//三级分类id
                 brandId: 1,//品牌id 
                 status: 0,//商品状态
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              
              			"brandId": 0, //品牌id
              			"brandName": "品牌名字",
              			"catalogId": 0, //分类id
              			"catalogName": "分类名字",
              			"createTime": "2019-11-13T16:07:32.877Z", //创建时间
              			"id": 0, //商品id
              			"publishStatus": 0, //发布状态
              			"spuDescription": "string", //商品描述
              			"spuName": "string", //商品名字
              			"updateTime": "2019-11-13T16:07:32.877Z", //更新时间
              			"weight": 0 //重量
              
              		}]
              	}
              }"
            - 19、新增商品
              "19、新增商品ForSum 最后修改于 2019-11-22
              POST
              /product/spuinfo/save
              请求参数
              {
              	"spuName": "Apple XR",
              	"spuDescription": "Apple XR",
              	"catalogId": 225,
              	"brandId": 12,
              	"weight": 0.048,
              	"publishStatus": 0,
              	"decript": ["https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//66d30b3f-e02f-48b1-8574-e18fdf454a32_f205d9c99a2b4b01.jpg"],
              	"images": ["https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//dcfcaec3-06d8-459b-8759-dbefc247845e_5b5e74d0978360a1.jpg", "https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//5b15e90a-a161-44ff-8e1c-9e2e09929803_749d8efdff062fb0.jpg"],
              	"bounds": {
              		"buyBounds": 500,
              		"growBounds": 6000
              	},
              	"baseAttrs": [{
              		"attrId": 7,
              		"attrValues": "aaa;bb",
              		"showDesc": 1
              	}, {
              		"attrId": 8,
              		"attrValues": "2019",
              		"showDesc": 0
              	}],
              	"skus": [{
              		"attr": [{
              			"attrId": 9,
              			"attrName": "颜色",
              			"attrValue": "黑色"
              		}, {
              			"attrId": 10,
              			"attrName": "内存",
              			"attrValue": "6GB"
              		}],
              		"skuName": "Apple XR 黑色 6GB",
              		"price": "1999",
              		"skuTitle": "Apple XR 黑色 6GB",
              		"skuSubtitle": "Apple XR 黑色 6GB",
              		"images": [{
              			"imgUrl": "https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//dcfcaec3-06d8-459b-8759-dbefc247845e_5b5e74d0978360a1.jpg",
              			"defaultImg": 1
              			}, {
              			"imgUrl": "https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-22//5b15e90a-a161-44ff-8e1c-9e2e09929803_749d8efdff062fb0.jpg",
              			"defaultImg": 0
              		}],
              		"descar": ["黑色", "6GB"],
              		"fullCount": 5,
              		"discount": 0.98,
              		"countStatus": 1,
              		"fullPrice": 1000,
              		"reducePrice": 10,
              		"priceStatus": 0,
              		"memberPrice": [{
              			"id": 1,
              			"name": "aaa",
              			"price": 1998.99
              		}]
              		}, {
              		"attr": [{
              			"attrId": 9,
              			"attrName": "颜色",
              			"attrValue": "黑色"
              		}, {
              			"attrId": 10,
              			"attrName": "内存",
              			"attrValue": "12GB"
              		}],
              		"skuName": "Apple XR 黑色 12GB",
              		"price": "2999",
              		"skuTitle": "Apple XR 黑色 12GB",
              		"skuSubtitle": "Apple XR 黑色 6GB",
              		"images": [{
              			"imgUrl": "",
              			"defaultImg": 0
              		}, {
              			"imgUrl": "",
              			"defaultImg": 0
              		}],
              		"descar": ["黑色", "12GB"],
              		"fullCount": 0,
              		"discount": 0,
              		"countStatus": 0,
              		"fullPrice": 0,
              		"reducePrice": 0,
              		"priceStatus": 0,
              		"memberPrice": [{
              			"id": 1,
              			"name": "aaa",
              			"price": 1998.99
              		}]
              	}, {
              		"attr": [{
              			"attrId": 9,
              			"attrName": "颜色",
              			"attrValue": "白色"
              		}, {
              			"attrId": 10,
              			"attrName": "内存",
              			"attrValue": "6GB"
              		}],
              		"skuName": "Apple XR 白色 6GB",
              		"price": "1998",
              		"skuTitle": "Apple XR 白色 6GB",
              		"skuSubtitle": "Apple XR 黑色 6GB",
              		"images": [{
              			"imgUrl": "",
              			"defaultImg": 0
              		}, {
              			"imgUrl": "",
              			"defaultImg": 0
              		}],
              		"descar": ["白色", "6GB"],
              		"fullCount": 0,
              		"discount": 0,
              		"countStatus": 0,
              		"fullPrice": 0,
              		"reducePrice": 0,
              		"priceStatus": 0,
              		"memberPrice": [{
              			"id": 1,
              			"name": "aaa",
              			"price": 1998.99
              		}]
              	}, {
              		"attr": [{
              			"attrId": 9,
              			"attrName": "颜色",
              			"attrValue": "白色"
              		}, {
              			"attrId": 10,
              			"attrName": "内存",
              			"attrValue": "12GB"
              		}],
              		"skuName": "Apple XR 白色 12GB",
              		"price": "2998",
              		"skuTitle": "Apple XR 白色 12GB",
              		"skuSubtitle": "Apple XR 黑色 6GB",
              		"images": [{
              			"imgUrl": "",
              			"defaultImg": 0
              		}, {
              			"imgUrl": "",
              			"defaultImg": 0
              		}],
              		"descar": ["白色", "12GB"],
              		"fullCount": 0,
              		"discount": 0,
              		"countStatus": 0,
              		"fullPrice": 0,
              		"reducePrice": 0,
              		"priceStatus": 0,
              		"memberPrice": [{
              			"id": 1,
              			"name": "aaa",
              			"price": 1998.99
              		}]
              	}]
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 20、商品上架
              "20、商品上架ForSum 最后修改于 2019-11-27
              POST
              /product/spuinfo/{spuId}/up
              请求参数
              
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 21、sku检索
              "21、sku检索ForSum 最后修改于 2019-11-27
              GET
              /product/skuinfo/list
              请求参数
              {
              page: 1,//当前页码
              limit: 10,//每页记录数
              sidx: 'id',//排序字段
              order: 'asc/desc',//排序方式
              key: '华为',//检索关键字
              catelogId: 0,
              brandId: 0,
              min: 0,
              max: 0
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 26,
              		"pageSize": 10,
              		"totalPage": 3,
              		"currPage": 1,
              		"list": [{
              			"skuId": 1,
              			"spuId": 11,
              			"skuName": "华为 HUAWEI Mate 30 Pro 星河银 8GB+256GB",
              			"skuDesc": null,
              			"catalogId": 225,
              			"brandId": 9,
              			"skuDefaultImg": "https://gulimall-hello.oss-cn-beijing.aliyuncs.com/2019-11-26/60e65a44-f943-4ed5-87c8-8cf90f403018_d511faab82abb34b.jpg",
              			"skuTitle": "华为 HUAWEI Mate 30 Pro 星河银 8GB+256GB麒麟990旗舰芯片OLED环幕屏双4000万徕卡电影四摄4G全网通手机",
              			"skuSubtitle": "【现货抢购！享白条12期免息！】麒麟990，OLED环幕屏双4000万徕卡电影四摄；Mate30系列享12期免息》",
              			"price": 6299.0000,
              			"saleCount": 0
              		}]
              	}
              }"
            - 22、获取spu规格
              "22、获取spu规格ForSum 最后修改于 2019-12-01
              GET
              /product/attr/base/listforspu/{spuId}
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"data": [{
              		"id": 43,
              		"spuId": 11,
              		"attrId": 7,
              		"attrName": "入网型号",
              		"attrValue": "LIO-AL00",
              		"attrSort": null,
              		"quickShow": 1
              	}]
              }"
            - 23、修改商品规格
              "23、修改商品规格ForSum 最后修改于 2019-12-01
              POST
              /product/attr/update/{spuId}
              请求参数
              [{
              	"attrId": 7,
              	"attrName": "入网型号",
              	"attrValue": "LIO-AL00",
              	"quickShow": 1
              }, {
              	"attrId": 14,
              	"attrName": "机身材质工艺",
              	"attrValue": "玻璃",
              	"quickShow": 0
              }, {
              	"attrId": 16,
              	"attrName": "CPU型号",
              	"attrValue": "HUAWEI Kirin 980",
              	"quickShow": 1
              }]
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
          - 订单系统
          - 用户系统
            - 01、获取所有会员等级
              "01、获取所有会员等级ForSum 最后修改于 2019-11-24
              POST
              /member/memberlevel/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"id": 1,
              			"name": "aaa",
              			"growthPoint": null,
              			"defaultStatus": null,
              			"freeFreightPoint": null,
              			"commentGrowthPoint": null,
              			"priviledgeFreeFreight": null,
              			"priviledgeMemberPrice": null,
              			"priviledgeBirthday": null,
              			"note": null
              		}]
              	}
              }"
          - 库存系统
            - 01、仓库列表
              "01、仓库列表ForSum 最后修改于 2019-11-27
              GET
              /ware/wareinfo/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"id": 2,
              			"name": "aa",
              			"address": "bbb",
              			"areacode": "124"
              		}]
              	}
              }"
            - 02、查询商品库存
              "02、查询商品库存ForSum 最后修改于 2019-11-28
              GET
              /ware/waresku/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 wareId: 123,//仓库id
                 skuId: 123//商品id
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"id": 1,
              			"skuId": 1,
              			"wareId": 1,
              			"stock": 1,
              			"skuName": "dd",
              			"stockLocked": 1
              		}]
              	}
              }"
            - 03、查询采购需求
              "03、查询采购需求ForSum 最后修改于 2019-11-27
              GET
              /ware/purchasedetail/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为',//检索关键字
                 status: 0,//状态    
                 wareId: 1,//仓库id
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"id": 2,
              			"purchaseId": 1,
              			"skuId": 1,
              			"skuNum": 2,
              			"skuPrice": 22.0000,
              			"wareId": 1,
              			"status": 1
              		}]
              	}
              }"
            - 04、合并采购需求
              "04、合并采购需求ForSum 最后修改于 2019-11-28
              POST
              /ware/purchase/merge
              请求参数
              {
                purchaseId: 1, //整单id
                items:[1,2,3,4] //合并项集合
              }
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 05、查询未领取的采购单
              "05、查询未领取的采购单ForSum 最后修改于 2019-11-28
              GET
              /ware/purchase/unreceive/list
              请求参数
              
              响应数据
              {
              	"msg": "success",
              	"code": 0,
              	"page": {
              		"totalCount": 0,
              		"pageSize": 10,
              		"totalPage": 0,
              		"currPage": 1,
              		"list": [{
              			"id": 1,
              			"assigneeId": 1,
              			"assigneeName": "aa",
              			"phone": "123",
              			"priority": 1,
              			"status": 1,
              			"wareId": 1,
              			"amount": 22.0000,
              			"createTime": "2019-12-12",
              			"updateTime": "2019-12-12"
              		}]
              	}
              }"
            - 06、领取采购单
              "06、领取采购单ForSum 最后修改于 2019-11-29
              POST
              /ware/purchase/received
              请求参数
              [1,2,3,4]//采购单id
              分页数据
              
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
            - 07、完成采购
              "07、完成采购ForSum 最后修改于 2019-11-29
              POST
              /ware/purchase/done
              请求参数
              {
                 id: 123,//采购单id
                 items: [{itemId:1,status:4,reason:""}]//完成/失败的需求详情
              }
              响应数据
              {
              	"msg": "success",
              	"code": 0
              }"
          - 优惠系统
            - 01、获取优惠券
              "01、获取优惠券ForSum 最后修改于 2019-11-25
              GET
              /coupon/coupon/list
              请求参数
              {
                 page: 1,//当前页码
                 limit: 10,//每页记录数
                 sidx: 'id',//排序字段
                 order: 'asc/desc',//排序方式
                 key: '华为'//检索关键字
              }
              响应数据
              "
          - 第三方服务
            - 1、获取对象存储服务端签名
              "1、获取对象存储服务端签名ForSum 最后修改于 2019-11-13
              GET
              /thirdparty/oss/policy
              响应参数
              参数名
              参数类型
              描述
              code
              number
              0-成功，其他业务码-失败
              msg
              string
              提示消息
              data
              object
              数据字典
              accessid
              string
              访问id
              policy
              string
              上传信息
              signature
              string
              签名信息
              dir
              string
              上传目录
              host
              string
              主机地址
              expire
              string
              签名过期时间"
        - 商城系统接口
          - 首页
          - 商品
            - 01、商品检索
              "01、商品检索ForSum 最后修改于 2019-12-18
              GET
              /api/search
              请求参数
              参数名
              参数类型
              描述
              keyword
              string
              检索关键字
              brandId
              long
              品牌id
              catalogId
              long
              分类id
              sort
              string
              排序： sort=price/salecount/hotscore_desc/asc
              price
              string
              价格区间：price=0_400 或者 price=_200 或者 price=200_
              stock
              int
              是否有库存： stock=0/1；1只显示有货，0或者不传都会显示
              attrs
              string
              可以传入多个； attrs=1_3G:4G；1号属性值为3G或者4G
              pageNo
              int
              页码
              pageSize
              int
              每页大小
              请求示例
              api/search?keyword=小米&brandId=1&catalogId=1&sort=hotscore_desc&price=0_400&stock=1&attrs=1_3G:4G&attrs=2_骁龙855:骁龙845
              响应数据
              {
              	"code": 0,
              	"msg": "success",
              	"data": {
              		"skus": [{
              			"skuId": 1,
              			"spuId": 5,
              			"skuPrice": 999.88,
              			"skuTitle": "华为",
              			"skuImg": "xxxx.jpg",
              			"otherImgs": [""]
              		}],
              		"brands": [{
              			"brandId": 5,
              			"brandName": "华为",
              			"img": "xxxxx.jpg"
              		}],
              		"catalogs": [{
              			"catId": 5,
              			"catName": "手机"
              		}],
              		"attrs": [{
              			"attrId": 11,
              			"attrName": "屏幕",
              			"attrValues": ["全高清", "1080p"]
              		}]
              
              
              	}
              }"
          - 个人中心
          - 购物车
          - 订单支付
      - 三级分类 展示 递归树形结构
        - 成果图
          "页面显示商品三级菜单
          第一级：手机/运营商/数码、电脑/办公...
          第二级：手机通讯、运营商、手机配件
          第三级：手机、游戏手机、老人机
          
          典型：jd.com"
        - 涉及的数据表 pms_category
          "create table pms_category  // '商品三级分类';
          (
             cat_id               bigint not null auto_increment comment '分类id',
             name                 char(50) comment '分类名称',
             parent_cid           bigint comment '父分类id',
             cat_level            int comment '层级',
             show_status          tinyint comment '是否显示[0-不显示，1显示]',
             sort                 int comment '排序',
             icon                 char(255) comment '图标地址',
             product_unit         char(50) comment '计量单位',
             product_count        int comment '商品数量',
             primary key (cat_id)
          );
          
          
          注入数据
          ----------------
          
          insert  into `pms_category`(`cat_id`,`name`,`parent_cid`,`cat_level`,`show_status`,`sort`,`icon`,`product_unit`,`product_count`) values (1,'图书、音像、电子书刊',0,1,1,0,NULL,NULL,0),(2,'手机',0,1,1,0,NULL,NULL,0),(3,'家用电器',0,1,1,0,NULL,NULL,0),(4,'数码',0,1,1,0,NULL,NULL,0),(5,'家居家装',0,1,1,0,NULL,NULL,0),(6,'电脑办公',0,1,1,0,NULL,NULL,0),(7,'厨具',0,1,1,0,NULL,NULL,0),(8,'个护化妆',0,1,1,0,NULL,NULL,0),(9,'服饰内衣',0,1,1,0,NULL,NULL,0),(10,'钟表',0,1,1,0,NULL,NULL,0),(11,'鞋靴',0,1,1,0,NULL,NULL,0),(12,'母婴',0,1,1,0,NULL,NULL,0),(13,'礼品箱包',0,1,1,0,NULL,NULL,0),(14,'食品饮料、保健食品',0,1,1,0,NULL,NULL,0),(15,'珠宝',0,1,1,0,NULL,NULL,0),(16,'汽车用品',0,1,1,0,NULL,NULL,0),(17,'运动健康',0,1,1,0,NULL,NULL,0),(18,'玩具乐器',0,1,1,0,NULL,NULL,0),(19,'彩票、旅行、充值、票务',0,1,1,0,NULL,NULL,0),(20,'生鲜',0,1,1,0,NULL,NULL,0),(21,'整车',0,1,1,0,NULL,NULL,0),(22,'电子书刊',1,2,1,0,NULL,NULL,0),(23,'音像',1,2,1,0,NULL,NULL,0),(24,'英文原版',1,2,1,0,NULL,NULL,0),(25,'文艺',1,2,1,0,NULL,NULL,0),(26,'少儿',1,2,1,0,NULL,NULL,0),(27,'人文社科',1,2,1,0,NULL,NULL,0),(28,'经管励志',1,2,1,0,NULL,NULL,0),(29,'生活',1,2,1,0,NULL,NULL,0),(30,'科技',1,2,1,0,NULL,NULL,0),(31,'教育',1,2,1,0,NULL,NULL,0),(32,'港台图书',1,2,1,0,NULL,NULL,0),(33,'其他',1,2,1,0,NULL,NULL,0),(34,'手机通讯',2,2,1,0,NULL,NULL,0),(35,'运营商',2,2,1,0,NULL,NULL,0),(36,'手机配件',2,2,1,0,NULL,NULL,0),(37,'大 家 电',3,2,1,0,NULL,NULL,0),(38,'厨卫大电',3,2,1,0,NULL,NULL,0),(39,'厨房小电',3,2,1,0,NULL,NULL,0),(40,'生活电器',3,2,1,0,NULL,NULL,0),(41,'个护健康',3,2,1,0,NULL,NULL,0),(42,'五金家装',3,2,1,0,NULL,NULL,0),(43,'摄影摄像',4,2,1,0,NULL,NULL,0),(44,'数码配件',4,2,1,0,NULL,NULL,0),(45,'智能设备',4,2,1,0,NULL,NULL,0),(46,'影音娱乐',4,2,1,0,NULL,NULL,0),(47,'电子教育',4,2,1,0,NULL,NULL,0),(48,'虚拟商品',4,2,1,0,NULL,NULL,0),(49,'家纺',5,2,1,0,NULL,NULL,0),(50,'灯具',5,2,1,0,NULL,NULL,0),(51,'生活日用',5,2,1,0,NULL,NULL,0),(52,'家装软饰',5,2,1,0,NULL,NULL,0),(53,'宠物生活',5,2,1,0,NULL,NULL,0),(54,'电脑整机',6,2,1,0,NULL,NULL,0),(55,'电脑配件',6,2,1,0,NULL,NULL,0),(56,'外设产品',6,2,1,0,NULL,NULL,0),(57,'游戏设备',6,2,1,0,NULL,NULL,0),(58,'网络产品',6,2,1,0,NULL,NULL,0),(59,'办公设备',6,2,1,0,NULL,NULL,0),(60,'文具/耗材',6,2,1,0,NULL,NULL,0),(61,'服务产品',6,2,1,0,NULL,NULL,0),(62,'烹饪锅具',7,2,1,0,NULL,NULL,0),(63,'刀剪菜板',7,2,1,0,NULL,NULL,0),(64,'厨房配件',7,2,1,0,NULL,NULL,0),(65,'水具酒具',7,2,1,0,NULL,NULL,0),(66,'餐具',7,2,1,0,NULL,NULL,0),(67,'酒店用品',7,2,1,0,NULL,NULL,0),(68,'茶具/咖啡具',7,2,1,0,NULL,NULL,0),(69,'清洁用品',8,2,1,0,NULL,NULL,0),(70,'面部护肤',8,2,1,0,NULL,NULL,0),(71,'身体护理',8,2,1,0,NULL,NULL,0),(72,'口腔护理',8,2,1,0,NULL,NULL,0),(73,'女性护理',8,2,1,0,NULL,NULL,0),(74,'洗发护发',8,2,1,0,NULL,NULL,0),(75,'香水彩妆',8,2,1,0,NULL,NULL,0),(76,'女装',9,2,1,0,NULL,NULL,0),(77,'男装',9,2,1,0,NULL,NULL,0),(78,'内衣',9,2,1,0,NULL,NULL,0),(79,'洗衣服务',9,2,1,0,NULL,NULL,0),(80,'服饰配件',9,2,1,0,NULL,NULL,0),(81,'钟表',10,2,1,0,NULL,NULL,0),(82,'流行男鞋',11,2,1,0,NULL,NULL,0),(83,'时尚女鞋',11,2,1,0,NULL,NULL,0),(84,'奶粉',12,2,1,0,NULL,NULL,0),(85,'营养辅食',12,2,1,0,NULL,NULL,0),(86,'尿裤湿巾',12,2,1,0,NULL,NULL,0),(87,'喂养用品',12,2,1,0,NULL,NULL,0),(88,'洗护用品',12,2,1,0,NULL,NULL,0),(89,'童车童床',12,2,1,0,NULL,NULL,0),(90,'寝居服饰',12,2,1,0,NULL,NULL,0),(91,'妈妈专区',12,2,1,0,NULL,NULL,0),(92,'童装童鞋',12,2,1,0,NULL,NULL,0),(93,'安全座椅',12,2,1,0,NULL,NULL,0),(94,'潮流女包',13,2,1,0,NULL,NULL,0),(95,'精品男包',13,2,1,0,NULL,NULL,0),(96,'功能箱包',13,2,1,0,NULL,NULL,0),(97,'礼品',13,2,1,0,NULL,NULL,0),(98,'奢侈品',13,2,1,0,NULL,NULL,0),(99,'婚庆',13,2,1,0,NULL,NULL,0),(100,'进口食品',14,2,1,0,NULL,NULL,0),(101,'地方特产',14,2,1,0,NULL,NULL,0),(102,'休闲食品',14,2,1,0,NULL,NULL,0),(103,'粮油调味',14,2,1,0,NULL,NULL,0),(104,'饮料冲调',14,2,1,0,NULL,NULL,0),(105,'食品礼券',14,2,1,0,NULL,NULL,0),(106,'茗茶',14,2,1,0,NULL,NULL,0),(107,'时尚饰品',15,2,1,0,NULL,NULL,0),(108,'黄金',15,2,1,0,NULL,NULL,0),(109,'K金饰品',15,2,1,0,NULL,NULL,0),(110,'金银投资',15,2,1,0,NULL,NULL,0),(111,'银饰',15,2,1,0,NULL,NULL,0),(112,'钻石',15,2,1,0,NULL,NULL,0),(113,'翡翠玉石',15,2,1,0,NULL,NULL,0),(114,'水晶玛瑙',15,2,1,0,NULL,NULL,0),(115,'彩宝',15,2,1,0,NULL,NULL,0),(116,'铂金',15,2,1,0,NULL,NULL,0),(117,'木手串/把件',15,2,1,0,NULL,NULL,0),(118,'珍珠',15,2,1,0,NULL,NULL,0),(119,'维修保养',16,2,1,0,NULL,NULL,0),(120,'车载电器',16,2,1,0,NULL,NULL,0),(121,'美容清洗',16,2,1,0,NULL,NULL,0),(122,'汽车装饰',16,2,1,0,NULL,NULL,0),(123,'安全自驾',16,2,1,0,NULL,NULL,0),(124,'汽车服务',16,2,1,0,NULL,NULL,0),(125,'赛事改装',16,2,1,0,NULL,NULL,0),(126,'运动鞋包',17,2,1,0,NULL,NULL,0),(127,'运动服饰',17,2,1,0,NULL,NULL,0),(128,'骑行运动',17,2,1,0,NULL,NULL,0),(129,'垂钓用品',17,2,1,0,NULL,NULL,0),(130,'游泳用品',17,2,1,0,NULL,NULL,0),(131,'户外鞋服',17,2,1,0,NULL,NULL,0),(132,'户外装备',17,2,1,0,NULL,NULL,0),(133,'健身训练',17,2,1,0,NULL,NULL,0),(134,'体育用品',17,2,1,0,NULL,NULL,0),(135,'适用年龄',18,2,1,0,NULL,NULL,0),(136,'遥控/电动',18,2,1,0,NULL,NULL,0),(137,'毛绒布艺',18,2,1,0,NULL,NULL,0),(138,'娃娃玩具',18,2,1,0,NULL,NULL,0),(139,'模型玩具',18,2,1,0,NULL,NULL,0),(140,'健身玩具',18,2,1,0,NULL,NULL,0),(141,'动漫玩具',18,2,1,0,NULL,NULL,0),(142,'益智玩具',18,2,1,0,NULL,NULL,0),(143,'积木拼插',18,2,1,0,NULL,NULL,0),(144,'DIY玩具',18,2,1,0,NULL,NULL,0),(145,'创意减压',18,2,1,0,NULL,NULL,0),(146,'乐器',18,2,1,0,NULL,NULL,0),(147,'彩票',19,2,1,0,NULL,NULL,0),(148,'机票',19,2,1,0,NULL,NULL,0),(149,'酒店',19,2,1,0,NULL,NULL,0),(150,'旅行',19,2,1,0,NULL,NULL,0),(151,'充值',19,2,1,0,NULL,NULL,0),(152,'游戏',19,2,1,0,NULL,NULL,0),(153,'票务',19,2,1,0,NULL,NULL,0),(154,'产地直供',20,2,1,0,NULL,NULL,0),(155,'水果',20,2,1,0,NULL,NULL,0),(156,'猪牛羊肉',20,2,1,0,NULL,NULL,0),(157,'海鲜水产',20,2,1,0,NULL,NULL,0),(158,'禽肉蛋品',20,2,1,0,NULL,NULL,0),(159,'冷冻食品',20,2,1,0,NULL,NULL,0),(160,'熟食腊味',20,2,1,0,NULL,NULL,0),(161,'饮品甜品',20,2,1,0,NULL,NULL,0),(162,'蔬菜',20,2,1,0,NULL,NULL,0),(163,'全新整车',21,2,1,0,NULL,NULL,0),(164,'二手车',21,2,1,0,NULL,NULL,0),(165,'电子书',22,3,1,0,NULL,NULL,0),(166,'网络原创',22,3,1,0,NULL,NULL,0),(167,'数字杂志',22,3,1,0,NULL,NULL,0),(168,'多媒体图书',22,3,1,0,NULL,NULL,0),(169,'音乐',23,3,1,0,NULL,NULL,0),(170,'影视',23,3,1,0,NULL,NULL,0),(171,'教育音像',23,3,1,0,NULL,NULL,0),(172,'少儿',24,3,1,0,NULL,NULL,0),(173,'商务投资',24,3,1,0,NULL,NULL,0),(174,'英语学习与考试',24,3,1,0,NULL,NULL,0),(175,'文学',24,3,1,0,NULL,NULL,0),(176,'传记',24,3,1,0,NULL,NULL,0),(177,'励志',24,3,1,0,NULL,NULL,0),(178,'小说',25,3,1,0,NULL,NULL,0),(179,'文学',25,3,1,0,NULL,NULL,0),(180,'青春文学',25,3,1,0,NULL,NULL,0),(181,'传记',25,3,1,0,NULL,NULL,0),(182,'艺术',25,3,1,0,NULL,NULL,0),(183,'少儿',26,3,1,0,NULL,NULL,0),(184,'0-2岁',26,3,1,0,NULL,NULL,0),(185,'3-6岁',26,3,1,0,NULL,NULL,0),(186,'7-10岁',26,3,1,0,NULL,NULL,0),(187,'11-14岁',26,3,1,0,NULL,NULL,0),(188,'历史',27,3,1,0,NULL,NULL,0),(189,'哲学',27,3,1,0,NULL,NULL,0),(190,'国学',27,3,1,0,NULL,NULL,0),(191,'政治/军事',27,3,1,0,NULL,NULL,0),(192,'法律',27,3,1,0,NULL,NULL,0),(193,'人文社科',27,3,1,0,NULL,NULL,0),(194,'心理学',27,3,1,0,NULL,NULL,0),(195,'文化',27,3,1,0,NULL,NULL,0),(196,'社会科学',27,3,1,0,NULL,NULL,0),(197,'经济',28,3,1,0,NULL,NULL,0),(198,'金融与投资',28,3,1,0,NULL,NULL,0),(199,'管理',28,3,1,0,NULL,NULL,0),(200,'励志与成功',28,3,1,0,NULL,NULL,0);"
        - 因此可见三级分类都在一张表里面，用parent_cid表示自己的父级是什么
        - 现在的业务是，把表中的分类以树的形式返回给前端
        - 1. 在实体类 CategoryEntity 中新增 List<CategoryEntity> children 属性
          "@TableField(exist = false) 表示这个属性不在数据库中"
        - 2. service层写业务
          "/**
           * @return 查出所有分类，以树形结构组装
           */
          @Override
          public List<CategoryEntity> listWithTree() {
              // 查出所有分类
              List<CategoryEntity> entities = list();
          
              // sort 去空
              entities.stream().filter(e -> e.getSort() == null).forEach(e -> e.setSort(0));
          
              // 组成成树  一级菜单
              return entities.stream()
                      // 找到所有一级分类
                      .filter(categoryEntity -> categoryEntity.getParentCid() == 0)
                      // 添加上子分类
                      .peek(menu -> menu.setChildren(getChildren(menu, entities)))
                      // 按照 sort 排序
                      .sorted(Comparator.comparingInt(CategoryEntity::getSort))
                      .collect(Collectors.toList());
          }
          
          /**
           * 获取 root 的所有子分类
           *
           * @param root root分类
           * @param all  全部分类信息
           * @return root 的所有子分类
           */
          private List<CategoryEntity> getChildren(CategoryEntity root, List<CategoryEntity> all) {
              return all.stream()
                      // 找到 all 中父分类id == root.id 的
                      .filter(menu -> Objects.equals(menu.getParentCid(), (root.getCatId())))
                      // 递归，为找到的子分类，再找子子分类
                      .peek(menu -> menu.setChildren(getChildren(menu, all)))
                      // 按照 sort 排序
                      .sorted(Comparator.comparingInt(CategoryEntity::getSort))
                      .collect(Collectors.toList());
          }"
        - 3. controller层调用 product/category/list/tree
          "/**
           * @return 查出所有分类，以树形结构组装
           * @see CategoryService#listWithTree()
           */
          @RequestMapping("/list/tree")
          public R listTree(){
              // all
              List<CategoryEntity> listWithTree = categoryService.listWithTree();
          
              return R.ok().put("data",listWithTree);
          }"
        - 后台数据的展示到 renrenfast
          - 1. 新建菜单：商品系统 - 分类维护 product/category
            "进入 系统管理 - 菜单管理 中，新建
            
            新建 商品系统 - 分类维护
            
            商品系统是顶级菜单
            
            分页维护中，路由写“product/category”，这里的路由会自动去寻找
            src\views\modules\product\category.vue
            这个文件，创建它
            
            这些菜单，会添加到数据库中持久化"
          - 2. 修改前端代码，将所有请求发给网关
            "static\config\index.js 文件
            
            修改以下代码 20088 是网关
            ------------------------------------------------------
              // api接口请求地址，给网关发请求
              window.SITE_CONFIG['baseUrl'] = 'http://192.168.2.13:20088/api'"
          - 3. 修改后台管理系统，将 renrenfast 注册到 nacos
            - POM文件添加 common 依赖
              "<dependency>
                 <groupId>com.atguigu.gulimall</groupId>
                 <artifactId>gulimall-common</artifactId>
                 <version>${project.version}</version>
              </dependency>
              
              注意改下version"
            - application.yml写 应用名字 注册中心
              "spring:
                application:
                  name: renren-fast
                cloud:
                  nacos:
                    discovery:
                      server-addr: 192.168.2.13:8848"
              - 有多个配置文件，规则如下
                "springboot的配置文件有以下
                application.properties
                application-dev.properties 开发环境
                application-prod.properties 运行环境
                application-test.properties 测试环境
                
                在application.properties中配置内容
                spring.profiles.active=dev
                
                说明是项目默认使用配置文件application-dev.properties
                发布项目，打包成jar包之后运行
                java -jar  ***.jar   --spring.profiles.active=prod
                
                表示运行使用的是application-prod.properties配置文件
                ————————————————
                版权声明：本文为CSDN博主「向上吧！ 少年」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
                原文链接：https://blog.csdn.net/qq_16613311/article/details/98634523"
            - 主启动添加 @EnableDiscoveryClient
          - 4. 修改网关的yml，配置到 renrenfast 的路由
            "gateway:
              routes:
                - id: admin_route
                  uri: lb://renren-fast
                  predicates:
                    - Path=/api/**
                  filters:
                    - RewritePath=/api/(?<segment>.*),/renren-fast/$\{segment}"
            - 修改后，访问页面，可以看待后台加载的验证码，但是无法登录，因为跨域了
            - 这里踩到坑了，本地配置被远程配置覆盖了
          - 5. 网关里设置允许跨域
            - 网关里添加一个配置bean
              "@Configuration
              public class GulimallCorsConfiguration {
                  private final static Logger LOGGER = LoggerFactory.getLogger(GulimallCorsConfiguration.class);
              
                  @Bean
                  public CorsWebFilter corsWebFilter(){
                      UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource =
                              new UrlBasedCorsConfigurationSource();
              
                      CorsConfiguration corsConfiguration =
                              new org.springframework.web.cors.CorsConfiguration();
              
                      corsConfiguration.addAllowedHeader("*");
                      corsConfiguration.addAllowedMethod("*");
                      corsConfiguration.addAllowedOrigin("*");
                      corsConfiguration.setAllowCredentials(true);
              
                      urlBasedCorsConfigurationSource.registerCorsConfiguration(
                              "/**", //任意路径都跨域
                              corsConfiguration
                      );
              
                      return new CorsWebFilter(urlBasedCorsConfigurationSource);
                  }
              }"
            - 删除 renren-fast中的跨域配置
              "package io.renren.config;
              
              import org.springframework.context.annotation.Configuration;
              import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
              
              @Configuration
              public class CorsConfig implements WebMvcConfigurer {
              
              //    @Override
              //    public void addCorsMappings(CorsRegistry registry) {
              //        registry.addMapping("/**")
              //            .allowedOrigins("*")
              //            .allowCredentials(true)
              //            .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")
              //            .maxAge(3600);
              //    }
              }"
            - 设置好后，可以完美登录
          - 2. 写前端页面 src\views\modules\product\category.vue
            "因为要管理的商品分类是分级的，所以去 element-ui 找一个树形控件
            https://element.eleme.cn/#/zh-CN/component/tree
            先全部复制到 category.vue 中，看效果"
          - 3.  前端发送请求，拿到商品分类树 /list/tree
            - 又要配置网关 把/api/product 请求转发给 商品服务
              "gateway:
                routes:
                  - id: gulimall_product
                    uri: lb://gulimall-product
                    predicates:
                      - Path=/api/product/**
                    filters:
                      - RewritePath=/api/(?<segment>.*),/$\{segment}
                  # 这个路由放最后，不然会覆盖前面的
                  - id: admin_route
                    uri: lb://renren-fast
                    predicates:
                      - Path=/api/**
                    filters:
                      - RewritePath=/api/(?<segment>.*),/renren-fast/$\{segment}"
            - 前端代码
              "<template>
                <el-tree :data="menus" :props="defaultProps" @node-click="handleNodeClick"></el-tree>
              </template>
              
              <script>
              export default {
                data() {
                  return {
                    menus: [],
                    defaultProps: {
                      // menus 数组是一个对象数组，里面哪个属性指向子节点
                      children: "children",
                      // menus 数组是一个对象数组，要显示哪个属性的值到页面
                      label: "name"
                    }
                  };
                },
                methods: {
                  handleNodeClick(data) {
                    console.log(data);
                  },
                  // 获得所有菜单
                  getMenus() {
                    // 发送请求
                    this.$http({
                      url: this.$http.adornUrl("/product/category/list/tree"),
                      method: "get"
                    }).then(({ data }) => {
                      // 这里的大括号 {} 是对象解构
                      // console.log(data.data);
                      // 绑定
                      this.menus = data.data;
                    });
                  }
                },
                created() {
                  // 构建vue时，就发送请求
                  this.getMenus();
                }
              };
              </script>
              
              <style scoped>
              </style>"
        - 增删改功能
          "略，总体思路如下
          
          学习element-tree 中关于增删改的代码
          在后台商品服务添加相关接口"
          - mybatis-plus逻辑删除 @TableLogic 
            "即删除元素时，仅仅修改其中的一个元组（一般是1改为0）
            
            在相关字段上添加注解
            @TableLogic(value = "1",delval = "0")
            private Integer showStatus;
            
            配置完成后，与删除相关方法，自动改为修改逻辑字段
            
            另外也支持全局的yml配置
            * mybatis-plus:
            * global-config:
            * db-config:
            * logic-delete-field: flag  #全局逻辑删除字段值 3.3.0开始支持，详情看下面。
            * logic-delete-value: 1 # 逻辑已删除值(默认为 1)
            * logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)"
      - 品牌管理 使用逆向工程
        - 熟悉数据表 pms_brand
          "brand_id
          name
          logo // 保存logo图片的地址
          descript
          show_atatus // 逻辑删除字段
          first_letter // 品牌的首字母，用于辅助快速检索
          sort"
        - 前端 renren-fast 新建菜单
          "系统管理 - 菜单管理 - 新增 - 菜单
          
          名称：品牌管理
          上级菜单：商品系统
          路由：product/brand
          授权标识：不管
          排序号：不管
          菜单图标：随便"
        - 直接使用 renren-generator 逆向生成的代码
          "src目录下的 brand.vue 和 brand-add-or-update.vue 复制到src\views\modules\product\brand.vue"
        - 删除权限验证方法，就可以显示 新增/批量删除 按钮
          "utils/index.js
          
          export function isAuth (key) {
            // return JSON.parse(sessionStorage.getItem('permissions') || '[]').indexOf(key) !== -1 || false
            return true
          }"
        - 优化逆向生成的代码
          - 修改表头文字
            "显示状态[0-不显示；1-显示]
            修改为
            显示状态"
          - 字段[显示状态]改为开关，并且能直接点击修改
            - 1. 了解一下表格插槽方法
              "<el-table-column prop="showStatus" header-align="center" align="center" label="显示状态">
                      <template slot-scope="scope">
                        使用 template 实现插槽，slot-scope属性将scope对象传入槽中
                        scope对象，大致包含表格状态、当前列信息
                      </template>
                    </el-table-column>"
            - 2. 插槽使用一个开关
              "v-model 动态绑定 scope.row.showStatus 即当前行的品牌显示状态
              :active-value 和 :inactive-value 表示开关何时显示为开，何时关闭
              @change 绑定开关状态改变时的回调函数
              ---------------------
              <el-table-column prop="showStatus" header-align="center" align="center" label="显示状态">
                      <template slot-scope="scope">
                        <el-switch
                          v-model="scope.row.showStatus"
                          @change="updateShowStatus(scope.row)"
                          active-color="#13ce66"
                          inactive-color="#ff4949"
                          :active-value="1"
                          :inactive-value="0"
                        ></el-switch>
                      </template>
                    </el-table-column>"
            - 3. 编写开关改变回调函数
              "发送请求，只需要传递id和要修改的数据，其他数据为空，即表示不修改
              这里发送的数据即 { brandId: row.brandId, showStatus: row.showStatus }
              -------------------
              updateShowStatus(row) {
                    console.log(row.brandId, row.showStatus);
                    this.$http({
                      url: this.$http.adornUrl("/product/brand/update"),
                      method: "post",
                      data: this.$http.adornData(
                        { brandId: row.brandId, showStatus: row.showStatus },
                        false
                      )
                    }).then(({ data }) => {
                      if (data && data.code === 0) {
                        this.$message({
                          message: "品牌状态修改成功",
                          type: "success",
                          duration: 1500,
                          onClose: () => {
                            this.getDataList();
                          }
                        });
                      } else {
                        this.message.error(data.msg);
                      }
                    });
                  },"
          - 字段[品牌logo]是一个图片，实现图片的上传、显示
            "数据库 pms_brand 存的仅仅是图片地址"
            - 1. 因为需要一个文件服务器，这里使用阿里云OSS 简单学习
              "网址 https://www.aliyun.com/product/oss
              
              相关术语
              	存储空间 bucket ：容器
              	对象：即文件
              	访问域名
              	访问密钥：accessKeyId accessKeySecret 对称加密（也就是账号和密码）
              
              建立 bucket
              
              上传文件测试 
              https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/product-brand/baidu.jpg
              
              实际文件上传有两种方法：
              1. 前端先把文件发给后端，后端再上传。
              	好处：账号密码绝对不会暴露
              	坏处：服务器压力大
              2. 后端只签名
              	1. 前端向服务器请求 上传policy
              	2. 服务器返回 policy到前端 （就是一个防伪签名，签名包括上传地址信息）
              	3. 前端直接上传数据到 OSS"
            - 2. 申请accessKey
              "首先 开通阿里RAM访问控制 并创建用户
              授予OSS读写权限"
            - 2.1 后端文件上传测试 @Deprecated  不推荐
              - 使用原始 OSS
                "pom
                --------------------
                <!--        <dependency>-->
                <!--            <groupId>com.aliyun.oss</groupId>-->
                <!--            <artifactId>aliyun-sdk-oss</artifactId>-->
                <!--        </dependency>-->
                
                code
                ---------------------
                @Test
                public void testFileUpload() {
                    // 创建OSSClient实例。
                    OSS ossClient = new OSSClientBuilder().build(endpoint, keyId, keySecret);
                
                    // 创建PutObjectRequest对象。
                    PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, brandLogoFolder+"/aliyun.jpg",
                            new File("C:\\Users\\javalearn\\Documents\\github\\grainmall2020\\grainmall_backend\\docs\\product-brand\\aliyun.jpg"));
                    
                
                    // 上传文件。
                    ossClient.putObject(putObjectRequest);
                
                    // 关闭OSSClient。
                    ossClient.shutdown();
                
                    LOGGER.info("上传完成");
                }"
              - 使用 springcloud alibaba 集成的 OSS
                "pom
                -------------------
                <dependency>
                    <groupId>com.alibaba.cloud</groupId>
                    <artifactId>spring-cloud-starter-alicloud-oss</artifactId>
                </dependency>
                
                
                YML
                ---------------------
                spring:
                  cloud:
                    alicloud:
                      access-key: XXX
                      secret-key: XXX
                      oss:
                        endpoint: XXX
                
                使用方法
                -----------------------
                直接注入 OSSClient
                
                
                ----------------------
                @Autowired
                private OSSClient ossClient;
                
                @Value("${spring.cloud.alicloud.oss.bucket-name}")
                private String bucketName;
                
                @Value("${spring.cloud.alicloud.oss.brand-logo-folder}")
                public String brandLogoFolder;
                
                @Test
                public void testFileUpload() {
                
                    PutObjectRequest putObjectRequest = new PutObjectRequest(bucketName, brandLogoFolder + "/elementUI.jpg",
                            new File("C:\\Users\\javalearn\\Documents\\github\\grainmall2020\\grainmall_backend\\docs\\product-brand\\elementUI.jpg"));
                
                    ossClient.putObject(putObjectRequest);
                
                    ossClient.shutdown();
                
                    LOGGER.info("上传成功");
                }
                "
            - 3. 服务端签名后、前端直传
              "服务端签名后直传的原理如下：
              1. 用户发送上传Policy请求到应用服务器。
              2. 应用服务器返回上传Policy和签名给用户。
              3. 用户直接上传数据到OSS。"
              - 后端代码
                - 创建一个专门使用第三方服务的模块 端口35700
                  "服务名：gulimall-third-party
                  "
                  - POM 主要引入 spring-cloud-starter-alicloud-oss
                    "<?xml version="1.0" encoding="UTF-8"?>
                    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
                        <modelVersion>4.0.0</modelVersion>
                        <parent>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-starter-parent</artifactId>
                            <version>2.2.6.RELEASE</version>
                            <relativePath/> <!-- lookup parent from repository -->
                        </parent>
                        <groupId>com.atguigu.gulimall</groupId>
                        <artifactId>gulimall-thrid-party</artifactId>
                        <version>0.0.1-SNAPSHOT</version>
                        <name>gulimall-thrid-party</name>
                        <description>第三方服务模块</description>
                    
                        <properties>
                            <java.version>1.8</java.version>
                            <spring-cloud.version>Hoxton.SR4</spring-cloud.version>
                        </properties>
                    
                        <dependencies>
                            <dependency>
                                <groupId>com.alibaba.cloud</groupId>
                                <artifactId>spring-cloud-starter-alicloud-oss</artifactId>
                            </dependency>
                    
                            <dependency>
                                <groupId>com.atguigu.gulimall</groupId>
                                <artifactId>gulimall-common</artifactId>
                                <version>${project.version}</version>
                            </dependency>
                    
                    
                            <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-web</artifactId>
                            </dependency>
                            <dependency>
                                <groupId>org.springframework.cloud</groupId>
                                <artifactId>spring-cloud-starter-openfeign</artifactId>
                            </dependency>
                    
                            <dependency>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-starter-test</artifactId>
                                <scope>test</scope>
                                <exclusions>
                                    <exclusion>
                                        <groupId>org.junit.vintage</groupId>
                                        <artifactId>junit-vintage-engine</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    
                        <dependencyManagement>
                            <dependencies>
                                <dependency>
                                    <groupId>org.springframework.cloud</groupId>
                                    <artifactId>spring-cloud-dependencies</artifactId>
                                    <version>${spring-cloud.version}</version>
                                    <type>pom</type>
                                    <scope>import</scope>
                                </dependency>
                                <dependency>
                                    <groupId>com.alibaba.cloud</groupId>
                                    <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                                    <version>2.1.0.RELEASE</version>
                                    <type>pom</type>
                                    <scope>import</scope>
                                </dependency>
                            </dependencies>
                        </dependencyManagement>
                    
                        <build>
                            <plugins>
                                <plugin>
                                    <groupId>org.springframework.boot</groupId>
                                    <artifactId>spring-boot-maven-plugin</artifactId>
                                </plugin>
                            </plugins>
                        </build>
                    
                    </project>"
                  - bootstrap.yml
                    "spring:
                      profiles:
                        active: dev
                      cloud:
                        nacos:
                          discovery:
                            server-addr: 192.168.2.3:8848
                          config:
                            server-addr: 192.168.2.3:8848
                            file-extension: yaml
                            namespace: third-party
                            ext-config:
                              - data-id: oss.yaml
                                refresh: true
                      application:
                        name: gulimall-third-party"
                  - gulimall-third-party-dev.yaml
                    "server:
                      port: 35700"
                  - oss.yaml
                    "spring:
                      cloud:
                        alicloud:
                          access-key: xxx
                          secret-key: xxx
                          oss:
                            endpoint: oss-cn-shenzhen.aliyuncs.com
                            bucket-name: gulimall-madokast"
                - controller
                  "package com.atguigu.gulimall.thirdparty.controller;
                  
                  import com.aliyun.oss.OSS;
                  import com.aliyun.oss.OSSClient;
                  import com.aliyun.oss.OSSClientBuilder;
                  import com.aliyun.oss.common.utils.BinaryUtil;
                  import com.aliyun.oss.model.MatchMode;
                  import com.aliyun.oss.model.PolicyConditions;
                  import org.slf4j.Logger;
                  import org.slf4j.LoggerFactory;
                  import org.springframework.beans.factory.annotation.Value;
                  import org.springframework.web.bind.annotation.GetMapping;
                  import org.springframework.web.bind.annotation.RequestMapping;
                  import org.springframework.web.bind.annotation.RestController;
                  
                  import java.net.InetAddress;
                  import java.net.UnknownHostException;
                  import java.nio.charset.StandardCharsets;
                  import java.text.SimpleDateFormat;
                  import java.util.Date;
                  import java.util.LinkedHashMap;
                  import java.util.Map;
                  import java.util.Objects;
                  
                  /**
                   * Description
                   * OssController
                   * <p>
                   * Data
                   * 2020/5/17-17:12
                   *
                   * @author zrx
                   * @version 1.0
                   */
                  
                  @RestController
                  @RequestMapping("/oss")
                  public class OssController {
                      private final static Logger LOGGER = LoggerFactory.getLogger(OssController.class);
                  
                  
                      // 这里必须是接口类型才能注入成功
                      private final OSS ossClient;
                  
                  
                      @Value("${spring.cloud.alicloud.oss.endpoint}")
                      private String endpoint;
                  
                      @Value("${spring.cloud.alicloud.oss.bucket-name}")
                      private String bucket;
                  
                      @Value("${spring.cloud.alicloud.access-key}")
                      private String accessId;
                  
                      @Value("${server.port}")
                      private int serverPort;
                  
                      // 动态获取自子的url
                      public String getUrl() {
                          InetAddress address = null;
                          try {
                              address = InetAddress.getLocalHost();
                          } catch (UnknownHostException e) {
                              e.printStackTrace();
                          }
                          Objects.requireNonNull(address);
                          return "http://" + address.getHostAddress() + ":" + this.serverPort;
                      }
                  
                  
                      public OssController(OSS ossClient) {
                          this.ossClient = ossClient;
                      }
                  
                      /**
                       * {
                       *     "accessid": "LTAI4G9d4yHckywVEELQXghw",
                       *     "policy": "eyJleHBpcmF0aW9u....",
                       *     "signature": "m84uXGONhhlE51cIq4G8qHwha5o=",
                       *     "dir": "2020-05-17/",
                       *     "host": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com",
                       *     "expire": "1589726647"
                       * }
                       * @return json
                       */
                      @GetMapping("/policy")
                      public Object policy() {
                          // 以下 注入/动态获取
                  //        String accessId = "<yourAccessKeyId>"; // 请填写您的AccessKeyId。
                  //        String accessKey = "<yourAccessKeySecret>"; // 请填写您的AccessKeySecret。
                  //        String endpoint = "oss-cn-hangzhou.aliyuncs.com"; // 请填写您的 endpoint。
                  //        String bucket = "bucket-name"; // 请填写您的 bucketname 。
                          String host = "https://" + bucket + "." + endpoint; // host的格式为 bucketname.endpoint
                          // callbackUrl为 上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。
                          String callbackUrl = getUrl();
                  
                  
                          // 指定为 当前日期
                          String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
                          String dir = today; // 用户上传文件时指定的前缀。
                  
                          // 创建OSSClient实例。
                  //        OSS ossClient = new OSSClientBuilder().build(endpoint, accessId, accessKey);
                  
                          Map<String, String> respMap = new LinkedHashMap<>();
                  
                          try {
                              long expireTime = 30; // 30秒
                              long expireEndTime = System.currentTimeMillis() + expireTime * 1000;
                              Date expiration = new Date(expireEndTime);
                              // PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。
                              PolicyConditions policyConds = new PolicyConditions();
                              policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000);
                              policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);
                  
                              String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);
                              byte[] binaryData = postPolicy.getBytes(StandardCharsets.UTF_8);
                              String encodedPolicy = BinaryUtil.toBase64String(binaryData);
                              String postSignature = ossClient.calculatePostSignature(postPolicy);
                  
                              respMap.put("accessid", accessId);
                              respMap.put("policy", encodedPolicy);
                              respMap.put("signature", postSignature);
                              respMap.put("dir", dir);
                              respMap.put("host", host);
                              respMap.put("expire", String.valueOf(expireEndTime / 1000));
                              // respMap.put("expire", formatISO8601Date(expiration));
                  
                              // 可惜回调不了 OSS 找不到我
                  //            JSONObject jasonCallback = new JSONObject();
                  //            jasonCallback.put("callbackUrl", callbackUrl);
                  //            jasonCallback.put("callbackBody",
                  //                    "filename=${object}&size=${size}&mimeType=${mimeType}&height=${imageInfo.height}&width=${imageInfo.width}");
                  //            jasonCallback.put("callbackBodyType", "application/x-www-form-urlencoded");
                  //            String base64CallbackBody = BinaryUtil.toBase64String(jasonCallback.toString().getBytes());
                  //            respMap.put("callback", base64CallbackBody);
                  //
                  //            JSONObject ja1 = JSONObject.fromObject(respMap);
                  //            // System.out.println(ja1.toString());
                  //            response.setHeader("Access-Control-Allow-Origin", "*");
                  //            response.setHeader("Access-Control-Allow-Methods", "GET, POST");
                  //            response(request, response, ja1.toString());
                  
                          } catch (Exception e) {
                              // Assert.fail(e.getMessage());
                              System.out.println(e.getMessage());
                          } finally {
                              ossClient.shutdown();
                          }
                  
                          return R.ok().put("data",respMap);
                      }
                  
                  
                  }"
                - 网关配置好信息
                  "- id: gulimall-third-party
                    uri: lb://gulimall-third-party
                    predicates:
                      - Path=/api/thirdparty/**
                    filters:
                      - RewritePath=/api/thirdparty/(?<segment>.*),/$\{segment}"
                - 测试结果
                  "{
                      "msg": "success",
                      "code": 0,
                      "data": {
                          "accessid": "LTAI4G9d4yHckywVEELQXghw",
                          "policy": "eyJleHBpcmF0aW9uIjoiMjAyMC0wNS0xN1QxNToyNjoyNS4zMDVaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJzdGFydHMtd2l0aCIsIiRrZXkiLCIyMDIwLTA1LTE3LyJdXX0=",
                          "signature": "hlkZyDdtHyjXmX01MkhogoOtcUk=",
                          "dir": "2020-05-17/",
                          "host": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com",
                          "expire": "1589729185"
                      }
                  }"
              - 前端代码
                - 使用elementUI upload组件（别人已经写好）
                - 获取后端policy.js
                  "// 代码返回一个 promise 可以继续操作
                  
                  import http from '@/utils/httpRequest.js'
                  export function policy() {
                     return  new Promise((resolve,reject)=>{
                          http({
                              url: http.adornUrl("/thirdparty/oss/policy"),
                              method: "get",
                              params: http.adornParams({})
                          }).then(({ data }) => {
                              resolve(data);
                          })
                      });
                  }"
                - 单文件上传组件 'singleUpload'
                  "<template> 
                    <div>
                      <el-upload
                        action上传地址-外网访问的bucket地址
                        action="http://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com"
                        :data="dataObj"
                        list-type="picture"
                        :multiple="false" :show-file-list="showFileList"
                        :file-list="fileList"
                        :before-upload="beforeUpload"
                        :on-remove="handleRemove"
                        :on-success="handleUploadSuccess"
                        :on-preview="handlePreview">
                        <el-button size="small" type="primary">点击上传</el-button>
                        <div slot="tip" class="el-upload__tip">只能上传jpg/png文件，且不超过10MB</div>
                      </el-upload>
                      <el-dialog :visible.sync="dialogVisible">
                        <img width="100%" :src="fileList[0].url" alt="">
                      </el-dialog>
                    </div>
                  </template>
                  <script>
                     import {policy} from './policy'
                     import { getUUID } from '@/utils'
                  
                    export default {
                      name: 'singleUpload',
                      props: {
                        // 图片地址？
                        value: String
                      },
                      computed: {
                        // 图片地址
                        imageUrl() {
                          return this.value;
                        },
                        // 图片名字
                        imageName() {
                          if (this.value != null && this.value !== '') {
                            return this.value.substr(this.value.lastIndexOf("/") + 1);
                          } else {
                            return null;
                          }
                        },
                        // 文件展示
                        fileList() {
                          return [{
                            name: this.imageName,
                            url: this.imageUrl
                          }]
                        },
                        showFileList: {
                          get: function () {
                            return this.value !== null && this.value !== ''&& this.value!==undefined;
                          },
                          set: function (newValue) {
                          }
                        }
                      },
                      data() {
                        return {
                          dataObj: {
                            policy: '',
                            signature: '',
                            key: '',
                            ossaccessKeyId: '',
                            dir: '',
                            host: '',
                            // callback:'',
                          },
                          dialogVisible: false
                        };
                      },
                      methods: {
                        emitInput(val) {
                          this.$emit('input', val)
                        },
                        handleRemove(file, fileList) {
                          this.emitInput('');
                        },
                        handlePreview(file) {
                          this.dialogVisible = true;
                        },
                        beforeUpload(file) {
                          let _self = this;
                          return new Promise((resolve, reject) => {
                            policy().then(response => {
                              _self.dataObj.policy = response.data.policy;
                              _self.dataObj.signature = response.data.signature;
                              _self.dataObj.ossaccessKeyId = response.data.accessid;
                              _self.dataObj.key = response.data.dir + '/'+getUUID()+'_${filename}';
                              _self.dataObj.dir = response.data.dir;
                              _self.dataObj.host = response.data.host;
                              resolve(true)
                            }).catch(err => {
                              reject(false)
                            })
                          })
                        },
                        handleUploadSuccess(res, file) {
                          console.log("上传成功...")
                          this.showFileList = true;
                          this.fileList.pop();
                          this.fileList.push({name: file.name, url: this.dataObj.host + '/' + this.dataObj.key.replace("${filename}",file.name) });
                          this.emitInput(this.fileList[0].url);
                        }
                      }
                    }
                  </script>
                  <style>
                  
                  </style>
                  
                  
                  "
                - 在\views\modules\product\brand-add-or-update.vue 中使用
                  "1. 导入
                  import SingleUpload from "@/components/upload/singleUpload"
                  2. 加入组件
                      components:{
                        SingleUpload
                      },
                  3. 使用组件
                  <Single-upload v-model="dataForm.logo"></Single-upload>"
                - 表格中图片显示\views\modules\product\brand.vue
                  "<el-table-column prop="logo" header-align="center" align="center" label="品牌logo">
                          <template slot-scope="scope">
                            <img style="width: 100px; height: 80px" :src="scope.row.logo" fit="contain"/>
                          </template>
                        </el-table-column>"
                - 最后一步 设置bucket允许跨域。测试成功
          - 前端验证数据 async-validator
            "例如：检索首字母 必须是单个字母。不仅仅是非空"
            - 学习表单验证的方法 https://element.eleme.cn/#/zh-CN/component/form
              ":model="dataForm" :rules="dataRule"
              前者绑定表单数据
              
              后者绑定校验规则
              
                      dataRule: {
                        name: [
                          { required: true, message: '品牌名不能为空', trigger: 'blur' }
                        ],
                        logo: [
                          { required: true, message: '品牌logo地址不能为空', trigger: 'blur' }
                        ],
                        descript: [
                          { required: true, message: '介绍不能为空', trigger: 'blur' }
                        ],
                        showStatus: [
                          { required: true, message: '显示状态', trigger: 'blur' }
                        ],
                        firstLetter: [
                          { required: true, message: '检索首字母不能为空', trigger: 'blur' }
                        ],
                        sort: [
                          { required: true, message: '排序不能为空', trigger: 'blur' }
                        ]
                      }
              
              required true 表示非空
              message 校验失败显示信息
              trigger 校验触发时机 blur 失去焦点
              
              一个数据的校验规则可以定义多个
              如 { min: 3, max: 5, message: '长度在 3 到 5 个字符', trigger: 'blur' }
              
              还可以自定义校验器"
            - 自定义校验器写法
              "dataRule: {
                      name: [{ required: true, message: "品牌名不能为空", trigger: "blur" }],
                      logo: [
                        { required: true, message: "品牌logo地址不能为空", trigger: "blur" }
                      ],
                      descript: [
                        { required: true, message: "介绍不能为空", trigger: "blur" }
                      ],
                      showStatus: [{ required: true, message: "显示状态", trigger: "blur" }],
                      firstLetter: [
                        //{ required: true, message: '检索首字母不能为空', trigger: 'blur' }
                        {
                          validator: (rule, value, callback) => {
                            if (value == "") callback(new Error("首字母必须填写"));
                            else if (!/^[a-zA-Z]$/.test(value))
                              callback(new Error("首字母必须是单独字母"));
                            else callback();
                          },
                          trigger: "blur"
                        }
                      ],
                      sort: [
                        //{ required: true, message: '排序不能为空', trigger: 'blur' }
                        {
                          validator: (rule, value, callback) => {
                            if (value == "") {
                              callback(new Error("排序必须填写"));
                            }
                            value = Number.parseFloat(value);
                            if (!Number.isInteger(value)) {
                              callback(new Error("排序必须是整数"));
                            } else if (value < 0) {
                              callback(new Error("排序必须大于0"));
                            } else {
                              callback();
                            }
                          },
                          trigger: "blur"
                        }
                      ]
                    }"
          - 后端验证数据 JSR303/javax.validation
            - JSR303使用方法
              - 1. 实体类的字段上添加校验注解
                "实例——
                
                /**
                 * 品牌名
                 */
                @NotBlank(message = "品牌名必须提交且有效")
                private String name;
                /**
                 * 品牌logo地址
                 */
                @NotEmpty(message = "logo必须提交且有效")
                @URL(message = "logo必须是一个合法的URL地址")
                private String logo;
                /**
                 * 介绍
                 */
                private String descript;
                /**
                 * 显示状态[0-不显示；1-显示]
                 */
                @Range(min = 0, max = 1,message = "显示状态只能是0或1")
                private Integer showStatus;
                /**
                 * 检索首字母
                 */
                @NotNull(message = "检索首字母必须提交且有效")
                @Pattern(regexp = "/^[a-zA-Z]$/", message = "检索首字母必须是一个字母")
                private String firstLetter;
                /**
                 * 排序
                 */
                @NotNull(message = "排序必须提交")
                @Min(value = 0, message = "排序必须大于等于0")
                private Integer sort;"
              - 2. controller 方法参数注入时注解 @Valid 
                "public R save(@Valid @RequestBody BrandEntity brand)"
              - 优化：自定义错误提示 @NotBlank(message = "品牌名必须提交且有效")
              - 优化：出现错误时返回的JSON格式不对，进行统一异常处理，统一JSON格式
                "统一异常处理类
                -----------------------
                // 指定这是一个 rest controller 的增加
                @RestControllerAdvice(basePackages = "com.atguigu.gulimall.product.controller")
                public class GulimallExceptionAdvice {
                    private final static Logger LOGGER = LoggerFactory.getLogger(GulimallExceptionAdvice.class);
                
                    @ExceptionHandler(value = MethodArgumentNotValidException.class) //要接收的异常。方法参数不合法异常
                    public R handleValidException(MethodArgumentNotValidException e) {
                        LOGGER.info("数据校验出现问题");
                
                        BindingResult bindingResult = e.getBindingResult();
                
                        Map<String, String> errorMap = bindingResult.getFieldErrors().stream()
                                .collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));
                
                        return R.error(400,"数据校验出现问题").put("data",errorMap);
                    }
                    
                    @ExceptionHandler(value = Throwable.class)
                    public R handleUnknownException(Throwable throwable){
                        LOGGER.info("出现未知异常 = {}", throwable.toString());
                        
                        return R.error(400,"未知异常，请稍后再试");
                    }
                }"
              - 优化：JSON code代码需要规范化
                "例如：使用 5 位数字
                10 - 通用
                     - 001 参数格式校验
                11 - 商品
                12 - 订单
                13 - 购物车
                14 - 物流
                
                common 模块中定义一个枚举类
                ---------------------------
                public enum BizCodeEnum {
                    UNKNOWN_EXCEPTION(10000,"系统未知错误"),
                    VALID_EXCEPTION(10001,"参数格式校验错误");
                    
                    private int code;
                    private String msg;
                    
                    private BizCodeEnum(int code,String msg){
                        this.code=code;
                        this.msg=msg;
                    }
                
                    public int getCode() {
                        return code;
                    }
                
                    public String getMsg() {
                        return msg;
                    }
                }"
              - 优化：分组校验 groups（按场景校验）。"新增"和"修改"时校验方法不同
                "例如：新增时，主键id为空，修改时，主键id不为空
                
                第一步，在 common 模块下建立空接口
                * 1. com.atguigu.common.valid.AddGroup
                * 2. com.atguigu.common.valid.UpdateGroup
                
                第二步，在校验注解中，group属性指定相关的分组（接口）
                ----------------
                @NotNull(message = "新增品牌时不能指定id", groups = AddGroup.class) // 新增时不要提交
                @Null(message = "修改品牌时必须指定id", groups = UpdateGroup.class) // 修改时必须提交
                @TableId
                private Long brandId;
                ---------------------
                
                第三步，在controller类，相应的业务位置指定分组（接口）
                ---------------------
                public R save(@Validated(AddGroup.class) @RequestBody BrandEntity brand)
                
                public R update(@Validated(UpdateGroup.class) @RequestBody BrandEntity brand)
                "
                - 第一步，在 common 模块下建立空接口
                - 第二步，在校验注解中，group属性指定相关的分组（接口）
                - 第三步，在controller类，相应的业务位置指定分组（接口）
              - 优化：自定义校验规则
                "例如：显示状态只能是 0 或 1
                
                以下的接口、类、注解都在 common 模块中定义
                
                第一步：自定义校验注解@IntListValue
                ------------------------
                @Documented
                @Constraint(validatedBy = IntListValueConstraintValidator.class) // 关联的校验器
                @Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE })
                @Retention(RUNTIME)
                public @interface IntListValue {
                
                    String message() default "{com.atguigu.common.valid.IntListValue.message}";
                
                    Class<?>[] groups() default { };
                
                    Class<? extends Payload>[] payload() default { };
                
                /**
                 * 字段的取值
                 */
                    int[] values();
                    
                }
                --------------------------
                第二步：自定义校验器
                public class IntListValueConstraintValidator implements ConstraintValidator<IntListValue, Integer> {
                    private final static Logger LOGGER = LoggerFactory.getLogger(IntListValueConstraintValidator.class);
                
                    private Set<Integer> valueSet;
                
                    /**
                     * 初始化方法，可以拿到这个注解
                     *
                     * @param constraintAnnotation 这个注解
                     */
                    @Override
                    public void initialize(IntListValue constraintAnnotation) {
                        valueSet = new HashSet<>();
                
                        int[] values = constraintAnnotation.values();
                
                        for (int value : values) {
                            valueSet.add(value);
                        }
                    }
                
                    /**
                     * 校验方法
                     *
                     * @param value 要校验的值
                     * @return 值是否在 valueSet 中，值为空则不判断
                     */
                    @Override
                    public boolean isValid(Integer value, ConstraintValidatorContext context) {
                
                        return value == null || valueSet.contains(value);
                    }
                }
                --------------------------
                
                
                第三步：关联以上两者
                ---------------------------
                // 校验注解中
                @Constraint(validatedBy = IntListValueConstraintValidator.class)
                -----------------------
                
                
                最后使用它
                --------------------
                @IntListValue(values = {0, 1}, message = "显示状态必须是0或1", groups = {AddGroup.class, UpdateGroup.class})
                
                "
                - 第一步：自定义校验注解
                - 第二步：自定义校验器
                - 第三步：关联以上两者
      - SPU SKU 规格参数 销售属性
        - 基础知识
          - SPU standard product unit 标准化产品单元（共性商品，例iPhone XS）
            "商品信息聚合的最小单位，是一组可复用的、易检索的标准化信息集合，改集合描述了一个产品的特征
            
            例如 iPhone XS 和它的一堆介绍信息、配置信息就是一个 SPU
            
            但是要买它，还得知道具体的版本，如 颜色、存储大小（存储大小不同，售价也不同）
            
            不同的版本在不同的供货商中，库存量不同
            
            具体实例： iPhone XS https://item.jd.com/100000287133.html 
            主体.入网型号=A2140
            主体.品牌=Apple
            基本信息.机身长度=157.5
            主芯片.CPU品牌=以官方信息为主
            ....
            
            同一三级商品分类下的商品，SPU的 key 都是一样的，只是 value 不同
            
            这些 key - value 在商品分类页面下，需要提供检索，如 "手机"这个商品分类下
            提供：屏幕尺寸、CPU型号、操作系统...等检索
            实例：https://list.jd.com/list.html?cat=9987,653,655 "
          - SKU stock keeping unit 库存量单位（个性商品，例iPhone XS 银 64G）
            "库存进出的基本单元，如 iPhone XS 银色 64Gb
            
            一个 SPU 因为版本不同，有多种 SKU
            
            SKU 的特有属性，称为销售属性，如 颜色、存储大小"
          - SPU vs SKU
            "iPhone XS 是 SPU
            iPhone XS 白色 64G 是 SKU"
        - 数据库表学习
          - pms_attr 属性表（包括spu共性属性+sku个性属性）
            "商品 SPU / SKU 的属性表
            
            属性名，例如 CPU型号
            属性类型，是 SKU的销售属性，还是 SPU的基本属性
            所属分类，这个属性所属的商品三级分类id
            search_type，这个属性是否可以被检索
            
            
            CREATE TABLE `pms_attr` (
               `attr_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '属性id',
               `attr_name` char(30) DEFAULT NULL COMMENT '属性名',
               `search_type` tinyint(4) DEFAULT NULL COMMENT '是否需要检索[0-不需要，1-需要]',
               `icon` varchar(255) DEFAULT NULL COMMENT '属性图标',
               `value_select` char(255) DEFAULT NULL COMMENT '可选值列表[用逗号分隔]',
               `attr_type` tinyint(4) DEFAULT NULL COMMENT '属性类型[0-销售属性，1-基本属性，2-既是销售属性又是基本属性]',
               `enable` bigint(20) DEFAULT NULL COMMENT '启用状态[0 - 禁用，1 - 启用]',
               `catelog_id` bigint(20) DEFAULT NULL COMMENT '所属分类',
               `show_desc` tinyint(4) DEFAULT NULL COMMENT '快速展示【是否展示在介绍上；0-否 1-是】，在sku中仍然可以调整',
               PRIMARY KEY (`attr_id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品属性'"
          - pms_attr_group 属性分组表
            "多个属性和为一组
            比如说属性"手机大小"、"手机重量"都属于"手机规格"这一组
            
            一个分组下有多个属性，他们都属于同一个商品三级分类下 catelog_id
            如上面的例子中，"手机大小"、"手机重量"、"手机规格"都属于"手机"分类
            
            CREATE TABLE `pms_attr_group` (
               `attr_group_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '分组id',
               `attr_group_name` char(20) DEFAULT NULL COMMENT '组名',
               `sort` int(11) DEFAULT NULL COMMENT '排序',
               `descript` varchar(255) DEFAULT NULL COMMENT '描述',
               `icon` varchar(255) DEFAULT NULL COMMENT '组图标',
               `catelog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
               PRIMARY KEY (`attr_group_id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='属性分组'"
          - pms_attr_attrgroup_relation 属性和分组的关联表
            "通过这个表，可以知道属性和分组的关系
            
            CREATE TABLE `pms_attr_attrgroup_relation` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `attr_id` bigint(20) DEFAULT NULL COMMENT '属性id',
               `attr_group_id` bigint(20) DEFAULT NULL COMMENT '属性分组id',
               `attr_sort` int(11) DEFAULT NULL COMMENT '属性组内排序',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='属性&属性分组关联'"
          - pms_product_attr_value 商品属性值表（只记录spu共性属性-值）
            "每个商品的每个属性的值
            例如
            	商品 iPhone XS
            	属性 手机尺寸
            	值 157.5
            
            CREATE TABLE `pms_product_attr_value` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `spu_id` bigint(20) DEFAULT NULL COMMENT '商品id',
               `attr_id` bigint(20) DEFAULT NULL COMMENT '属性id',
               `attr_name` varchar(200) DEFAULT NULL COMMENT '属性名',
               `attr_value` varchar(200) DEFAULT NULL COMMENT '属性值',
               `attr_sort` int(11) DEFAULT NULL COMMENT '顺序',
               `quick_show` tinyint(4) DEFAULT NULL COMMENT '快速展示【是否展示在介绍上；0-否 1-是】',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu属性值'"
          - pms_spu_info 商品SPU信息表
            "商品名、所属分类、所属品牌
            
            CREATE TABLE `pms_spu_info` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '商品id',
               `spu_name` varchar(200) DEFAULT NULL COMMENT '商品名称',
               `spu_description` varchar(1000) DEFAULT NULL COMMENT '商品描述',
               `catalog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
               `brand_id` bigint(20) DEFAULT NULL COMMENT '品牌id',
               `weight` decimal(18,4) DEFAULT NULL,
               `publish_status` tinyint(4) DEFAULT NULL COMMENT '上架状态[0 - 下架，1 - 上架]',
               `create_time` datetime DEFAULT NULL,
               `update_time` datetime DEFAULT NULL,
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu信息'"
          - pms_sku_info 商品SKU信息表
            "sku名称、所属分类、所属品牌、对于的spu-id、标题、副标题
            
            举例： https://item.jd.com/57149104111.html 
            	标题 【12期免息】Apple/苹果 iPhone 11 全网通国行正品全新官网旗舰店手机 绿色 全网通64GB
            	副标题 享白条12期免息，低至15.28元/天。【苹果11pro优惠价7699起】
            
            CREATE TABLE `pms_sku_info` (
               `sku_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'skuId',
               `spu_id` bigint(20) DEFAULT NULL COMMENT 'spuId',
               `sku_name` varchar(255) DEFAULT NULL COMMENT 'sku名称',
               `sku_desc` varchar(2000) DEFAULT NULL COMMENT 'sku介绍描述',
               `catalog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
               `brand_id` bigint(20) DEFAULT NULL COMMENT '品牌id',
               `sku_default_img` varchar(255) DEFAULT NULL COMMENT '默认图片',
               `sku_title` varchar(255) DEFAULT NULL COMMENT '标题',
               `sku_subtitle` varchar(2000) DEFAULT NULL COMMENT '副标题',
               `price` decimal(18,4) DEFAULT NULL COMMENT '价格',
               `sale_count` bigint(20) DEFAULT NULL COMMENT '销量',
               PRIMARY KEY (`sku_id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='sku信息'"
          - pms_spu_images 和 pms_sku_images 图片表
            "一个商品，有多个图片展示，放在这两个表中
            
            注意：网站上，只会显示sku，即具体的可购买的一个商品。那么 spu图片即共性图片，sku图片即当前商品个性图片"
          - pms_sku_sale_attr_value 商品sku销售属性&值（记录sku个性属性-值）
            "具体的商品sku，他的销售属性值
            这是sku才有的属性，spu的属性是共性属性，sku属性是个性属性
            例如 iPhone XS
            	颜色-白色
            	颜色-蓝色
            	存储-64G
            	存储-128G
            
            CREATE TABLE `pms_sku_sale_attr_value` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
               `attr_id` bigint(20) DEFAULT NULL COMMENT 'attr_id',
               `attr_name` varchar(200) DEFAULT NULL COMMENT '销售属性名',
               `attr_value` varchar(200) DEFAULT NULL COMMENT '销售属性值',
               `attr_sort` int(11) DEFAULT NULL COMMENT '顺序',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='sku销售属性&值'"
        - 前端 属性分组 前端组件抽取 父子组件互交
          - 后台管理系统创建菜单
            "不一一手动创建了，使用老师的 sql 语句
            进入 renren-fast 后台管理相关联的数据库，名字是 gulimall_admin
            运行下面的 sql
            ------------
            /*
            SQLyog Ultimate v11.25 (64 bit)
            MySQL - 5.7.27 : Database - gulimall_admin
            *********************************************************************
            */
            
            
            /*!40101 SET NAMES utf8 */;
            
            /*!40101 SET SQL_MODE=''*/;
            
            /*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
            /*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
            /*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
            /*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
            CREATE DATABASE /*!32312 IF NOT EXISTS*/`gulimall_admin` /*!40100 DEFAULT CHARACTER SET utf8mb4 */;
            
            USE `gulimall_admin`;
            
            /*Table structure for table `sys_menu` */
            
            DROP TABLE IF EXISTS `sys_menu`;
            
            CREATE TABLE `sys_menu` (
              `menu_id` bigint(20) NOT NULL AUTO_INCREMENT,
              `parent_id` bigint(20) DEFAULT NULL COMMENT '父菜单ID，一级菜单为0',
              `name` varchar(50) DEFAULT NULL COMMENT '菜单名称',
              `url` varchar(200) DEFAULT NULL COMMENT '菜单URL',
              `perms` varchar(500) DEFAULT NULL COMMENT '授权(多个用逗号分隔，如：user:list,user:create)',
              `type` int(11) DEFAULT NULL COMMENT '类型   0：目录   1：菜单   2：按钮',
              `icon` varchar(50) DEFAULT NULL COMMENT '菜单图标',
              `order_num` int(11) DEFAULT NULL COMMENT '排序',
              PRIMARY KEY (`menu_id`)
            ) ENGINE=InnoDB AUTO_INCREMENT=76 DEFAULT CHARSET=utf8mb4 COMMENT='菜单管理';
            
            /*Data for the table `sys_menu` */
            
            insert  into `sys_menu`(`menu_id`,`parent_id`,`name`,`url`,`perms`,`type`,`icon`,`order_num`) values (1,0,'系统管理',NULL,NULL,0,'system',0),(2,1,'管理员列表','sys/user',NULL,1,'admin',1),(3,1,'角色管理','sys/role',NULL,1,'role',2),(4,1,'菜单管理','sys/menu',NULL,1,'menu',3),(5,1,'SQL监控','http://localhost:8080/renren-fast/druid/sql.html',NULL,1,'sql',4),(6,1,'定时任务','job/schedule',NULL,1,'job',5),(7,6,'查看',NULL,'sys:schedule:list,sys:schedule:info',2,NULL,0),(8,6,'新增',NULL,'sys:schedule:save',2,NULL,0),(9,6,'修改',NULL,'sys:schedule:update',2,NULL,0),(10,6,'删除',NULL,'sys:schedule:delete',2,NULL,0),(11,6,'暂停',NULL,'sys:schedule:pause',2,NULL,0),(12,6,'恢复',NULL,'sys:schedule:resume',2,NULL,0),(13,6,'立即执行',NULL,'sys:schedule:run',2,NULL,0),(14,6,'日志列表',NULL,'sys:schedule:log',2,NULL,0),(15,2,'查看',NULL,'sys:user:list,sys:user:info',2,NULL,0),(16,2,'新增',NULL,'sys:user:save,sys:role:select',2,NULL,0),(17,2,'修改',NULL,'sys:user:update,sys:role:select',2,NULL,0),(18,2,'删除',NULL,'sys:user:delete',2,NULL,0),(19,3,'查看',NULL,'sys:role:list,sys:role:info',2,NULL,0),(20,3,'新增',NULL,'sys:role:save,sys:menu:list',2,NULL,0),(21,3,'修改',NULL,'sys:role:update,sys:menu:list',2,NULL,0),(22,3,'删除',NULL,'sys:role:delete',2,NULL,0),(23,4,'查看',NULL,'sys:menu:list,sys:menu:info',2,NULL,0),(24,4,'新增',NULL,'sys:menu:save,sys:menu:select',2,NULL,0),(25,4,'修改',NULL,'sys:menu:update,sys:menu:select',2,NULL,0),(26,4,'删除',NULL,'sys:menu:delete',2,NULL,0),(27,1,'参数管理','sys/config','sys:config:list,sys:config:info,sys:config:save,sys:config:update,sys:config:delete',1,'config',6),(29,1,'系统日志','sys/log','sys:log:list',1,'log',7),(30,1,'文件上传','oss/oss','sys:oss:all',1,'oss',6),(31,0,'商品系统','','',0,'editor',0),(32,31,'分类维护','product/category','',1,'menu',0),(34,31,'品牌管理','product/brand','',1,'editor',0),(37,31,'平台属性','','',0,'system',0),(38,37,'属性分组','product/attrgroup','',1,'tubiao',0),(39,37,'规格参数','product/baseattr','',1,'log',0),(40,37,'销售属性','product/saleattr','',1,'zonghe',0),(41,31,'商品维护','product/spu','',0,'zonghe',0),(42,0,'优惠营销','','',0,'mudedi',0),(43,0,'库存系统','','',0,'shouye',0),(44,0,'订单系统','','',0,'config',0),(45,0,'用户系统','','',0,'admin',0),(46,0,'内容管理','','',0,'sousuo',0),(47,42,'优惠券管理','coupon/coupon','',1,'zhedie',0),(48,42,'发放记录','coupon/history','',1,'sql',0),(49,42,'专题活动','coupon/subject','',1,'tixing',0),(50,42,'秒杀活动','coupon/seckill','',1,'daohang',0),(51,42,'积分维护','coupon/bounds','',1,'geren',0),(52,42,'满减折扣','coupon/full','',1,'shoucang',0),(53,43,'仓库维护','ware/wareinfo','',1,'shouye',0),(54,43,'库存工作单','ware/task','',1,'log',0),(55,43,'商品库存','ware/sku','',1,'jiesuo',0),(56,44,'订单查询','order/order','',1,'zhedie',0),(57,44,'退货单处理','order/return','',1,'shanchu',0),(58,44,'等级规则','order/settings','',1,'system',0),(59,44,'支付流水查询','order/payment','',1,'job',0),(60,44,'退款流水查询','order/refund','',1,'mudedi',0),(61,45,'会员列表','member/member','',1,'geren',0),(62,45,'会员等级','member/level','',1,'tubiao',0),(63,45,'积分变化','member/growth','',1,'bianji',0),(64,45,'统计信息','member/statistics','',1,'sql',0),(65,46,'首页推荐','content/index','',1,'shouye',0),(66,46,'分类热门','content/category','',1,'zhedie',0),(67,46,'评论管理','content/comments','',1,'pinglun',0),(68,41,'spu管理','product/spu','',1,'config',0),(69,41,'发布商品','product/spuadd','',1,'bianji',0),(70,43,'采购单维护','','',0,'tubiao',0),(71,70,'采购需求','ware/purchaseitem','',1,'editor',0),(72,70,'采购单','ware/purchase','',1,'menu',0),(73,41,'商品管理','product/manager','',1,'zonghe',0),(74,42,'会员价格','coupon/memberprice','',1,'admin',0),(75,42,'每日秒杀','coupon/seckillsession','',1,'job',0);
            
            /*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
            /*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
            /*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
            /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
            "
          - 编写 商品系统-平台属性-属性分组 界面
            - 要求：进入一个商品三级分类（如手机-手机通讯-手机），可以查出这个分类下已有的分组，还可以增删
              "1. 因为在 [商品系统-平台属性-属性分组 界面]，也需要展示[商品三级分类 树]界面，所以将[商品三级分类]抽取出来"
            - [商品三级分类]组件公共化
              - 1. 前端项目，在 modules 下新建 common 文件夹，中新建 category.vue
                "文件地址：grainmall_admin_vue\src\views\modules\common\category.vue"
              - 2. 前端项目，创建[属性分组]vue文件 attrgroup.vue
                "对应的网页：http://localhost:8001/#/product-attrgroup 
                因此在 product文件夹下建立 attrgroup.vue
                文件地址：grainmall_admin_vue\src\views\modules\product\attrgroup.vue
                用 vue tab生成 vue 代码模板，写一个helloworld 看看网页是否显示。√
                "
              - 3. 要求 [属性分组]界面中，左边显示[商品三级分类]，右边显示[属性分组增删查改表格]，因此去 element-ui 找到对于的布局
                "https://element.eleme.cn/#/zh-CN/component/layout 分栏间隔 布局
                ---------
                <el-row :gutter="20">
                  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
                  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
                  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
                  <el-col :span="6"><div class="grid-content bg-purple"></div></el-col>
                </el-row>
                -----------
                复制到 attrgroup.vue，简单调整
                -------------
                <template>
                  <el-row :gutter="20">
                    <el-col :span="6">
                        商品三级分类树
                    </el-col>
                    <el-col :span="18">
                      属性分组表格
                    </el-col>
                  </el-row>
                </template>
                "
              - 4. 左侧[商品三级分类]编写子组件 common\category.vue
                "直接复制以前写的[商品三级分组]里的代码，只复制数据获取、展示的部分
                ------------
                <template>
                  <el-tree :data="menus" :props="defaultProps" 关键id_为了vue区分 node-key="catId" ref="menuTree"></el-tree>
                </template>
                
                <script>
                export default {
                  //import 引入的组件需要注入到对象中才能使用
                  components: {},
                  props: {},
                  data() {
                    //这里存数据
                    return {
                      // 数据
                      menus: [],
                      // 要展开的key key 就是 catId
                      expandedKey: [],
                      // append 数据的对话框
                      dialogFormVisible: false,
                      defaultProps: {
                        // menus 数组是一个对象数组，里面哪个属性指向子节点
                        children: "children",
                        // menus 数组是一个对象数组，要显示哪个属性的值到页面
                        label: "name"
                      }
                    };
                  },
                  //计算属性
                  computed: {},
                  //监控data中数据变化
                  watch: {},
                  //方法
                  methods: {
                    // 获得所有菜单
                    getMenus() {
                      // 发送请求
                      this.$http({
                        url: this.$http.adornUrl("/product/category/list/tree"),
                        method: "get",
                        params: this.$http.adornParams({})
                      }).then(({ data }) => {
                        // 这里的大括号 {} 是对象解构
                        // console.log(data.data);
                        // 绑定
                        this.menus = data.data;
                      });
                    }
                  },
                  //声明周期 - 创建完成（可以访问当前this实例）
                  created() {
                    // 构建vue时，就发送请求
                    this.getMenus();
                  },
                  //生命周期 - 挂载完成（可以访问DOM元素）
                  mounted() {},
                  beforeCreate() {}, //生命周期 - 创建之前
                  beforeMount() {}, //生命周期 - 挂载之前
                  beforeUpdate() {}, //声明周期 - 更新之前
                  updated() {}, //生命周期 - 更新之后
                  beforeDestroy() {}, //生命周期 - 销毁之前
                  destroyed() {}, //生命周期 - 销毁之后
                  activated() {} //缓存keep-alive
                };
                </script>
                
                <style scoped>
                </style>"
              - 5. 在[属性分组]中使用子组件
                "1. 导入
                	import Category from '../common/category'; // 在 js 代码第一行导入
                2. 注册
                	 components: {Category} // vue 中
                3. 使用
                -------
                <template>
                  <el-row :gutter="20">
                    <el-col :span="6">
                        <Category/>
                    </el-col>
                    <el-col :span="18">
                      属性分组表格
                    </el-col>
                  </el-row>
                </template>
                ------
                
                完美展示"
              - 6. [属性分组]右边的增删查改表格
                "从renren-generate自动生成的代码中找到对应的文件 attrgroup.vue 
                其中 http 代码整个 div 都复制到对于位置
                vue代码也整个复制
                文件 attrgroup-add-or-update.vue 也复制到项目中
                ---------------
                <template>
                  <el-row :gutter="20">
                    <el-col :span="6">
                      <Category />
                    </el-col>
                    <el-col :span="18">
                      <div class="mod-config">
                        <el-form :inline="true" :model="dataForm" @keyup.enter.native="getDataList()">
                          <el-form-item>
                            <el-input v-model="dataForm.key" placeholder="参数名" clearable></el-input>
                          </el-form-item>
                          <el-form-item>
                            <el-button @click="getDataList()">查询</el-button>
                            <el-button
                              v-if="isAuth('product:attrgroup:save')"
                              type="primary"
                              @click="addOrUpdateHandle()"
                            >新增</el-button>
                            <el-button
                              v-if="isAuth('product:attrgroup:delete')"
                              type="danger"
                              @click="deleteHandle()"
                              :disabled="dataListSelections.length <= 0"
                            >批量删除</el-button>
                          </el-form-item>
                        </el-form>
                        <el-table
                          :data="dataList"
                          border
                          v-loading="dataListLoading"
                          @selection-change="selectionChangeHandle"
                          style="width: 100%;"
                        >
                          <el-table-column type="selection" header-align="center" align="center" width="50"></el-table-column>
                          <el-table-column prop="attrGroupId" header-align="center" align="center" label="分组id"></el-table-column>
                          <el-table-column prop="attrGroupName" header-align="center" align="center" label="组名"></el-table-column>
                          <el-table-column prop="sort" header-align="center" align="center" label="排序"></el-table-column>
                          <el-table-column prop="descript" header-align="center" align="center" label="描述"></el-table-column>
                          <el-table-column prop="icon" header-align="center" align="center" label="组图标"></el-table-column>
                          <el-table-column prop="catelogId" header-align="center" align="center" label="所属分类id"></el-table-column>
                          <el-table-column
                            fixed="right"
                            header-align="center"
                            align="center"
                            width="150"
                            label="操作"
                          >
                            <template slot-scope="scope">
                              <el-button
                                type="text"
                                size="small"
                                @click="addOrUpdateHandle(scope.row.attrGroupId)"
                              >修改</el-button>
                              <el-button type="text" size="small" @click="deleteHandle(scope.row.attrGroupId)">删除</el-button>
                            </template>
                          </el-table-column>
                        </el-table>
                        <el-pagination
                          @size-change="sizeChangeHandle"
                          @current-change="currentChangeHandle"
                          :current-page="pageIndex"
                          :page-sizes="[10, 20, 50, 100]"
                          :page-size="pageSize"
                          :total="totalPage"
                          layout="total, sizes, prev, pager, next, jumper"
                        ></el-pagination>
                        <!-- 弹窗, 新增 / 修改 -->
                        <add-or-update v-if="addOrUpdateVisible" ref="addOrUpdate" @refreshDataList="getDataList"></add-or-update>
                      </div>
                    </el-col>
                  </el-row>
                </template>
                
                <script>
                import Category from "../common/category";
                import AddOrUpdate from './attrgroup-add-or-update'
                
                export default {
                    data () {
                      return {
                        dataForm: {
                          key: ''
                        },
                        dataList: [],
                        pageIndex: 1,
                        pageSize: 10,
                        totalPage: 0,
                        dataListLoading: false,
                        dataListSelections: [],
                        addOrUpdateVisible: false
                      }
                    },
                    components: {
                      AddOrUpdate,Category
                    },
                    activated () {
                      this.getDataList()
                    },
                    methods: {
                      // 获取数据列表
                      getDataList () {
                        this.dataListLoading = true
                        this.$http({
                          url: this.$http.adornUrl('/product/attrgroup/list'),
                          method: 'get',
                          params: this.$http.adornParams({
                            'page': this.pageIndex,
                            'limit': this.pageSize,
                            'key': this.dataForm.key
                          })
                        }).then(({data}) => {
                          if (data && data.code === 0) {
                            this.dataList = data.page.list
                            this.totalPage = data.page.totalCount
                          } else {
                            this.dataList = []
                            this.totalPage = 0
                          }
                          this.dataListLoading = false
                        })
                      },
                      // 每页数
                      sizeChangeHandle (val) {
                        this.pageSize = val
                        this.pageIndex = 1
                        this.getDataList()
                      },
                      // 当前页
                      currentChangeHandle (val) {
                        this.pageIndex = val
                        this.getDataList()
                      },
                      // 多选
                      selectionChangeHandle (val) {
                        this.dataListSelections = val
                      },
                      // 新增 / 修改
                      addOrUpdateHandle (id) {
                        this.addOrUpdateVisible = true
                        this.$nextTick(() => {
                          this.$refs.addOrUpdate.init(id)
                        })
                      },
                      // 删除
                      deleteHandle (id) {
                        var ids = id ? [id] : this.dataListSelections.map(item => {
                          return item.attrGroupId
                        })
                        this.$confirm(`确定对[id=${ids.join(',')}]进行[${id ? '删除' : '批量删除'}]操作?`, '提示', {
                          confirmButtonText: '确定',
                          cancelButtonText: '取消',
                          type: 'warning'
                        }).then(() => {
                          this.$http({
                            url: this.$http.adornUrl('/product/attrgroup/delete'),
                            method: 'post',
                            data: this.$http.adornData(ids, false)
                          }).then(({data}) => {
                            if (data && data.code === 0) {
                              this.$message({
                                message: '操作成功',
                                type: 'success',
                                duration: 1500,
                                onClose: () => {
                                  this.getDataList()
                                }
                              })
                            } else {
                              this.$message.error(data.msg)
                            }
                          })
                        })
                      }
                    }
                  }
                </script>
                
                <style scoped>
                </style>"
              - 7. 以上完成后，页面可以显示左[商品三级分类]，右[属性分组表]。要求：点击一个三级分类，右边显示对应分类下的属性分组信息
                "因此需要子组件给父组件传递数据
                事件机制：当子组件中一个元素被点击后，向父组件发送一个事件"
                - 7.1. [商品三级分类]每个node节点需要绑定点击事件并发送$emit
                  "在 element-ui 中对应 node-click
                  
                  1. 绑定事件
                  <el-tree :data="menus" :props="defaultProps" node-key="catId" ref="menuTree" @node-click="nodeclick"></el-tree>
                  
                  
                  2. 事件回调函数，利用this.$emit发送事件
                  this.$emit(事件名字, Obj...);
                  ---------------
                  nodeclick(data, node, component) {
                        console.log(data, node, component);
                  
                        // 向父组件发射事件
                        this.$emit("tree-node-click", data, node, component);
                      }
                  
                  "
                - 7.2. [属性分组]中接受事件
                  "在组件 http 中利用 @事件名="回调方法" 的方式接受事件
                  
                  <Category @tree-node-click="treenodeclick"/>
                  
                  method 中定义回调函数
                  ------------
                      methods: {
                        // 子组件 Category 发来的信息 
                        treenodeclick(data, node, component){
                          console.log(data, node, component);
                        },
                  ..."
                - 7.3 业务：[商品三级分类]发送事件中提取三级分类名，查找对应的[属性分组]并展示
                  "具体要求
                  api GET /product/attrgroup/list/{catelogId}?分页条件
                  
                  catelogId==0 时，查询所有，否则查询对应的[属性分组]
                  
                  分页条件json形式如下，按照?page=1...格式发送
                  {
                     page: 1,//当前页码
                     limit: 10,//每页记录数
                     sidx: 'id',//排序字段
                     order: 'asc/desc',//排序方式
                     key: '华为'//检索关键字——全字段模糊查询
                  }"
                  - 后端 编写对应的方法
                    - conttroller
                      "@RequestMapping("/list/{catelogId}")
                      public R list(@RequestParam Map<String, Object> params,
                                    @PathVariable("catelogId") Long catelogId) {
                          
                          PageUtils page =  attrGroupService.queryPage(params,catelogId);
                      
                          return R.ok().put("page", page);
                      }"
                    - service 代码全部
                      "public PageUtils queryPage(Map<String, Object> params, Long catelogId) {
                          if (catelogId == 0) {
                              return queryPage(params);
                          } else {
                              // key 是全字段模糊查询
                              String key = (String) params.get("key");
                      
                              // pms_attr_group 表信息
                              //CREATE TABLE `pms_attr_group` (
                              //   `attr_group_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '分组id',
                              //   `attr_group_name` char(20) DEFAULT NULL COMMENT '组名',
                              //   `sort` int(11) DEFAULT NULL COMMENT '排序',
                              //   `descript` varchar(255) DEFAULT NULL COMMENT '描述',
                              //   `icon` varchar(255) DEFAULT NULL COMMENT '组图标',
                              //   `catelog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
                              //   PRIMARY KEY (`attr_group_id`)
                              // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='属性分组'
                      
                              // select * from pms_attr_group where catelog_id = ${catelogId} and
                              // (其他字段 like ${key})
                      
                              // 构造查询器
                              QueryWrapper<AttrGroupEntity> wrapper = new QueryWrapper<AttrGroupEntity>()
                                      // 第一个条件 catelog_id = ${catelogId}
                                      .eq("catelog_id", catelogId);
                      
                              if (!StringUtils.isEmpty(key)) {
                                  wrapper = wrapper.and(obj -> {
                                      obj.eq("attr_group_id", key)
                                              .or()
                                              .like("attr_group_name", key)
                                              .or()
                                              .like("descript", key);
                                  });
                              }
                      
                              // 查询
                              IPage<AttrGroupEntity> page = this.page(
                                      new Query<AttrGroupEntity>().getPage(params),
                                      wrapper
                              );
                      
                              return new PageUtils(page);
                          }
                      }"
                    - 学习只利用 mybatisplus 生成sql语句
                      "语句内容 SELECT * WHERE catelog_id = ? AND  (attr_group_id = ? OR attr_group_name LIKE ? OR descript LIKE ?)
                      
                      生成方法，一步步构造
                      
                      // 构造查询器
                      QueryWrapper<AttrGroupEntity> wrapper = new QueryWrapper<AttrGroupEntity>()
                              // 第一个条件 catelog_id = ${catelogId}
                              .eq("catelog_id", catelogId);
                      
                      if (!StringUtils.isEmpty(key)) {
                          wrapper = wrapper.and(obj -> {
                              obj.eq("attr_group_id", key)
                                      .or()
                                      .like("attr_group_name", key)
                                      .or()
                                      .like("descript", key);
                          });
                      }"
                  - 前端 发送对应的请求
                    "1. 新增一个 data 字段
                    catId:0, // 所属三级分类id，默认0代表不指定三级分类
                    
                    2. 发送相应请求
                    getDataList () 中 url: this.$http.adornUrl(`/product/attrgroup/list/${this.catId}`)
                    
                    3. 监听子组件[三级分类]点击，是3级时重新发起查询
                    // 子组件 Category 发来的信息 
                          treenodeclick(data, node, component){
                            console.log(data);
                            
                           // 判断是不是第三级分类
                           if(data.catLevel==3){
                             // 赋值
                             this.catId=data.catId;
                             // 重新查询
                             this.getDataList();
                           }
                          }
                    
                    4. 完成。数据库里查几条数据测试一下
                    "
              - 8. 业务：[属性分组]的增删改
                - 难点：新增时，需要用户确定[属性分组]所属的[三级分类]
                  "不能让用户手动填写[三级分类]
                  使用下拉点击选择，因为[三级分类]是树形结构，可以使用 Cascader 级联选择器
                  https://element.eleme.cn/#/zh-CN/component/cascader
                  
                  value 是选择的数据
                  options 是树形结构的待选项[lable,value,children]
                  -----------
                  <el-cascader
                      v-model="value"
                      :options="options"
                      :props="{ expandTrigger: 'hover' }"
                      @change="handleChange"></el-cascader>
                  ---------
                  "
                - 解决小bug：[三级分类]是按照树返回给前端的，但是第三级本是叶子，可是还有children字段，虽然值是空[]
                  "现在需要让，children为空时，不要json化，直接在后端的children字段上加上注解
                  @JsonInclude(JsonInclude.Include.NON_EMPTY)
                  
                  --------------
                  /**
                   * 其下的子分类
                   */
                  @TableField(exist = false)
                  @JsonInclude(JsonInclude.Include.NON_EMPTY)
                  private List<CategoryEntity> children;
                  -------------------"
                - 知识点：this.$refs.addOrUpdate.init(id)
                  "this 当前vue 组件
                  $refs 所有子组件
                  这行代码是，当前组件下的addOrUpdate子组件的init方法"
                - 重点代码
                  - html
                    "<el-form-item label="所属分类id" prop="catelogId">
                            <!-- <el-input v-model="dataForm.catelogId" placeholder="所属分类id"></el-input> -->
                            <!-- @change="handleChange" -->
                            <el-cascader
                              v-model="dataForm.catelogIds"
                              :options="categorys"
                              :props="{ expandTrigger:'hover',label:'name',value:'catId'}"
                              :show-all-levels="false"
                              @change="handleChange"
                            ></el-cascader>
                          </el-form-item>"
                  - js
                    "created() {
                        this.getCategorys();
                      },
                      methods: {
                        handleChange(){
                          console.log(this.dataForm.catelogIds);
                          this.dataForm.catelogId = this.dataForm.catelogIds[2];
                          
                        },
                        getCategorys() {
                          // 发送请求
                          this.$http({
                            url: this.$http.adornUrl("/product/category/list/tree"),
                            method: "get",
                            params: this.$http.adornParams({})
                          }).then(({ data }) => {
                            // 这里的大括号 {} 是对象解构
                            // console.log(data.data);
                            // 绑定
                            this.categorys = data.data;
                          });
                        }
                    }"
      - 后端 品牌管理 品牌分类关联与级联更新
        - 前端代码不写了 把老师提供的前端代码modules全部复制到项目中
        - [小问题] 品牌管理中模糊查询无效
          - 修改后端代码，支持 key 模糊查询功能
            - 对应controller//不用改
              "public R list(@RequestParam Map<String, Object> params)"
            - 对应service // 修改
              "public PageUtils queryPage(Map<String, Object> params) {
                  LOGGER.info("params = {}", params);
                  // 以 key 的模糊查询
                  String key = (String) params.get("key");
                  QueryWrapper<BrandEntity> brandEntityQueryWrapper = new QueryWrapper<>();
                  if (!StringUtils.isEmpty(key)) {
                      LOGGER.info("key = {}", key);
              
                      brandEntityQueryWrapper.eq("brand_id",key)
                              .or().like("name",key);
                  }
              
                  IPage<BrandEntity> page = this.page(
                          new Query<BrandEntity>().getPage(params),
                          brandEntityQueryWrapper
                  );
                  return new PageUtils(page);
              }"
        - [小问题] 品牌管理中分页功能无效
          - mybatis-plus使用分页插件，注入配置bean
            "@Configuration
            @EnableTransactionManagement // 开启事务
            @MapperScan("com.atguigu.gulimall.product.dao")
            public class MyBatisConfig {
                private final static Logger LOGGER = LoggerFactory.getLogger(MyBatisConfig.class);
            
            
                // 引入分页插件
                @Bean
                public PaginationInterceptor paginationInterceptorn() {
                    PaginationInterceptor paginationInterceptor = new PaginationInterceptor();
                    
                    // 设置请求的页 大于最大页的操作，true返回首页，false 继续操作
                    paginationInterceptor.setOverflow(true);
                    
                    // 设置页内最大项数
                    paginationInterceptor.setLimit(1000);
                    
                    return paginationInterceptor;
                }
            }"
        - [问题] 品牌的"关联分类"功能
          - 定义
            "所谓品牌的管理分类，即品牌（如华为），关联到三级分类（如手机）
            
            建立 华为-手机 这样的关联关系
            小米 - 手机
            小米 - 家用电器"
          - 泛化：品牌-三级分类 多对多关系
          - 表：pms_category_brand_relation
            "id 品牌id 分类id
            
            CREATE TABLE `pms_category_brand_relation` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT,
               `brand_id` bigint(20) DEFAULT NULL COMMENT '品牌id',
               `catelog_id` bigint(20) DEFAULT NULL COMMENT '分类id',
               `brand_name` varchar(255) DEFAULT NULL,
               `catelog_name` varchar(255) DEFAULT NULL,
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='品牌分类关联'
            "
          - API：GET /product/categorybrandrelation/catelog/list?brandId=1
            "查询 品牌id = 1 下的所有分类"
          - API：POST /product/categorybrandrelation/save 
            "json
            {
                "brandId": 1,
                "catelogId": 225
            }"
          - 简单实现即可
        - [大问题!!] 表的设计有冗余 需要靠代码实现一致性
          - 例子 品牌-分类表
            "品牌分类表（华为-手机、小米-电视）中，保存有如下字段
            
            id
            品牌id
            分类id
            品牌名
            分类名
            
            因此在修改删除 品牌 或 分类的时候，需要同时修改这个表"
      - 后端 规格参数新增与VO
        - object 划分
          - PO persistent object 持久对象 // 直接对应数据库记录
            "自动生成的 entity 对象"
          - DO domain object 领域对象 // 从现实世界中抽取出来的有形/无形的实体
            "业务概念对象"
          - TO transfer object 数据传输对象 // 不同应用间传输的对象
          - DTO data transfer object 数据传输对象 // 和 TO 相同
          - VO value object 值对象 or view object 视图对象 // 和前端打交道的对象
            "可以不完全对应数据库的表，一般就是 controller 层返回的对象，前端直接展示
            比如给前端的 User 对象，肯定没有 password 字段
            一个对象，在不同场景，对应的 VO 也不同，一切看前端要求"
          - BO business object 业务对象
            "如“简历”是一个 BO 业务对象
            它由 教育经历、工作经历、社会关系 ...组成，而这些对应数据的对象 PO
            
            多个 PO 有逻辑地组成为 BO"
          - POJO plain ordinary Java object 简单无规则的 Java 对象
          - DAO data access object 数据访问对象 负责访问数据库 //mapper
        - 痛点：数据库对象往往和前端需要的对象不同
          "因此把这连个对象分开，建立不同的类
          数据库对象 PO （持久对象）
          前端交互对象 VO （视图对象）"
        - [切记] 数据库对象 PO 应干净
          "不要用 @TableField(exist = false) ，不要加校验，因为校验是和前端打交道的事情，放入VO"
      - 后端 规格属性
        - 按照API实现 http://localhost:8001/#/product-baseattr 功能
      - 后端 销售属性
        - [数据库] 规格属性和销售属性在同一个表
          "attr_type 区分"
        - [业务] 只有规格属性有属性分组
          "pms_attr_group 中的 attr 只是 pms_attr 的一部分
          对应 pms_attr.attr_type = 1 的"
        - 按照API实现即可
      - 后端 规格属性-属性分组 curd 代码
      - 后端 商品维护-发布商品
        - 四步走
          "基本信息 - 规格参数 - 销售属性 - SKU信息  - 保存"
        - 一些数据展示 api
          - 调试会员等级接口 OK
          - 三级分类（如手机）-品牌（如华为）关系接口
            - [知识点] controller 只有两个功能：1.校验 2.把 entity 转为 vo
          - 获取 catelogId 对应的商品三级分类下所有的属性分组attrGroup，同时每个属性分组内包含所有属性Attr
            "/{catelogId}/withattr"
        - 商品保存 api
          - 发布商品 最终上传一个大JSON 自动转为JavaVO
            "https://www.bejson.com/json2javapojo/new/
            
            把价格的double 改成 big decimal
            把id 的int 改成 long
            
            -----------
            {
                "spuName": "华为 HUAWEI Mate 30 Pro 5G",
                "spuDescription": "华为 HUAWEI Mate 30 Pro 5G",
                "catalogId": 225,
                "brandId": 1,
                "weight": 0.198,
                "publishStatus": 0,
                "decript": [
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/be988502-b71c-4bf1-8083-501183128f1e_73366cc235d68202.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/92109454-3290-4da6-8b30-73a3bf1a0a80_528211b97272d88a.jpg"
                ],
                "images": [
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/0358c72d-eec7-4f70-8628-ebaf0caccdb2_0d40c24b264aa511.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/443eca20-e61e-4981-88c4-7d0eeb401d05_1f15cdbcf9e1273c.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/3d38ca1a-d7ff-4948-888f-d0596c9ef198_2b1837c6c50add30.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/ba72723d-9761-4d78-82d2-4dce2c292eb1_3c24f9cd69534030.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/19e40288-bbe6-4323-819c-d7fe4f3cd66a_23d9fbb256ea5d4a.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/000d0ef6-5e82-434b-8e2a-2c0fd0a1dd0c_28f296629cca865e.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/5ab893c4-e4ac-4411-814e-37a7b26600fa_73ab4d2e818d2211.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/7155ee8f-5c4e-4a08-8442-6dcb3968bd66_335b2c690e43a8f8.jpg",
                    "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/52a12043-898b-4ac4-874d-1a8432d0c2ea_8bf441260bffa42f.jpg"
                ],
                "bounds": {
                    "buyBounds": 500,
                    "growBounds": 500
                },
                "baseAttrs": [
                    {
                        "attrId": 5,
                        "attrValues": "黑色",
                        "showDesc": 0
                    },
                    {
                        "attrId": 6,
                        "attrValues": "12G",
                        "showDesc": 0
                    },
                    {
                        "attrId": 7,
                        "attrValues": "华为",
                        "showDesc": 1
                    },
                    {
                        "attrId": 10,
                        "attrValues": "其他",
                        "showDesc": 1
                    },
                    {
                        "attrId": 9,
                        "attrValues": "4",
                        "showDesc": 1
                    },
                    {
                        "attrId": 8,
                        "attrValues": "麒麟990",
                        "showDesc": 1
                    }
                ],
                "skus": [
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "星河银"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "8G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 麒麟990 OLED环幕屏双4000万徕卡电影四摄8GB+256GB亮黑色5G全网通游戏手机  星河银 8G 5G全网通游戏手机",
                        "price": "5799",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 麒麟990 OLED环幕屏双4000万徕卡电影四摄8GB+256GB亮黑色5G全网通游戏手机  星河银 8G 5G全网通游戏手机",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/0358c72d-eec7-4f70-8628-ebaf0caccdb2_0d40c24b264aa511.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/5ab893c4-e4ac-4411-814e-37a7b26600fa_73ab4d2e818d2211.jpg",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "星河银",
                            "8G"
                        ],
                        "fullCount": 3,
                        "discount": 0.98,
                        "countStatus": 1,
                        "fullPrice": 10000,
                        "reducePrice": 50,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 6259
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 6219
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "星河银"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "12G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 麒麟990 OLED环幕屏双4000万徕卡电影四摄8GB+256GB亮黑色5G全网通游戏手机  星河银 12G 5G全网通游戏手机",
                        "price": "6299",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 麒麟990 OLED环幕屏双4000万徕卡电影四摄8GB+256GB亮黑色5G全网通游戏手机  星河银 12G 5G全网通游戏手机",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/0358c72d-eec7-4f70-8628-ebaf0caccdb2_0d40c24b264aa511.jpg",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/52a12043-898b-4ac4-874d-1a8432d0c2ea_8bf441260bffa42f.jpg",
                                "defaultImg": 1
                            }
                        ],
                        "descar": [
                            "星河银",
                            "12G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "亮黑色"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "8G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 亮黑色 8G",
                        "price": "5799",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 亮黑色 8G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/000d0ef6-5e82-434b-8e2a-2c0fd0a1dd0c_28f296629cca865e.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/52a12043-898b-4ac4-874d-1a8432d0c2ea_8bf441260bffa42f.jpg",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "亮黑色",
                            "8G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "亮黑色"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "12G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 亮黑色 12G",
                        "price": "6299",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 亮黑色 12G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/000d0ef6-5e82-434b-8e2a-2c0fd0a1dd0c_28f296629cca865e.jpg",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/52a12043-898b-4ac4-874d-1a8432d0c2ea_8bf441260bffa42f.jpg",
                                "defaultImg": 1
                            }
                        ],
                        "descar": [
                            "亮黑色",
                            "12G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "翡冷翠"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "8G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 翡冷翠 8G",
                        "price": "5799",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 翡冷翠 8G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/3d38ca1a-d7ff-4948-888f-d0596c9ef198_2b1837c6c50add30.jpg",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/19e40288-bbe6-4323-819c-d7fe4f3cd66a_23d9fbb256ea5d4a.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "翡冷翠",
                            "8G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "翡冷翠"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "12G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 翡冷翠 12G",
                        "price": "6299",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 翡冷翠 12G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/19e40288-bbe6-4323-819c-d7fe4f3cd66a_23d9fbb256ea5d4a.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "翡冷翠",
                            "12G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "罗兰紫"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "8G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 罗兰紫 8G",
                        "price": "5799",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 罗兰紫 8G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/5ab893c4-e4ac-4411-814e-37a7b26600fa_73ab4d2e818d2211.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "罗兰紫",
                            "8G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    },
                    {
                        "attr": [
                            {
                                "attrId": 5,
                                "attrName": "颜色",
                                "attrValue": "罗兰紫"
                            },
                            {
                                "attrId": 6,
                                "attrName": "内存",
                                "attrValue": "12G"
                            }
                        ],
                        "skuName": "华为 HUAWEI Mate 30 Pro 5G 罗兰紫 12G",
                        "price": "6299",
                        "skuTitle": "华为 HUAWEI Mate 30 Pro 5G 罗兰紫 12G",
                        "skuSubtitle": "【领券优惠200元，再享24期免息！低至8.5元/天】买5G手机，送10万京豆或2400G流量；具体规则》",
                        "images": [
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/ba72723d-9761-4d78-82d2-4dce2c292eb1_3c24f9cd69534030.jpg",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "https://gulimall-madokast.oss-cn-shenzhen.aliyuncs.com/2020-06-02/5ab893c4-e4ac-4411-814e-37a7b26600fa_73ab4d2e818d2211.jpg",
                                "defaultImg": 1
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            },
                            {
                                "imgUrl": "",
                                "defaultImg": 0
                            }
                        ],
                        "descar": [
                            "罗兰紫",
                            "12G"
                        ],
                        "fullCount": 0,
                        "discount": 0,
                        "countStatus": 0,
                        "fullPrice": 0,
                        "reducePrice": 0,
                        "priceStatus": 0,
                        "memberPrice": [
                            {
                                "id": 2,
                                "name": "铜牌会员",
                                "price": 0
                            },
                            {
                                "id": 3,
                                "name": "银牌会员",
                                "price": 0
                            }
                        ]
                    }
                ]
            }"
          - 流程分析
            "// 1. 保存基本信息
            //CREATE TABLE `pms_spu_info` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '商品id',
            //   `spu_name` varchar(200) DEFAULT NULL COMMENT '商品名称',
            //   `spu_description` varchar(1000) DEFAULT NULL COMMENT '商品描述',
            //   `catalog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
            //   `brand_id` bigint(20) DEFAULT NULL COMMENT '品牌id',
            //   `weight` decimal(18,4) DEFAULT NULL,
            //   `publish_status` tinyint(4) DEFAULT NULL COMMENT '上架状态[0 - 下架，1 - 上架]',
            //   `create_time` datetime DEFAULT NULL,
            //   `update_time` datetime DEFAULT NULL,
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu信息'
            
            
            
            // 2. spu 描述图片 pms_spu_info_desc
            //CREATE TABLE `pms_spu_info_desc` (
            //   `spu_id` bigint(20) NOT NULL COMMENT '商品id',
            //   `decript` longtext COMMENT '商品介绍',
            //   PRIMARY KEY (`spu_id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu信息介绍'
            
            
            
            // 3. spu 图片集 pms_spu_images
            //CREATE TABLE `pms_spu_images` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `spu_id` bigint(20) DEFAULT NULL COMMENT 'spu_id',
            //   `img_name` varchar(200) DEFAULT NULL COMMENT '图片名',
            //   `img_url` varchar(255) DEFAULT NULL COMMENT '图片地址',
            //   `img_sort` int(11) DEFAULT NULL COMMENT '顺序',
            //   `default_img` tinyint(4) DEFAULT NULL COMMENT '是否默认图',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu图片'
            
            
            // 4. spu 基本属性 （规格属性） pms_product_attr_value
            //CREATE TABLE `pms_product_attr_value` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `spu_id` bigint(20) DEFAULT NULL COMMENT '商品id',
            //   `attr_id` bigint(20) DEFAULT NULL COMMENT '属性id',
            //   `attr_name` varchar(200) DEFAULT NULL COMMENT '属性名',
            //   `attr_value` varchar(200) DEFAULT NULL COMMENT '属性值',
            //   `attr_sort` int(11) DEFAULT NULL COMMENT '顺序',
            //   `quick_show` tinyint(4) DEFAULT NULL COMMENT '快速展示【是否展示在介绍上；0-否 1-是】',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='spu属性值'
            
            // 4.1 spu 积分信息 跨库 sms_spu_bounds
            //CREATE TABLE `sms_spu_bounds` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `spu_id` bigint(20) DEFAULT NULL,
            //   `grow_bounds` decimal(18,4) DEFAULT NULL COMMENT '成长积分',
            //   `buy_bounds` decimal(18,4) DEFAULT NULL COMMENT '购物积分',
            //   `work` tinyint(1) DEFAULT NULL COMMENT '优惠生效情况[1111（四个状态位，从右到左）;0 - 无优惠，成长积分是否赠送;1 - 无优惠，购物积分是否赠送;2 - 有优惠，成长积分是否赠送;3 - 有优惠，购物积分是否赠送【状态位0：不赠送，1：赠送】]',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品spu积分设置'
            
            
            // 5. 保存 sku
            // 5.1 sku 基本信息信息 pms_sku_info
            //CREATE TABLE `pms_sku_info` (
            //   `sku_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'skuId',
            //   `spu_id` bigint(20) DEFAULT NULL COMMENT 'spuId',
            //   `sku_name` varchar(255) DEFAULT NULL COMMENT 'sku名称',
            //   `sku_desc` varchar(2000) DEFAULT NULL COMMENT 'sku介绍描述',
            //   `catalog_id` bigint(20) DEFAULT NULL COMMENT '所属分类id',
            //   `brand_id` bigint(20) DEFAULT NULL COMMENT '品牌id',
            //   `sku_default_img` varchar(255) DEFAULT NULL COMMENT '默认图片',
            //   `sku_title` varchar(255) DEFAULT NULL COMMENT '标题',
            //   `sku_subtitle` varchar(2000) DEFAULT NULL COMMENT '副标题',
            //   `price` decimal(18,4) DEFAULT NULL COMMENT '价格',
            //   `sale_count` bigint(20) DEFAULT NULL COMMENT '销量',
            //   PRIMARY KEY (`sku_id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='sku信息'
            
            
            // 5.2 sku 图片信息 pms_sku_images
            //CREATE TABLE `pms_sku_images` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
            //   `img_url` varchar(255) DEFAULT NULL COMMENT '图片地址',
            //   `img_sort` int(11) DEFAULT NULL COMMENT '排序',
            //   `default_img` int(11) DEFAULT NULL COMMENT '默认图[0 - 不是默认图，1 - 是默认图]',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='sku图片'
            
            
            // 5.3 sku 销售属性信息 pms_sku_sale_attr_value
            //CREATE TABLE `pms_sku_sale_attr_value` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
            //   `attr_id` bigint(20) DEFAULT NULL COMMENT 'attr_id',
            //   `attr_name` varchar(200) DEFAULT NULL COMMENT '销售属性名',
            //   `attr_value` varchar(200) DEFAULT NULL COMMENT '销售属性值',
            //   `attr_sort` int(11) DEFAULT NULL COMMENT '顺序',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='sku销售属性&值'
            
            
            // 5.4 sku 优惠 满减信息（跨库
            // 5.4.1 sku 打折信息 sms_sku_ladder
            //CREATE TABLE `sms_sku_ladder` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `sku_id` bigint(20) DEFAULT NULL COMMENT 'spu_id',
            //   `full_count` int(11) DEFAULT NULL COMMENT '满几件',
            //   `discount` decimal(4,2) DEFAULT NULL COMMENT '打几折',
            //   `price` decimal(18,4) DEFAULT NULL COMMENT '折后价',
            //   `add_other` tinyint(1) DEFAULT NULL COMMENT '是否叠加其他优惠[0-不可叠加，1-可叠加]',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品阶梯价格'
            
            
            // 5.4.2 sku 满减信息  sms_sku_full_reduction
            //CREATE TABLE `sms_sku_full_reduction` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `sku_id` bigint(20) DEFAULT NULL COMMENT 'spu_id',
            //   `full_price` decimal(18,4) DEFAULT NULL COMMENT '满多少',
            //   `reduce_price` decimal(18,4) DEFAULT NULL COMMENT '减多少',
            //   `add_other` tinyint(1) DEFAULT NULL COMMENT '是否参与其他优惠',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品满减信息'
            
            
            // 5.4.3 sku 会员价格表 sms_member_price
            //CREATE TABLE `sms_member_price` (
            //   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
            //   `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
            //   `member_level_id` bigint(20) DEFAULT NULL COMMENT '会员等级id',
            //   `member_level_name` varchar(100) DEFAULT NULL COMMENT '会员等级名',
            //   `member_price` decimal(18,4) DEFAULT NULL COMMENT '会员对应价格',
            //   `add_other` tinyint(1) DEFAULT NULL COMMENT '可否叠加其他优惠[0-不可叠加优惠，1-可叠加]',
            //   PRIMARY KEY (`id`)
            // ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品会员价格'"
          - 大保存
        - spu 检索 复杂检索
        - sku 检索
      - 后端 SPU规格维护
    - 库存服务 API
      - 整合 ware 服务 获取仓库列表
        - 数据库学习
          - wms_ware_info 仓库信息
            "仓库名 地址 邮编
            
            CREATE TABLE `wms_ware_info` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `name` varchar(255) DEFAULT NULL COMMENT '仓库名',
               `address` varchar(255) DEFAULT NULL COMMENT '仓库地址',
               `areacode` varchar(20) DEFAULT NULL COMMENT '区域编码',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='仓库信息'"
          - wms_ware_sku 商品库存
            "skuId 仓库id 库存数目 锁定库存
            
            CREATE TABLE `wms_ware_sku` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
               `ware_id` bigint(20) DEFAULT NULL COMMENT '仓库id',
               `stock` int(11) DEFAULT NULL COMMENT '库存数',
               `sku_name` varchar(200) DEFAULT NULL COMMENT 'sku_name',
               `stock_locked` int(11) DEFAULT NULL COMMENT '锁定库存',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='商品库存'"
          - wms_ware_order_task 库存工作单
            "收货人...
            
            CREATE TABLE `wms_ware_order_task` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `order_id` bigint(20) DEFAULT NULL COMMENT 'order_id',
               `order_sn` varchar(255) DEFAULT NULL COMMENT 'order_sn',
               `consignee` varchar(100) DEFAULT NULL COMMENT '收货人',
               `consignee_tel` char(15) DEFAULT NULL COMMENT '收货人电话',
               `delivery_address` varchar(500) DEFAULT NULL COMMENT '配送地址',
               `order_comment` varchar(200) DEFAULT NULL COMMENT '订单备注',
               `payment_way` tinyint(1) DEFAULT NULL COMMENT '付款方式【 1:在线付款 2:货到付款】',
               `task_status` tinyint(2) DEFAULT NULL COMMENT '任务状态',
               `order_body` varchar(255) DEFAULT NULL COMMENT '订单描述',
               `tracking_no` char(30) DEFAULT NULL COMMENT '物流单号',
               `create_time` datetime DEFAULT NULL COMMENT 'create_time',
               `ware_id` bigint(20) DEFAULT NULL COMMENT '仓库id',
               `task_comment` varchar(500) DEFAULT NULL COMMENT '工作单备注',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='库存工作单'"
          - wms_ware_order_task_detail 库存工作单详情
            "工作单内具体购买的商品
            
            CREATE TABLE `wms_ware_order_task_detail` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
               `sku_id` bigint(20) DEFAULT NULL COMMENT 'sku_id',
               `sku_name` varchar(255) DEFAULT NULL COMMENT 'sku_name',
               `sku_num` int(11) DEFAULT NULL COMMENT '购买个数',
               `task_id` bigint(20) DEFAULT NULL COMMENT '工作单id',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='库存工作单'"
          - wms_purchase 采购信息
            "
            CREATE TABLE `wms_purchase` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '采购单id',
               `assignee_id` bigint(20) DEFAULT NULL COMMENT '采购人id',
               `assignee_name` varchar(255) DEFAULT NULL COMMENT '采购人名',
               `phone` char(13) DEFAULT NULL COMMENT '联系方式',
               `priority` int(4) DEFAULT NULL COMMENT '优先级',
               `status` int(4) DEFAULT NULL COMMENT '状态',
               `ware_id` bigint(20) DEFAULT NULL COMMENT '仓库id',
               `amount` decimal(18,4) DEFAULT NULL COMMENT '总金额',
               `create_time` datetime DEFAULT NULL COMMENT '创建日期',
               `update_time` datetime DEFAULT NULL COMMENT '更新日期',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='采购信息'"
          - wms_purchase_detail 采购信息详情
            "
            
            CREATE TABLE `wms_purchase_detail` (
               `id` bigint(20) NOT NULL AUTO_INCREMENT,
               `purchase_id` bigint(20) DEFAULT NULL COMMENT '采购单id',
               `sku_id` bigint(20) DEFAULT NULL COMMENT '采购商品id',
               `sku_num` int(11) DEFAULT NULL COMMENT '采购数量',
               `sku_price` decimal(18,4) DEFAULT NULL COMMENT '采购金额',
               `ware_id` bigint(20) DEFAULT NULL COMMENT '仓库id',
               `status` int(11) DEFAULT NULL COMMENT '状态[0新建，1已分配，2正在采购，3已完成，4采购失败]',
               PRIMARY KEY (`id`)
             ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4"
        - 把 ware 服务加入注册中心
        - 仓库管理
        - 库存查询
        - 创建采购需求
        - 采购需求合并成采购单
        - 领取采购单 完成采购
    - 总结
      - 分布式基础
        "微服务 配置中心 注册中心 远程调用 网关"
      - 基础开发
        "OSS  Vue spring mybatis-plus"
      - 环境
        "Linux Docker MySQL redis 逆向工程 & 人人开源"
      - 开发规范
        "数据校验 全局异常 网关 全局统一返回R 全局跨域 VO TO PO 逻辑删除 Lombok"
    - [重构]nacos持久化
      - 配置数据库 - 建库表
        "建库语句：
        --------------------------------
        CREATE SCHEMA `gulimall_nacos` DEFAULT CHARACTER SET utf8 ;
        
        建表语句：
        ---------------------------------
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = config_info   */
        /******************************************/
        CREATE TABLE `config_info` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
          `data_id` varchar(255) NOT NULL COMMENT 'data_id',
          `group_id` varchar(255) DEFAULT NULL,
          `content` longtext NOT NULL COMMENT 'content',
          `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
          `src_user` text COMMENT 'source user',
          `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
          `app_name` varchar(128) DEFAULT NULL,
          `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
          `c_desc` varchar(256) DEFAULT NULL,
          `c_use` varchar(64) DEFAULT NULL,
          `effect` varchar(64) DEFAULT NULL,
          `type` varchar(64) DEFAULT NULL,
          `c_schema` text,
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info';
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = config_info_aggr   */
        /******************************************/
        CREATE TABLE `config_info_aggr` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
          `data_id` varchar(255) NOT NULL COMMENT 'data_id',
          `group_id` varchar(255) NOT NULL COMMENT 'group_id',
          `datum_id` varchar(255) NOT NULL COMMENT 'datum_id',
          `content` longtext NOT NULL COMMENT '内容',
          `gmt_modified` datetime NOT NULL COMMENT '修改时间',
          `app_name` varchar(128) DEFAULT NULL,
          `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='增加租户字段';
        
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = config_info_beta   */
        /******************************************/
        CREATE TABLE `config_info_beta` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
          `data_id` varchar(255) NOT NULL COMMENT 'data_id',
          `group_id` varchar(128) NOT NULL COMMENT 'group_id',
          `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
          `content` longtext NOT NULL COMMENT 'content',
          `beta_ips` varchar(1024) DEFAULT NULL COMMENT 'betaIps',
          `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
          `src_user` text COMMENT 'source user',
          `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
          `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_beta';
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = config_info_tag   */
        /******************************************/
        CREATE TABLE `config_info_tag` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
          `data_id` varchar(255) NOT NULL COMMENT 'data_id',
          `group_id` varchar(128) NOT NULL COMMENT 'group_id',
          `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
          `tag_id` varchar(128) NOT NULL COMMENT 'tag_id',
          `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
          `content` longtext NOT NULL COMMENT 'content',
          `md5` varchar(32) DEFAULT NULL COMMENT 'md5',
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
          `src_user` text COMMENT 'source user',
          `src_ip` varchar(20) DEFAULT NULL COMMENT 'source ip',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_info_tag';
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = config_tags_relation   */
        /******************************************/
        CREATE TABLE `config_tags_relation` (
          `id` bigint(20) NOT NULL COMMENT 'id',
          `tag_name` varchar(128) NOT NULL COMMENT 'tag_name',
          `tag_type` varchar(64) DEFAULT NULL COMMENT 'tag_type',
          `data_id` varchar(255) NOT NULL COMMENT 'data_id',
          `group_id` varchar(128) NOT NULL COMMENT 'group_id',
          `tenant_id` varchar(128) DEFAULT '' COMMENT 'tenant_id',
          `nid` bigint(20) NOT NULL AUTO_INCREMENT,
          PRIMARY KEY (`nid`),
          UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
          KEY `idx_tenant_id` (`tenant_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='config_tag_relation';
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = group_capacity   */
        /******************************************/
        CREATE TABLE `group_capacity` (
          `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
          `group_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
          `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
          `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
          `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
          `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
          `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
          `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_group_id` (`group_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='集群、各Group容量信息表';
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = his_config_info   */
        /******************************************/
        CREATE TABLE `his_config_info` (
          `id` bigint(64) unsigned NOT NULL,
          `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
          `data_id` varchar(255) NOT NULL,
          `group_id` varchar(128) NOT NULL,
          `app_name` varchar(128) DEFAULT NULL COMMENT 'app_name',
          `content` longtext NOT NULL,
          `md5` varchar(32) DEFAULT NULL,
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
          `src_user` text,
          `src_ip` varchar(20) DEFAULT NULL,
          `op_type` char(10) DEFAULT NULL,
          `tenant_id` varchar(128) DEFAULT '' COMMENT '租户字段',
          PRIMARY KEY (`nid`),
          KEY `idx_gmt_create` (`gmt_create`),
          KEY `idx_gmt_modified` (`gmt_modified`),
          KEY `idx_did` (`data_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='多租户改造';
        
        
        /******************************************/
        /*   数据库全名 = nacos_config   */
        /*   表名称 = tenant_capacity   */
        /******************************************/
        CREATE TABLE `tenant_capacity` (
          `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
          `tenant_id` varchar(128) NOT NULL DEFAULT '' COMMENT 'Tenant ID',
          `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
          `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
          `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
          `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
          `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
          `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
          `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
          `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_tenant_id` (`tenant_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='租户容量信息表';
        
        
        CREATE TABLE `tenant_info` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
          `kp` varchar(128) NOT NULL COMMENT 'kp',
          `tenant_id` varchar(128) default '' COMMENT 'tenant_id',
          `tenant_name` varchar(128) default '' COMMENT 'tenant_name',
          `tenant_desc` varchar(256) DEFAULT NULL COMMENT 'tenant_desc',
          `create_source` varchar(32) DEFAULT NULL COMMENT 'create_source',
          `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
          `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
          PRIMARY KEY (`id`),
          UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
          KEY `idx_tenant_id` (`tenant_id`)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='tenant_info';
        
        CREATE TABLE `users` (
        	`username` varchar(50) NOT NULL PRIMARY KEY,
        	`password` varchar(500) NOT NULL,
        	`enabled` boolean NOT NULL
        );
        
        CREATE TABLE `roles` (
        	`username` varchar(50) NOT NULL,
        	`role` varchar(50) NOT NULL,
        	UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE
        );
        
        CREATE TABLE `permissions` (
            `role` varchar(50) NOT NULL,
            `resource` varchar(512) NOT NULL,
            `action` varchar(8) NOT NULL,
            UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
        );
        
        INSERT INTO users (username, password, enabled) VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', TRUE);
        
        INSERT INTO roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');
        "
      - 配置数据库 - 修改隔离
        "SET @@transaction_isolation='READ-COMMITTED';"
      - 因为nacos不支持utf8mb4，所以修改mysql my.cnf文件
      - docker 下载
        "docker pull nacos/nacos-server:1.2.1"
      - docker 启动 注意指定数据库
        "docker run --env MODE=standalone --name nacosGrain -d -p 8848:8848 nacos/nacos-server:1.2.1
        
        测试：http://192.168.2.3:8848/nacos/#/login"
      - 配置 nacos
        " docker exec -it nacosGrain bash
        
        vi conf/application.properties
        
        重启容器
        
        修改数据库相关
        ------------
        # spring
        server.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos}
        server.contextPath=/nacos
        server.port=${NACOS_SERVER_PORT:8848}
        spring.datasource.platform=mysql
        nacos.cmdb.dumpTaskInterval=3600
        nacos.cmdb.eventTaskInterval=10
        nacos.cmdb.labelTaskInterval=300
        nacos.cmdb.loadDataAtStart=false
        db.num=${MYSQL_DATABASE_NUM:1}
        db.url.0=jdbc:mysql://192.168.2.3:23306/gulimall_nacos?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&serverTimezone=Asia/Shanghai
        # db.url.1=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true
        db.user=root
        db.password=123456"
  - 分布式高级 微服务
    - elastic-search
      - 目的
        - 全文检索，如搜索“手机”
        - 日志分析
      - 环境搭配
        - 创建专门的 es 模块
          "com.atguigu.gulimall gulimall-search
          选择 web dep"
        - pom
          "<!-- https://mvnrepository.com/artifact/org.elasticsearch.client/elasticsearch-rest-high-level-client -->
          <dependency>
              <groupId>org.elasticsearch.client</groupId>
              <artifactId>elasticsearch-rest-high-level-client</artifactId>
              <version>7.4.2</version>
          </dependency>
          "
        - 如果是 springboot 项目，还要改版本，因为 springboot 已经指定了版本
          "<properties>
              <java.version>1.8</java.version>
              <elasticsearch.version>7.4.2</elasticsearch.version>
          </properties>"
        - 配置Bean
          "@Configuration
          public class GulimallElasticSearchConfig {
              private final static Logger LOGGER = LoggerFactory.getLogger(GulimallElasticSearchConfig.class);
          
              @Bean
              public RestHighLevelClient restHighLevelClient(){
                  return new RestHighLevelClient(
                          RestClient.builder(
                                  new HttpHost("192.168.2.3",29200,"http")
                          )
                  );
              }
          }"
        - 如果启动时数据库出错
          "@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)"
      - 商品上架 - 即把数据存入es
        - 哪些数据存入es？——只存搜索结果页面要用的数据
          "因为 es 数据存在内存，需要节省空间"
          - sku 信息（商品名...）
          - attr 规格信息（型号...）
        - es 建立 index
          "PUT product
          {
            "mappings": {
              "properties": {
                "skuId": {
                  "type": "long"
                },
                "spuId": { // 数据折叠功能？所以是 keyword
                  "type": "keyword"
                },
                "skuTitle": { // 只保存主标题，因为副标题在结果页不展示
                  "type": "text",
                  "analyzer": "ik_smart"
                },
                "skuPrice": { // 为了防止精度
                  "type": "keyword"
                },
                "skuImg": { // 默认显示图片
                  "type": "keyword",
                  "index": false, // 不用于检索
                  "doc_values": false // 不用于聚合
                },
                "saleCount": { // 销量
                  "type": "long"
                },
                "hasStock": { // 是否有库存。不存库存具体量
                  "type": "boolean"
                },
                "hotScore": { // 热度评分，即商品的"综合"排序
                  "type": "long"
                },
                "brandId": {
                  "type": "long"
                },
                "catalogId": {
                  "type": "long"
                },
                "brandName": { //品牌名
                  "type": "keyword",
                  "index": false,
                  "doc_values": false
                },
                "brandImg": { // 品牌图片
                  "type": "keyword",
                  "index": false,
                  "doc_values": false
                },
                "catalogName": { // 三级分类名
                  "type": "keyword",
                  "index": false,
                  "doc_values": false
                },
                "attrs": { // 属性集合
                  "type": "nested", // 嵌套，不要扁平化处理
                  "properties": {
                    "attrId": {
                      "type": "long"
                    },
                    "attrName": { // 属性名不用检索，如 CPU型号、内存
                      "type": "keyword",
                      "index": false,
                      "doc_values": false
                    },
                    "attrValue": { // 属性值用于 keyword 检索，如 8G 12G 16G
                      "type": "keyword"
                    }
                  }
                }
              }
            }
          }"
        - 编写 TO 对象
        - API: product/spuinfo/{spuId}/up
    - 前端商城页面开发
      - [架构]把前端页面放到对应的微服务里面，这样每个服务都是独立自治，可以单独升级
      - product 服务 页面制作
        - 导入POM thymeleaf starter
          "<dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-thymeleaf</artifactId>
          </dependency>"
        - resources/static 下放静态资源
          "前端文件夹 html\首页资源/index 放入"
        - resources/templates 下放html页面
          "前端文件 html\首页资源/index.html 放入 	"
        - 开发期间关闭 缓存
          "thymeleaf:
            cache: false"
        - 启动项目即可访问 http://192.168.2.13:35200/ 
        - 建立 web 包，用于页面controller （和 json controller 分开）
          - /index.html 路由controller
            "@Controller
            public class IndexController {
                private final static Logger LOGGER = LoggerFactory.getLogger(IndexController.class);
            
                @GetMapping({"/", "/index.html"})
                public String indexPage() {
                    // 前缀默认是 classPath:/templates/
                    // 后缀默认是 .html
                    return "index";
                }
            }"
        - 编写 thymeleaf 的 html
          - 名称空间
            "<html lang="en" xmlns:th="http://www.thymeleaf.org">"
      - search 商品检索服务
        - 环境准备
          "POM
          ----------------
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-thymeleaf</artifactId>
          </dependency>
          ----------------
          
          
          把 html 页面放入src/resources/templates 内
          -----------------
          注意页面上这个 thymeleaf 的名称空间
          <html lang="en" xmlns:th="http://www.thymeleaf.org">
          
          
          把静态资源放入 nginx 管理的位置
          
          nginx 配置
          server_name  *.gulimall.com;
          重启
          docker restart nginxGrain
          现在访问 http://search.gulimall.com:20080/ 展示首页
          因为没有配置网关
          - id: gulimall-host
            uri: lb://gulimall-product
            predicates:
              - Host=gulimall.com
          - id: gulimall-search
            uri: lb://gulimall-search
            predicates:
              - Host=search.gulimall.com
          
          
          建立静态域名映射
          192.168.2.3 search.gulimall.com 
          
          
          复习一下
          nginx 设置了http 头 Host = $host
              location / {
                  proxy_pass http://gulimall;
                  proxy_set_header Host $host;
              }
          
          网关用这个 host 区分网页
            predicates:
              - Host=search.gulimall.com
          
          最后加上开发依赖
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-devtools</artifactId>
          </dependency>
          
          关闭缓存
          thymeleaf:
            cache: false
          "
        - 修改 mapping
          "先迁移数据
          
          创建新的index
          -----------
          PUT gulimall_product
          {
              "mappings" : {
                "properties" : {
                  "attrs" : {
                    "type" : "nested",
                    "properties" : {
                      "attrId" : {
                        "type" : "long"
                      },
                      "attrName" : {
                        "type" : "keyword"
                      },
                      "attrValue" : {
                        "type" : "keyword"
                      }
                    }
                  },
                  "brandId" : {
                    "type" : "long"
                  },
                  "brandImg" : {
                    "type" : "keyword"
                  },
                  "brandName" : {
                    "type" : "keyword"
                  },
                  "catalogId" : {
                    "type" : "long"
                  },
                  "catalogName" : {
                    "type" : "keyword"
                  },
                  "hasStock" : {
                    "type" : "boolean"
                  },
                  "hotScore" : {
                    "type" : "long"
                  },
                  "saleCount" : {
                    "type" : "long"
                  },
                  "skuId" : {
                    "type" : "long"
                  },
                  "skuImg" : {
                    "type" : "keyword"
                  },
                  "skuPrice" : {
                    "type" : "keyword"
                  },
                  "skuTitle" : {
                    "type" : "text",
                    "analyzer" : "ik_smart"
                  },
                  "spuId" : {
                    "type" : "keyword"
                  }
                }
              }
            
          }
          
          -------------
          
          
          迁移
          --------------
          POST _reindex
          {
            "source": {
              "index": "product"
            },
            "dest": {
              "index": "gulimall_product"
            }
          }"
    - nginx 搭建局域网域名访问
      - 修改 hosts 文件 C:\Windows\System32\drivers\etc\hosts
        "gulimall.com  -> nginx所在ip
        search.gulimall.com 
        item.gulimall.com
        member.gulimall.com
        
        nginx 意义：反向代理 负载均衡
        
        -------------
        192.168.2.3 gulimall.com
        192.168.2.3 search.gulimall.com 
        192.168.2.3 item.gulimall.com
        192.168.2.3 member.gulimall.com
        "
      - 修改后 看是不是能通过域名访问到 nginx
        "404 Not Found
        nginx/1.10.3"
      - nginx 反向代理 conf.d/gulimall.conf 
        "server {
            listen       80; 
            server_name  gulimall.com; 
        
            #charset koi8-r;
            #access_log  /var/log/nginx/log/host.access.log  main;
        
            location / {
                proxy_pass http://192.168.2.13:35200;
            }
        
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
                root   /usr/share/nginx/html;
            }
        }"
    - 压力测试 jemter
      - 基础知识
        - 目的：内存泄漏 并发
        - 指标
          - 响应时间
            - 最大响应时间
            - 最少响应时间
            - 90% 响应时间
          - 吞吐量
            - QPS 每秒查询数
            - HPS 每秒点击数
            - TPS 每秒交易数
              "互联网商城 TPS 一百万"
          - 错误率
        - 方法：JMeter
      - 测试流程
        - 单独中间件测试
        - 无持久层的链路测试 nginx->网关->微服务
        - 持久层测试
      - 优化
        - 数据库索引
        - 动静分离
          "规则：nginx  /static/** 资源不转发，而是自己的资源"
    - 缓存 redis
      - 基础知识
        - 哪些数据适合缓存？
          "即时性、一致性要求不高
          访问量大，更新频率不高的数据"
        - 为什么不能用本地缓存？
          "集群中，一个系统改了数据，其他的系统还是用缓存，就会出问题"
      - 简单使用
        - 引入 POM
          "<dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-data-redis</artifactId>
          </dependency>"
        - 配置
          "spring:
            redis:
              host: 192.168.2.3
              port: 26379"
        - 注入template
          "@Autowired
          StringRedisTemplate stringRedisTemplate;"
        - set k v
          "stringRedisTemplate.opsForValue().set("hello","world");"
        - get k
          "stringRedisTemplate.opsForValue().get("hello");"
        - 执行 lua 脚本
      - redis 导致 netty 堆外内存OOM
        "springboot 使用 lettuce -> netty -> redis
        lettuce 存在 bug
        
        使用 jedis 
        --------------------
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.lettuce</groupId>
                    <artifactId>lettuce-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
        </dependency>"
    - Redisson
      - 文档
        "https://github.com/redisson/redisson/wiki/Table-of-Content"
      - 什么是 redisson
        "Redisson是一个在Redis的基础上实现的Java驻内存数据网格
        
        Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。"
      - 依赖POM
        "<!-- https://mvnrepository.com/artifact/org.redisson/redisson -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>3.12.5</version>
        </dependency>
        "
      - 配置
      - redisson 的锁
        - 1. 存在自动续期功能
        - 2. 实现 Lock 接口，使用极其方便
          "lock tryLock 读写锁 信号量"
    - spring 框架的 cache
      - 两个概念
        - cache manager 缓存管理器 name-cache
        - cache 缓存 -> 就是一个 k-v
      - 5个注解
        - @Cacheable  数据保存到缓存
        - @CacheEvict  删除缓存
        - @CachePut  不影响方法执行更新缓存
        - @Caching 以上方法组合
        - @CacheConfig 类级别共享缓存
        - @EnableCaching  启动类开启缓存
      - spring boot 原理
        "原理：
        CacheAutoConfiguration -> CacheConfigurationImportSelector 
        -> CacheConfigurations -> RedisCacheConfiguration
        -> redisCacheConfiguration.getIfAvailable 
        说明只要我们有 RedisCacheConfiguration 就会用我们自己的"
      - 默认和修改
        - 缓存的 key ：simpleKey
          "使用 key 属性 ，sqEl"
        - 缓存的 value ：JDK序列化
          "改成 JSON 需要redisCacheConfig
          
          自己写一个 bean RedisCacheConfiguration  就行了"
          - 自定义 redisCacheConfig
            "@EnableConfigurationProperties(CacheProperties.class)
            @Configuration
            @EnableCaching
            public class MyCacheConfig {
                private final static Logger LOGGER = LoggerFactory.getLogger(MyCacheConfig.class);
            
                @Bean
                public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties) {
                    RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();
            
                    config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()));
                    config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));
            
                    CacheProperties.Redis redisProperties = cacheProperties.getRedis();
            
                    if (redisProperties.getTimeToLive() != null) {
                        config = config.entryTtl(redisProperties.getTimeToLive());
                    }
                    if (redisProperties.getKeyPrefix() != null) {
                        config = config.prefixKeysWith(redisProperties.getKeyPrefix());
                    }
                    if (!redisProperties.isCacheNullValues()) {
                        config = config.disableCachingNullValues();
                    }
                    if (!redisProperties.isUseKeyPrefix()) {
                        config = config.disableKeyPrefix();
                    }
            
                    return config;
                }
            
            }"
        - 过期时间：永不过期 -1
          "配置文件中修改"
      - 简单使用
        - POM
          "spring-boot-starter-cache
          spring-boot-starter-data-redis"
        - 配置
          "spting:
          	cache:
            		type: redis"
        - redis 缓存配置
          "redis:
            time-to-live: 5000 // 存活时间 ms
            key-prefix: CACHE_ // 前缀
            use-key-prefix: true // 使用前缀
            cache-null-values: true // 缓存空值  防止缓存穿透"
        - @Cacheable ({"缓存分组名字"})
  - 高可用集群 架构师提升
- wanyuan 实习 后台管理系统
  - 系统搭建
    - 数据表汇总
      "120.79.208.145  3306   ruoyi  ruoyi  zY5BLnraK2bMXhFP"
      - admin
        - admin 管理员表
        - dimin_log 管理员日志表 记录管理员的操作
      - app 应用临时增加的吧
        - account 供销对账单表
        - message 消息表 （空）
        - share_category 分享分类表 （X）
        - share_experience 分享经验表 （X）
        - stock 库存表
        - stock_in 入库表
        - stock_log 库存变更表
        - stock_out 出库表
        - stock_project 采购计划表
      - area 地区表（全国）
      - attachment 附件表
      - auth 权限相关
        - group 分组表
        - group_access 权限分组表
        - rule 节点表 
      - category 农产品分类表
      - config 系统配置（前端展示的一些文本）
      - ems （空）邮箱验证码表
      - gonggao  公告
      - package
        - package 框表
        - record 框架历史记录
      - purchase_record 采购点表？这不像是采购点表
      - shop
        - area 小区分类（城区表）
        - bill 结算表
        - cart 购物车
        - cash 提现表
        - community 小区分类
        - feedback 反馈表（挂件）
        - gongyi 公益回收表（挂件）
        - good 商品表
        - good_source （商品供货表？）
        - order 订单表
        - order_good 订单商品表
        - vadio 视频管理（挂件）
      - sms 短信验证码表（就是一个日志）
      - static_good 商品统计表（空）
      - supply
        - account 供销对账单表
        - cai 农户采购表
        - county 县级分类
        - gong 农户供货表
        - log 记录表
        - towns 乡级分类
        - village 村庄分类
      - test 测试表（空）
      - user
        - user 会员表
        - farmer 农户基本情况表
        - group 会员组表（居民、农户、库存、发货..）
        - money_log 会员余额变动
        - rule 会员规则表
        - score_log 会员积分变动
        - token 会员Token表
      - version 版本表
- 若依 前后端分离版 学习
  "项目搭建步骤
  
  下载源代码 https://gitee.com/y_project/RuoYi-Vue 
  
  执行 ./sql 中的sql脚本
  
  解压，idea 打开已存在的maven项目
  配置数据库，redis，以及代码自动生成规则
  启动应用
  
  vscode打开 ./ruoyi-ui
  并执行 npm install --registry=https://registry.npm.taobao.org 
  然后 npm run dev
  
  
  
  ------------------
  自定义序列化器
  public class TimeJsonSerializer extends JsonSerializer<Integer> {
      private final static Logger LOGGER = LoggerFactory.getLogger(TimeJsonSerializer.class);
  
      private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
  
      @Override
      public void serialize(Integer time, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
          Date date = new Date();
          date.setTime(time * 1000L);
  
          String format = DATE_TIME_FORMATTER.format(LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault()));
  
          jsonGenerator.writeString(format);
      }
  }
  ----------------------
  
  
  @JsonSerialize(using = TimeJsonSerializer.class)
  字段
  
  
  
  关于 createtime 报错的问题，删除
  
  @Excel(name = "创建时间")
  @JsonSerialize(using = TimeJsonSerializer.class)
  private Integer createtime;
  
  
  public Integer getCreatetime() {
      return createtime;
  }
  
  public void setCreatetime(Integer createtime) {
      this.createtime = createtime;
  }
  
  --------
  
  @Excel(name = "更新时间")
  @JsonSerialize(using = TimeJsonSerializer.class)
  private Integer updatetime;
  
  public Integer getUpdatetime() {
      return updatetime;
  }
  
  public void setUpdatetime(Integer updatetime) {
      this.updatetime = updatetime;
  }"
- Foreign mybatis 插件开发
  - 前期表格创建
    - 外键 用户角色表
      "DROP TABLE IF EXISTS `tb_user_role`;
      DROP TABLE IF EXISTS `tb_user`;
      DROP TABLE IF EXISTS `tb_role`;
      
      
      CREATE TABLE `tb_user`
      (
          `id`       varchar(40) NOT NULL,
          `username` varchar(20) NOT NULL,
          PRIMARY KEY (`id`)
      ) comment '用户表';
      
      CREATE TABLE `tb_role`
      (
          `id`          int(11)     NOT NULL AUTO_INCREMENT,
          `name`        varchar(20) NOT NULL,
          `description` varchar(255) DEFAULT NULL,
          PRIMARY KEY (`id`)
      ) comment '角色表';
      
      CREATE TABLE `tb_user_role`
      (
          `id`      int(11)     NOT NULL AUTO_INCREMENT,
          `user_id` varchar(40) NOT NULL,
          `role_id` int(11)     NOT NULL,
          PRIMARY KEY (`id`)
          -- CONSTRAINT `fk_user_role_t_role_1` FOREIGN KEY (`role_id`) REFERENCES `tb_role` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
          -- CONSTRAINT `fk_user_role_t_user_1` FOREIGN KEY (`user_id`) REFERENCES `tb_user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
      ) comment '用户角色表';
      
      INSERT INTO `tb_role`(`id`, `name`)
      VALUES ('1', '读者'),
             ('2', '作者'),
             ('3', '管理员');
      
      INSERT INTO `tb_user`(`id`, `username`)
      VALUES ('r01', 'reader1'),
             ('r02', 'reader2'),
             ('w01', 'author1'),
             ('w02', 'author2'),
             ('a01', 'admin1'),
             ('a02', 'admin2');
      
      INSERT INTO `tb_user_role`(`user_id`, `role_id`)
      VALUES ('r01', '1'),
             ('r02', '1'),
             ('w01', '2'),
             ('w02', '2'),
             ('a01', '3'),
             ('a02', '3');
      
      
      --  外键语法
      --  [CONSTRAINT symbol] FOREIGN KEY [id] (index_col_name, ...)
      --  REFERENCES tbl_name (index_col_name, ...)
      --  [ON DELETE {RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT}]
      --  [ON UPDATE {RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT}]
      --  在父表上进行update/delete以更新或删除在子表中有一条或多条对应匹配行的候选键时，
      --  父表的行为取决于：在定义子表的外键时指定的on update/on delete子句。
      --  ① RESTRICT（限制外表中的外键改动，默认值）
      --  ② CASCADE（跟随外键改动）
      --  ③ SET NULL（设空值）
      --  ④ SET DEFAULT（设默认值）
      --  ⑤ NO ACTION（无动作，默认的）
      "
    - 冗余字段 暂时不弄
      "用户表 user (id, name)
      评论表 comment (id, user_id, user_name, content)"
  - 插件原理
    - 拦截Executor的int update(MappedStatement ms, Object parameter)方法
      "因为我们要拦截insert/update/delete/replace语句，都是走这个方法"
      - Executor是什么？真正执行 SQL 的对象
    - 入参 MappedStatement ms
      "MappedStatement 对象代表一个配置的sql信息，如xml配置的<select>或者注解配置的@Select 
      其中的sqlSource 对象，包含 sql、parameterMappings
      	INSERT INTO `tb_comment`(`user_id`, `content`)
              VALUES (?, ?)
      可以看到 原本的 #{} 已经换为 ?
      	parameterMappings 表示sql语句中 ? 和对象属性的map关系，如第一个?代表 user.id"
      - boundSql = ms.getBoundSql(parameter)
        - 什么是 BoundSql？对 sqlSource中sql和参数的封装
          "一般可以认为：sqlSource + mapper方法的入参 = BoundSql"
        - List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
          "描述 sql 中 ? 和 parameter 属性的映射 "
        - String sql = boundSql.getSql();
          "拿到 sql 语句，典型值：
          INSERT INTO `tb_comment`(`user_id`, `content`)
                  VALUES (?, ?)"
    - 入参 Object parameter 就是 mapper 传入的参数
      "例如 mapper.insert(user)，那么 parameter 就是 user"
  - 一步步开发
    - INSERT  从表
      "只在插入从表时，需要判断约束
      
      找出 INSERT 中的 列和值
      
      看看有没有对应的 主表+列
      
      构造 SELECT COUNT(*) FROM P_T WHERE C=V AND ..
      "
  - 可能要用到开源工具
    - JSqlParser
      "https://github.com/JSQLParser/JSqlParser
      
      官网 http://jsqlparser.sourceforge.net/home.php
      
      <dependency>
          <groupId>com.github.jsqlparser</groupId>
          <artifactId>jsqlparser</artifactId>
          <version>0.9</version>
      </dependency>
      
      使用手册 https://github.com/JSQLParser/JSqlParser/wiki 可以的"
