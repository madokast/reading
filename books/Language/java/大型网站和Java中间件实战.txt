大型网站系统与 Java 中间件实战 曾宪杰

- 分布式系统介绍 ankied
  - 为什么要分布式？
    "1. 单机瓶颈 2. 高可用"
  - 网络IO模型
    - BIO——一个socket由一个线程处理，要阻塞就阻塞
    - NIO——（Reactor）一人管全部socket，当有的准备好了，就交给一个线程来做（还需要先读数据）
      "Reactor线程模型"
    - AIO——（Reactor）一人管全部socket，当有的准备&复制好了，就交给一个线程来做（直接处理数据）
    - Reactor模型 & Proactor模型
      "本质相同点：都是多路复用io。——等待fds中有数据
      多路分离器：事件发生时，将事件分为读事件、写事件，相应的回调会去处理事件（单线程也可以，即即等待select、也运行事件回调函数）
      
      reactor——等待fds中有一个fd准备好
      proactor——等待fds中有一个fd数据复制好——因此proactor需要提前准备好缓冲区
      
      因此：reactor还需要在之后的读写时短暂阻塞，proactor一旦唤醒，数据就在用户进程缓冲区
      
      
      
      https://cloud.tencent.com/developer/article/1488120"
  - 分布式下 session 问题（4种解决方案）
    - 按照 hash(session)%n 路由
      "一个session每次都是一个服务处理"
    - session 复制
      "一个session复制到所有服务中"
    - session 集中管理
      "使用一个 session 服务器"
    - cookie based
      "cookie 中保存session 状态"
  - 分布式数据库三步走 ankied
    "读写分离 垂直拆分 水平拆分"
- 大型网站架构演进 ankied
  - 单机
  - 应用 数据库 分离
  - 应用集群化 利用网关负载均衡
  - 数据库 读写分离
  - 引入缓存（数据缓存 + 页面缓存）
  - 数据库 转库专用 垂直拆分 水平拆分
  - 应用拆分
- 数据访问层
  - 数据拆分两种方法
    "垂直拆分 水平拆分"
- 消息中间件
  - 目的：任务异步处理、解耦服务调用 ankied
  - 举例：用户登录，有很多服务需要订阅用户登录成功的信息，如短信系统 ankied
  - JMS ankied
    - 重要组件
      - destination 消息通道（topic/queue）消息发送、接收方都需要这个来收发消息
      - connection 连接。对TCP/IP封装，Connection可以产生一个或多个Session
      - session 会话。用于创建消息、发送者、接收者。
      - message 消息。Bytes Map Object Text..
    - 两种消息模式
      - queue——多个发送者往queue中有序发消息，多个消费者从queue有序取消息，不重复消费
        - 多个发送者？对
        - 多个消费者？对。A消费了消息a，B就不会看到消息a了
      - topic Pub/Sub订阅发布模式——发布者发消息，每个消费者订阅消息
    - XA系列接口 表示支持分布式事务
  - 消息一致性？产生消息的业务如成功，消息一定要发送出去，否则不可发消息 ankied
    - 举例：用户登录成功了，这一消息必须发出，若登陆失败，消息不可发出
    - 业务和消息发送是原子的，要么同时成功，要么同时失败
    - 小知识：XA协议？——实现分布式事务
    - 如何实现消息一致性？
      - 方法一：利用分布式事务
      - 方法二
        "首先发送预处理消息
        然后处理业务
        成功后再发送实际消息
        
        若消息中心长期只看到预处理消息，则主动询问消息发送者"
  - JMS中queue/topic模型的不足 ankied
    - 场景：希望集群间采用topic接受所有消息，集群内采用queue
      "即以集群作为订阅者，但是集群内布采用queue消费"
    - 怎么做？需要引入集群id
